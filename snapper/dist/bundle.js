(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
  var __commonJS = (callback, module2) => () => {
    if (!module2) {
      module2 = {exports: {}};
      callback(module2.exports, module2);
    }
    return module2.exports;
  };
  var __exportStar = (target, module2, desc) => {
    if (module2 && typeof module2 === "object" || typeof module2 === "function") {
      for (let key of __getOwnPropNames(module2))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule = (module2) => {
    return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
  };
  var __toBinary = false ? (base64) => new Uint8Array(Buffer.from(base64, "base64")) : /* @__PURE__ */ (() => {
    var table = new Uint8Array(128);
    for (var i2 = 0; i2 < 64; i2++)
      table[i2 < 26 ? i2 + 65 : i2 < 52 ? i2 + 71 : i2 < 62 ? i2 - 4 : i2 * 4 - 205] = i2;
    return (base64) => {
      var n2 = base64.length, bytes = new Uint8Array((n2 - (base64[n2 - 1] == "=") - (base64[n2 - 2] == "=")) * 3 / 4 | 0);
      for (var i3 = 0, j2 = 0; i3 < n2; ) {
        var c0 = table[base64.charCodeAt(i3++)], c1 = table[base64.charCodeAt(i3++)];
        var c2 = table[base64.charCodeAt(i3++)], c3 = table[base64.charCodeAt(i3++)];
        bytes[j2++] = c0 << 2 | c1 >> 4;
        bytes[j2++] = c1 << 4 | c2 >> 2;
        bytes[j2++] = c2 << 6 | c3;
      }
      return bytes;
    };
  })();

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS((exports2, module2) => {
    /**
     * @license React
     * react.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.2.0";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a2) {
          return isArrayImpl(a2);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e2) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x2) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                return c2;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i2 = 0; i2 < children.length; i2++) {
              child = children[i2];
              nextName = nextNamePrefix + getElementKey(child, i2);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n2 = 0;
          mapChildren(children, function() {
            n2++;
          });
          return n2;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef2(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name2) {
                ownName = name2;
                if (!render.name && !render.displayName) {
                  render.displayName = name2;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name2) {
                ownName = name2;
                if (!type.name && !type.displayName) {
                  type.displayName = name2;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState2(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef2(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name2, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match = x2.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name2;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x2) {
                  control = x2;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x2) {
                  control = x2;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x2) {
                control = x2;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name2 = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x2) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name2 = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name2) {
              return "\n\nCheck the render method of `" + name2 + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i2 = 0; i2 < node.length; i2++) {
              var child = node[i2];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name2 = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name2, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i2 = 0; i2 < keys.length; i2++) {
              var key = keys[i2];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i2 = 2; i2 < arguments.length; i2++) {
            validateChildKeys(arguments[i2], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i2 = 0;
              try {
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i2 + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports2.Children = Children;
        exports2.Component = Component;
        exports2.Fragment = REACT_FRAGMENT_TYPE;
        exports2.Profiler = REACT_PROFILER_TYPE;
        exports2.PureComponent = PureComponent;
        exports2.StrictMode = REACT_STRICT_MODE_TYPE;
        exports2.Suspense = REACT_SUSPENSE_TYPE;
        exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports2.cloneElement = cloneElement$1;
        exports2.createContext = createContext;
        exports2.createElement = createElement$1;
        exports2.createFactory = createFactory;
        exports2.createRef = createRef;
        exports2.forwardRef = forwardRef2;
        exports2.isValidElement = isValidElement;
        exports2.lazy = lazy;
        exports2.memo = memo;
        exports2.startTransition = startTransition;
        exports2.unstable_act = act;
        exports2.useCallback = useCallback;
        exports2.useContext = useContext;
        exports2.useDebugValue = useDebugValue;
        exports2.useDeferredValue = useDeferredValue;
        exports2.useEffect = useEffect;
        exports2.useId = useId;
        exports2.useImperativeHandle = useImperativeHandle;
        exports2.useInsertionEffect = useInsertionEffect;
        exports2.useLayoutEffect = useLayoutEffect;
        exports2.useMemo = useMemo;
        exports2.useReducer = useReducer;
        exports2.useRef = useRef2;
        exports2.useState = useState2;
        exports2.useSyncExternalStore = useSyncExternalStore;
        exports2.useTransition = useTransition;
        exports2.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS((exports2, module2) => {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_development();
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS((exports2) => {
    /**
     * @license React
     * scheduler.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap2, node) {
          var index = heap2.length;
          heap2.push(node);
          siftUp(heap2, node, index);
        }
        function peek(heap2) {
          return heap2.length === 0 ? null : heap2[0];
        }
        function pop(heap2) {
          if (heap2.length === 0) {
            return null;
          }
          var first = heap2[0];
          var last = heap2.pop();
          if (last !== first) {
            heap2[0] = last;
            siftDown(heap2, last, 0);
          }
          return first;
        }
        function siftUp(heap2, node, i2) {
          var index = i2;
          while (index > 0) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap2[parentIndex];
            if (compare(parent, node) > 0) {
              heap2[parentIndex] = node;
              heap2[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap2, node, i2) {
          var index = i2;
          var length = heap2.length;
          var halfLength = length >>> 1;
          while (index < halfLength) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap2[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap2[rightIndex];
            if (compare(left, node) < 0) {
              if (rightIndex < length && compare(right, left) < 0) {
                heap2[index] = right;
                heap2[rightIndex] = node;
                index = rightIndex;
              } else {
                heap2[index] = left;
                heap2[leftIndex] = node;
                index = leftIndex;
              }
            } else if (rightIndex < length && compare(right, node) < 0) {
              heap2[index] = right;
              heap2[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a2, b2) {
          var diff = a2.sortIndex - b2.sortIndex;
          return diff !== 0 ? diff : a2.id - b2.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports2.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports2.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports2.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports2.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports2.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports2.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports2.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports2.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports2.unstable_IdlePriority = IdlePriority;
        exports2.unstable_ImmediatePriority = ImmediatePriority;
        exports2.unstable_LowPriority = LowPriority;
        exports2.unstable_NormalPriority = NormalPriority;
        exports2.unstable_Profiling = unstable_Profiling;
        exports2.unstable_UserBlockingPriority = UserBlockingPriority;
        exports2.unstable_cancelCallback = unstable_cancelCallback;
        exports2.unstable_continueExecution = unstable_continueExecution;
        exports2.unstable_forceFrameRate = forceFrameRate;
        exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports2.unstable_next = unstable_next;
        exports2.unstable_pauseExecution = unstable_pauseExecution;
        exports2.unstable_requestPaint = unstable_requestPaint;
        exports2.unstable_runWithPriority = unstable_runWithPriority;
        exports2.unstable_scheduleCallback = unstable_scheduleCallback;
        exports2.unstable_shouldYield = shouldYieldToHost;
        exports2.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS((exports2, module2) => {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_scheduler_development();
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS((exports2) => {
    /**
     * @license React
     * react-dom.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React3 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = false;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i2 = 0; i2 < dependencies.length; i2++) {
            allNativeEvents.add(dependencies[i2]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e2) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name2.length > 2 && (name2[0] === "o" || name2[0] === "O") && (name2[1] === "n" || name2[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name2.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name2) {
          return properties.hasOwnProperty(name2) ? properties[name2] : null;
        }
        function PropertyInfoRecord(name2, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name2;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, RESERVED, false, name2, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name2 = _ref[0], attributeName = _ref[1];
          properties[name2] = new PropertyInfoRecord(name2, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, BOOLEANISH_STRING, false, name2.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, BOOLEANISH_STRING, false, name2, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, BOOLEAN, false, name2.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, BOOLEAN, true, name2, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, OVERLOADED_BOOLEAN, false, name2, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, POSITIVE_NUMERIC, false, name2, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name2) {
          properties[name2] = new PropertyInfoRecord(name2, NUMERIC, false, name2.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name2 = attributeName.replace(CAMELIZE, capitalize);
          properties[name2] = new PropertyInfoRecord(name2, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name2 = attributeName.replace(CAMELIZE, capitalize);
          properties[name2] = new PropertyInfoRecord(name2, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name2 = attributeName.replace(CAMELIZE, capitalize);
          properties[name2] = new PropertyInfoRecord(name2, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name2, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name2);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name2, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name2)) {
              return;
            }
            if (!node.hasAttribute(name2)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name2);
            {
              checkAttributeStringCoercion(expected, name2);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name2, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name2);
          if (shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name2)) {
              var _attributeName = name2;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name2);
                }
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name2, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match = x2.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name2;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x2) {
                  control = x2;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x2) {
                  control = x2;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x2) {
                control = x2;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name2 = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x2) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x2) {
            return "\nError generating stack: " + x2.message + "\n" + x2.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x2) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString2(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e2) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || node.value != value) {
                node.value = toString2(value);
              }
            } else if (node.value !== toString2(value)) {
              node.value = toString2(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString2(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name2 = node.name;
          if (name2 !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name2 !== "") {
            node.name = name2;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name2 = props.name;
          if (props.type === "radio" && name2 != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name2, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name2) + '][type="radio"]');
            for (var i2 = 0; i2 < group.length; i2++) {
              var otherNode = group[i2];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) {
              node.defaultValue = toString2(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString2(value)) {
              node.defaultValue = toString2(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React3.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString2(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a2) {
          return isArrayImpl(a2);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i2 = 0; i2 < valuePropNames.length; i2++) {
              var propName = valuePropNames[i2];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i2 = 0; i2 < selectedValues.length; i2++) {
              selectedValue["$" + selectedValues[i2]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString2(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString2(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString2(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString2(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name2, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name2) && isUnitlessNumber[name2])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name2);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name2) {
          return name2.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_2, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name2) {
            if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
              return;
            }
            warnedStyleNames[name2] = true;
            error("Unsupported style property %s. Did you mean %s?", name2, camelize(name2.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name2) {
            if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
              return;
            }
            warnedStyleNames[name2] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name2, name2.charAt(0).toUpperCase() + name2.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name2, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name2, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name2, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name2);
          };
          var warnStyleValueIsInfinity = function(name2, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name2);
          };
          warnValidStyle = function(name2, value) {
            if (name2.indexOf("-") > -1) {
              warnHyphenatedStyleName(name2);
            } else if (badVendoredStyleNamePattern.test(name2)) {
              warnBadVendoredStyleName(name2);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name2, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name2, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name2, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i2 = 0; i2 < longhands.length; i2++) {
              expanded[longhands[i2]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name2) {
          {
            if (hasOwnProperty.call(warnedProperties, name2) && warnedProperties[name2]) {
              return true;
            }
            if (rARIACamel.test(name2)) {
              var ariaName = "aria-" + name2.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name2);
                warnedProperties[name2] = true;
                return true;
              }
              if (name2 !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name2, correctName);
                warnedProperties[name2] = true;
                return true;
              }
            }
            if (rARIA.test(name2)) {
              var lowerCasedName = name2.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name2] = true;
                return false;
              }
              if (name2 !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name2, standardName);
                warnedProperties[name2] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name2, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name2) && warnedProperties$1[name2]) {
              return true;
            }
            var lowerCasedName = name2.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name2] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name2)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name2, registrationName);
                warnedProperties$1[name2] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name2)) {
                error("Unknown event handler property `%s`. It will be ignored.", name2);
                warnedProperties$1[name2] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name2)) {
              if (INVALID_EVENT_NAME_REGEX.test(name2)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name2);
              }
              warnedProperties$1[name2] = true;
              return true;
            }
            if (rARIA$1.test(name2) || rARIACamel$1.test(name2)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name2] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name2] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name2] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name2);
              warnedProperties$1[name2] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name2);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name2) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name2, standardName);
                warnedProperties$1[name2] = true;
                return true;
              }
            } else if (!isReserved && name2 !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name2, lowerCasedName);
              warnedProperties$1[name2] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name2, name2, value, name2);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name2, name2, value, name2, name2, name2);
              }
              warnedProperties$1[name2] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
              warnedProperties$1[name2] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name2, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name2, value);
              warnedProperties$1[name2] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i2 = 0; i2 < queuedTargets.length; i2++) {
              restoreStateOfTarget(queuedTargets[i2]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a2, b2) {
          if (isInsideEventHandler) {
            return fn(a2, b2);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a2, b2);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name2, type, props) {
          switch (name2) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e2) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name2, func, context, a2, b2, c2, d2, e2, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name2, func, context, a2, b2, c2, d2, e2, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name2 ? name2 : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name2, func, context, a2, b2, c2, d2, e2, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name2, func, context, a2, b2, c2, d2, e2, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var ChildDeletion = 16;
        var ContentReset = 32;
        var Callback = 64;
        var DidCapture = 128;
        var ForceClientRender = 256;
        var Ref = 512;
        var Snapshot = 1024;
        var Passive = 2048;
        var Hydrating = 4096;
        var Visibility = 8192;
        var StoreConsistency = 16384;
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = 32767;
        var Incomplete = 32768;
        var ShouldCapture = 65536;
        var ForceUpdateForLegacySuspense = 131072;
        var Forked = 1048576;
        var RefStatic = 2097152;
        var LayoutStatic = 4194304;
        var PassiveStatic = 8388608;
        var MountLayoutDev = 16777216;
        var MountPassiveDev = 33554432;
        var BeforeMutationMask = Update | Snapshot | 0;
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a2 = fiber;
          var b2 = alternate;
          while (true) {
            var parentA = a2.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a2 = b2 = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a2) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b2) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.return !== b2.return) {
              a2 = parentA;
              b2 = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a2) {
                  didFindChild = true;
                  a2 = parentA;
                  b2 = parentB;
                  break;
                }
                if (_child === b2) {
                  didFindChild = true;
                  b2 = parentA;
                  a2 = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentB;
                    b2 = parentA;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentB;
                    a2 = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a2.alternate !== b2) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a2.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a2.stateNode.current === a2) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root3, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root3, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root3, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root3.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root3) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root3);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = new Map();
            var lane = 1;
            for (var index2 = 0; index2 < TotalLanes; index2++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = 0;
        var ConcurrentMode = 1;
        var ProfileMode = 2;
        var StrictLegacyMode = 8;
        var StrictEffectsMode = 16;
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log2 = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x2) {
          var asUint = x2 >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log2(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var InputContinuousHydrationLane = 2;
        var InputContinuousLane = 4;
        var DefaultHydrationLane = 8;
        var DefaultLane = 16;
        var TransitionHydrationLane = 32;
        var TransitionLanes = 4194240;
        var TransitionLane1 = 64;
        var TransitionLane2 = 128;
        var TransitionLane3 = 256;
        var TransitionLane4 = 512;
        var TransitionLane5 = 1024;
        var TransitionLane6 = 2048;
        var TransitionLane7 = 4096;
        var TransitionLane8 = 8192;
        var TransitionLane9 = 16384;
        var TransitionLane10 = 32768;
        var TransitionLane11 = 65536;
        var TransitionLane12 = 131072;
        var TransitionLane13 = 262144;
        var TransitionLane14 = 524288;
        var TransitionLane15 = 1048576;
        var TransitionLane16 = 2097152;
        var RetryLanes = 130023424;
        var RetryLane1 = 4194304;
        var RetryLane2 = 8388608;
        var RetryLane3 = 16777216;
        var RetryLane4 = 33554432;
        var RetryLane5 = 67108864;
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = 134217728;
        var NonIdleLanes = 268435455;
        var IdleHydrationLane = 268435456;
        var IdleLane = 536870912;
        var OffscreenLane = 1073741824;
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root3, wipLanes) {
          var pendingLanes = root3.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root3.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root3.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root3, lanes) {
          var eventTimes = root3.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root3, currentTime) {
          var pendingLanes = root3.pendingLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root3.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root3) {
          return getHighestPriorityLanes(root3.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root3) {
          var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root3, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root3, lanes) {
          return (lanes & root3.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a2, b2) {
          return (a2 & b2) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a2, b2) {
          return a2 | b2;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a2, b2) {
          return a2 & b2;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a2, b2) {
          return a2 !== NoLane && a2 < b2 ? a2 : b2;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i2 = 0; i2 < TotalLanes; i2++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root3, updateLane, eventTime) {
          root3.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
          }
          var eventTimes = root3.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root3, suspendedLanes) {
          root3.suspendedLanes |= suspendedLanes;
          root3.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root3, pingedLanes, eventTime) {
          root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root3, remainingLanes) {
          var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
          root3.pendingLanes = remainingLanes;
          root3.suspendedLanes = NoLanes;
          root3.pingedLanes = NoLanes;
          root3.expiredLanes &= remainingLanes;
          root3.mutableReadLanes &= remainingLanes;
          root3.entangledLanes &= remainingLanes;
          var entanglements = root3.entanglements;
          var eventTimes = root3.eventTimes;
          var expirationTimes = root3.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root3, entangledLanes) {
          var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
          var entanglements = root3.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
              entanglements[index2] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root3, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root3, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root3, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
          var memoizedUpdaters = root3.memoizedUpdaters;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root3, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a2, b2) {
          return a2 !== 0 && a2 < b2 ? a2 : b2;
        }
        function lowerEventPriority(a2, b2) {
          return a2 === 0 || a2 > b2 ? a2 : b2;
        }
        function isHigherEventPriority(a2, b2) {
          return a2 !== 0 && a2 < b2;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root3) {
          var currentState = root3.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = new Map();
        var queuedPointerCaptures = new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (isRootDehydrated(root3)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i2 = 0;
          for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
          if (i2 === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
              var queuedEvent = queuedDiscreteEvents[i2];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (isRootDehydrated(root3)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root2 = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root2 = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root2 = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root2) {
            return root2.value;
          }
          return root2.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        /**
         * Checks if an event is supported in the current execution environment.
         *
         * NOTE: This will not work correctly for non-generic events such as `change`,
         * `reset`, `load`, `error`, and `select`.
         *
         * Borrows from Modernizr.
         *
         * @param {string} eventNameSuffix Event name, e.g. "click".
         * @return {boolean} True if the event is supported.
         * @internal
         * @license Modernizr 3.0.0pre (Custom Build) | MIT
         */
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is(x2, y2) {
          return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i2 = 0; i2 < keysA.length; i2++) {
            var currentKey = keysA[i2];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root3, offset) {
          var node = getLeafNode(root3);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e2) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i2 = 0; i2 < ancestors.length; i2++) {
              var info = ancestors[i2];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
            var eventName = simpleEventPluginEvents[i2];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
              var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
            var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container2 = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container2, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container2 !== null) {
                      var parentNode = getClosestInstanceFromNode(container2);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container2 = container2.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name2) {
              names.push(name2);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
            var propKey = updatePayload[i2];
            var propValue = updatePayload[i2 + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script></script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name2 = attributes[_i].name.toLowerCase();
              switch (name2) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root3 = rootContainerInstance.documentElement;
              namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container2 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container2.namespaceURI || null;
              type = container2.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container2, child) {
          var parentNode;
          if (container2.nodeType === COMMENT_NODE) {
            parentNode = container2.parentNode;
            parentNode.insertBefore(child, container2);
          } else {
            parentNode = container2;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container2._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container2, child, beforeChild) {
          if (container2.nodeType === COMMENT_NODE) {
            container2.parentNode.insertBefore(child, beforeChild);
          } else {
            container2.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container2, child) {
          if (container2.nodeType === COMMENT_NODE) {
            container2.parentNode.removeChild(child);
          } else {
            container2.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container2, suspenseInstance) {
          if (container2.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container2.parentNode, suspenseInstance);
          } else if (container2.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container2, suspenseInstance);
          }
          retryIfBlockedOn(container2);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container2) {
          if (container2.nodeType === ELEMENT_NODE) {
            container2.textContent = "";
          } else if (container2.nodeType === DOCUMENT_NODE) {
            if (container2.documentElement) {
              container2.removeChild(container2.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container2) {
          retryIfBlockedOn(container2);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name2 = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name2);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name2 = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name2);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i2 = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i2 < queue.length; i2++) {
                var callback = queue[i2];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i2 + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index2) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index2 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = new Map();
          var didWarnAboutLegacyContext = new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = new Map();
          };
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null)
                      ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context)
            ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
              var queue = concurrentQueues[i2];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root3 = node.stateNode;
            return root3;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root3, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root3, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i2 = 0; i2 < effects.length; i2++) {
              var effect = effects[i2];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var emptyRefsObject = new React3.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = new Set();
          didWarnAboutUninitializedState = new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
          didWarnAboutDirectlyAssigningPropsToState = new Set();
          didWarnAboutUndefinedDerivedState = new Set();
          didWarnAboutContextTypeAndContextTypes = new Set();
          didWarnAboutInvalidateContextType = new Set();
          var didWarnOnInvalidCallback = new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name2 = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name2);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name2);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name2);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name2);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name2);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name2);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name2);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name2);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name2);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name2);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name2);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name2);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name2);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name2, name2);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name2, name2);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name2);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name2);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name2);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (refs === emptyRefsObject) {
                  refs = resolvedInst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i2 = 0; i2 < newChildren.length; i2++) {
                var child = newChildren[i2];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c2) {
          if (c2 === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c2;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Insertion = 2;
        var Layout = 4;
        var Passive$1 = 8;
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
            var mutableSource = workInProgressSources[i2];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root3, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root3.mutableSourceEagerHydrationData == null) {
            root3.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root3.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                  var oldHookName = hookTypesDev[i2];
                  var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i2 + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
            if (objectIs(nextDeps[i2], prevDeps[i2])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root3 = getWorkInProgressRoot();
            if (root3 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root3, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root3 = getWorkInProgressRoot();
            if (root3 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root3, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
          }
        }
        function updateEffect(create, deps) {
          return updateEffectImpl(Passive, Passive$1, create, deps);
        }
        function mountInsertionEffect(create, deps) {
          return mountEffectImpl(Update, Insertion, create, deps);
        }
        function updateInsertionEffect(create, deps) {
          return updateEffectImpl(Update, Insertion, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start;
          return [isPending, start];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root3 = getWorkInProgressRoot();
          var identifierPrefix = root3.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitionUpdate(root3, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitionUpdate(root3, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root3, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root3, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root3 = parentFiber.stateNode;
                  root3.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root3 = parentFiber.stateNode;
                  if (root3 !== null) {
                    root3.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e2) {
            setTimeout(function() {
              throw e2;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root3, wakeable, lanes) {
          var pingCache = root3.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root3.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root3, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root3, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root3, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root3, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x2) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root3 = workInProgress2.stateNode;
          if (root3.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
          } else if (root3.context) {
            pushTopLevelContextObject(workInProgress2, root3.context, false);
          }
          pushHostContainer(workInProgress2, root3.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root3 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes2);
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root3 = getWorkInProgressRoot();
              if (root3 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i2 = 0; i2 < children.length; i2++) {
                  if (!validateSuspenseListNestedChild(children[i2], i2)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root3 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root3 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root3 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root3, firstChild) {
          focusedInstanceHandle = prepareForCommit(root3.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root3 = finishedWork.stateNode;
                  clearContainer(root3.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root3 = parentFiber.stateNode;
                          root3.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root3, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent:
              while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (deletedFiber.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root3, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root3;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root3);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i2 = 0; i2 < deletions.length; i2++) {
              var childToDelete = deletions[i2];
              try {
                commitDeletionEffects(root3, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root3);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root3.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (finishedWork.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root3, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root3, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root3, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root3;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root3, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(child, root3, committedLanes);
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i2 = 0; i2 < deletions.length; i2++) {
                  var fiberToDelete = deletions[i2];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = 0;
        var BatchedContext = 1;
        var RenderContext = 2;
        var CommitContext = 4;
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root3, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root3, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root3 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root3, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
          var current2 = root3.current;
          current2.lanes = lane;
          markRootUpdated(root3, lane, eventTime);
          ensureRootIsScheduled(root3, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (executionContext & RenderContext) !== NoContext;
        }
        function ensureRootIsScheduled(root3, currentTime) {
          var existingCallbackNode = root3.callbackNode;
          markStarvedLanesAsExpired(root3, currentTime);
          var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root3.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root3.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
          }
          root3.callbackPriority = newCallbackPriority;
          root3.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root3, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root3.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root3.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root3, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root3, lanes);
              var finishedWork = root3.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root3, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root3, NoLanes);
                  markRootSuspended$1(root3, lanes);
                  ensureRootIsScheduled(root3, now());
                  throw _fatalError;
                }
              }
              root3.finishedWork = finishedWork;
              root3.finishedLanes = lanes;
              finishConcurrentRender(root3, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root3, now());
          if (root3.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root3);
          }
          return null;
        }
        function recoverFromConcurrentError(root3, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root3)) {
            var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root3.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root3, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root3, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root3, lanes);
              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root3, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root3.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root3, suspendedLanes);
                    break;
                  }
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root3, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i2 = 0; i2 < checks.length; i2++) {
                    var check = checks[i2];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root3, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root3, suspendedLanes);
        }
        function performSyncWorkOnRoot(root3) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root3, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root3, now());
            return null;
          }
          var exitStatus = renderRootSync(root3, lanes);
          if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root3.current.alternate;
          root3.finishedWork = finishedWork;
          root3.finishedLanes = lanes;
          commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root3, now());
          return null;
        }
        function flushRoot(root3, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root3, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root3, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a2, b2, c2, d2) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a2, b2, c2, d2);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root3, lanes) {
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          var timeoutHandle = root3.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root3.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root3;
          var rootWorkInProgress = createWorkInProgress(root3.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError2(root3, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root3, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root3, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError2(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root3, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError2(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root3, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root3.finishedWork;
          var lanes = root3.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          if (finishedWork === root3.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root3.callbackNode = null;
          root3.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root3, remainingLanes);
          if (root3 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root3, finishedWork, lanes);
            resetAfterCommit(root3.containerInfo);
            root3.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root3, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root3.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root3.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root3.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root3.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root3, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root3.onRecoverableError;
            for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
              var recoverableError = recoverableErrors[i2];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root3.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root3 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root3;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root3 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root3.current);
          commitPassiveMountEffects(root3, root3.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i2 = 0; i2 < profilerEffects.length; i2++) {
              var _fiber = profilerEffects[i2];
              commitPassiveEffectDurations(root3, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root3.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root3 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root3;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root3);
          {
            var stateNode = root3.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root3 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root3 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root3 !== null) {
                  markRootUpdated(root3, SyncLane, eventTime);
                  ensureRootIsScheduled(root3, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root3, wakeable, pingedLanes) {
          var pingCache = root3.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root3, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
          if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root3, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root3, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root3 !== null) {
            markRootUpdated(root3, retryLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root3, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root3.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root3, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
          {
            if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root3, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root3, element) {
          {
            if (root3.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root3, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root3, families) {
          {
            var hostInstances = new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            new Map([[nonExtensibleObject, null]]);
            new Set([nonExtensibleObject]);
          } catch (e2) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE:
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root3.current = uninitializedFiber;
          uninitializedFiber.stateNode = root3;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root3;
        }
        var ReactVersion = "18.2.0";
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root3.context = getContextForSubtree(null);
          var current2 = root3.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root3, lane, eventTime);
          return root3;
        }
        function updateContainer(element, container2, parentComponent, callback) {
          {
            onScheduleRoot(container2, element);
          }
          var current$1 = container2.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container2.context === null) {
            container2.context = context;
          } else {
            container2.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root3 = enqueueUpdate(current$1, update, lane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
            entangleTransitions(root3, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container2) {
          var containerFiber = container2.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root3 = fiber.stateNode;
              if (isRootDehydrated(root3)) {
                var lanes = getHighestPriorityPendingLanes(root3);
                flushRoot(root3, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync(function() {
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root3 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root3 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root3 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root3 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === path.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                if (oldPath[i2] !== newPath[i2]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools,
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root3 = this._internalRoot;
          if (root3 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container2 = root3.containerInfo;
            if (container2.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root3.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container2) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root3, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root3 = this._internalRoot;
          if (root3 !== null) {
            this._internalRoot = null;
            var container2 = root3.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync(function() {
              updateContainer(null, root3, null, null);
            });
            unmarkContainerAsRoot(container2);
          }
        };
        function createRoot2(container2, options2) {
          if (!isValidContainer(container2)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container2);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root3 = createContainer(container2, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root3.current, container2);
          var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root3);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container2, initialChildren, options2) {
          if (!isValidContainer(container2)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container2);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root3 = createHydrationContainer(initialChildren, null, container2, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root3.current, container2);
          listenToAllSupportedEvents(container2);
          if (mutableSources) {
            for (var i2 = 0; i2 < mutableSources.length; i2++) {
              var mutableSource = mutableSources[i2];
              registerMutableSourceForHydration(root3, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root3);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container2) {
          {
            if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container2)) {
              if (container2._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container2) {
            if (container2._reactRootContainer && container2.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container2._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container2) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container2._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container2);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container2) {
          if (!container2) {
            return null;
          }
          if (container2.nodeType === DOCUMENT_NODE) {
            return container2.documentElement;
          } else {
            return container2.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container2, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root3);
                originalCallback.call(instance);
              };
            }
            var root3 = createHydrationContainer(initialChildren, callback, container2, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container2._reactRootContainer = root3;
            markContainerAsRoot(root3.current, container2);
            var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root3;
          } else {
            var rootSibling;
            while (rootSibling = container2.lastChild) {
              container2.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(container2, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container2._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container2);
            var _rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container2, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container2);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container2._reactRootContainer;
          var root3;
          if (!maybeRoot) {
            root3 = legacyCreateRootFromDOMContainer(container2, children, parentComponent, callback, forceHydrate);
          } else {
            root3 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root3);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root3, parentComponent, callback);
          }
          return getPublicRootInstance(root3);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container2, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container2)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container2, true, callback);
        }
        function render(element, container2, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container2)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container2, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container2) {
          if (!isValidContainerLegacy(container2)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container2._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container2);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync(function() {
              legacyRenderSubtreeIntoContainer(null, null, container2, false, function() {
                container2._reactRootContainer = null;
                unmarkContainerAsRoot(container2);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container2);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container2.nodeType === ELEMENT_NODE && isValidContainerLegacy(container2.parentNode) && !!container2.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
        function createPortal$1(children, container2) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container2)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal(children, container2, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container2, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot2(container2, options2);
        }
        function hydrateRoot$1(container2, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container2, initialChildren, options2);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports2.createPortal = createPortal$1;
        exports2.createRoot = createRoot$1;
        exports2.findDOMNode = findDOMNode;
        exports2.flushSync = flushSync$1;
        exports2.hydrate = hydrate;
        exports2.hydrateRoot = hydrateRoot$1;
        exports2.render = render;
        exports2.unmountComponentAtNode = unmountComponentAtNode;
        exports2.unstable_batchedUpdates = batchedUpdates$1;
        exports2.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports2.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS((exports2, module2) => {
    "use strict";
    if (false) {
      checkDCE();
      module2.exports = null;
    } else {
      module2.exports = require_react_dom_development();
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS((exports2) => {
    "use strict";
    var m = require_react_dom();
    if (false) {
      exports2.createRoot = m.createRoot;
      exports2.hydrateRoot = m.hydrateRoot;
    } else {
      i2 = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      exports2.createRoot = function(c2, o2) {
        i2.usingClientEntryPoint = true;
        try {
          return m.createRoot(c2, o2);
        } finally {
          i2.usingClientEntryPoint = false;
        }
      };
      exports2.hydrateRoot = function(c2, h2, o2) {
        i2.usingClientEntryPoint = true;
        try {
          return m.hydrateRoot(c2, h2, o2);
        } finally {
          i2.usingClientEntryPoint = false;
        }
      };
    }
    var i2;
  });

  // node_modules/onnxruntime-common/dist/ort-common.node.js
  var require_ort_common_node = __commonJS((exports2) => {
    /*!
     * ONNX Runtime Common v1.14.0
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    (() => {
      "use strict";
      var e2 = {d: (t3, r3) => {
        for (var n3 in r3)
          e2.o(r3, n3) && !e2.o(t3, n3) && Object.defineProperty(t3, n3, {enumerable: true, get: r3[n3]});
      }, o: (e3, t3) => Object.prototype.hasOwnProperty.call(e3, t3), r: (e3) => {
        typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(e3, Symbol.toStringTag, {value: "Module"}), Object.defineProperty(e3, "__esModule", {value: true});
      }}, t2 = {};
      e2.r(t2), e2.d(t2, {InferenceSession: () => c2, Tensor: () => g2, env: () => i2, registerBackend: () => o2});
      const r2 = {}, n2 = [], o2 = (e3, t3, o3) => {
        if (!t3 || typeof t3.init != "function" || typeof t3.createSessionHandler != "function")
          throw new TypeError("not a valid backend");
        {
          const i3 = r2[e3];
          if (i3 === void 0)
            r2[e3] = {backend: t3, priority: o3};
          else {
            if (i3.priority > o3)
              return;
            if (i3.priority === o3 && i3.backend !== t3)
              throw new Error(`cannot register backend "${e3}" using priority ${o3}`);
          }
          if (o3 >= 0) {
            const t4 = n2.indexOf(e3);
            t4 !== -1 && n2.splice(t4, 1);
            for (let t5 = 0; t5 < n2.length; t5++)
              if (r2[n2[t5]].priority <= o3)
                return void n2.splice(t5, 0, e3);
            n2.push(e3);
          }
        }
      }, i2 = new class {
        constructor() {
          this.wasm = {}, this.webgl = {}, this.logLevelInternal = "warning";
        }
        set logLevel(e3) {
          if (e3 !== void 0) {
            if (typeof e3 != "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(e3) === -1)
              throw new Error(`Unsupported logging level: ${e3}`);
            this.logLevelInternal = e3;
          }
        }
        get logLevel() {
          return this.logLevelInternal;
        }
      }(), a2 = typeof BigInt64Array != "undefined" && typeof BigInt64Array.from == "function", s2 = typeof BigUint64Array != "undefined" && typeof BigUint64Array.from == "function", d2 = new Map([["float32", Float32Array], ["uint8", Uint8Array], ["int8", Int8Array], ["uint16", Uint16Array], ["int16", Int16Array], ["int32", Int32Array], ["bool", Uint8Array], ["float64", Float64Array], ["uint32", Uint32Array]]), f = new Map([[Float32Array, "float32"], [Uint8Array, "uint8"], [Int8Array, "int8"], [Uint16Array, "uint16"], [Int16Array, "int16"], [Int32Array, "int32"], [Float64Array, "float64"], [Uint32Array, "uint32"]]);
      a2 && (d2.set("int64", BigInt64Array), f.set(BigInt64Array, "int64")), s2 && (d2.set("uint64", BigUint64Array), f.set(BigUint64Array, "uint64"));
      class h2 {
        constructor(e3, t3, r3) {
          let n3, o3, i3;
          if (typeof e3 == "string")
            if (n3 = e3, i3 = r3, e3 === "string") {
              if (!Array.isArray(t3))
                throw new TypeError("A string tensor's data must be a string array.");
              o3 = t3;
            } else {
              const r4 = d2.get(e3);
              if (r4 === void 0)
                throw new TypeError(`Unsupported tensor type: ${e3}.`);
              if (Array.isArray(t3))
                o3 = r4.from(t3);
              else {
                if (!(t3 instanceof r4))
                  throw new TypeError(`A ${n3} tensor's data must be type of ${r4}`);
                o3 = t3;
              }
            }
          else if (i3 = t3, Array.isArray(e3)) {
            if (e3.length === 0)
              throw new TypeError("Tensor type cannot be inferred from an empty array.");
            const t4 = typeof e3[0];
            if (t4 === "string")
              n3 = "string", o3 = e3;
            else {
              if (t4 !== "boolean")
                throw new TypeError(`Invalid element type of data array: ${t4}.`);
              n3 = "bool", o3 = Uint8Array.from(e3);
            }
          } else {
            const t4 = f.get(e3.constructor);
            if (t4 === void 0)
              throw new TypeError(`Unsupported type for tensor data: ${e3.constructor}.`);
            n3 = t4, o3 = e3;
          }
          if (i3 === void 0)
            i3 = [o3.length];
          else if (!Array.isArray(i3))
            throw new TypeError("A tensor's dims must be a number array");
          const a3 = ((e4) => {
            let t4 = 1;
            for (let r4 = 0; r4 < e4.length; r4++) {
              const n4 = e4[r4];
              if (typeof n4 != "number" || !Number.isSafeInteger(n4))
                throw new TypeError(`dims[${r4}] must be an integer, got: ${n4}`);
              if (n4 < 0)
                throw new RangeError(`dims[${r4}] must be a non-negative integer, got: ${n4}`);
              t4 *= n4;
            }
            return t4;
          })(i3);
          if (a3 !== o3.length)
            throw new Error(`Tensor's size(${a3}) does not match data length(${o3.length}).`);
          this.dims = i3, this.type = n3, this.data = o3, this.size = a3;
        }
        static bufferToTensor(e3, t3) {
          if (e3 === void 0)
            throw new Error("Image buffer must be defined");
          if (t3.height === void 0 || t3.width === void 0)
            throw new Error("Image height and width must be defined");
          const {height: r3, width: n3} = t3, o3 = t3.norm;
          let i3, a3;
          i3 = o3 === void 0 || o3.mean === void 0 ? 255 : o3.mean, a3 = o3 === void 0 || o3.bias === void 0 ? 0 : o3.bias;
          const s3 = t3.bitmapFormat !== void 0 ? t3.bitmapFormat : "RGBA", d3 = t3.tensorFormat !== void 0 && t3.tensorFormat !== void 0 ? t3.tensorFormat : "RGB", f2 = r3 * n3, g3 = d3 === "RGBA" ? new Float32Array(4 * f2) : new Float32Array(3 * f2);
          let m2 = 4, c3 = 0, l3 = 1, w3 = 2, u2 = 3, p = 0, y2 = f2, b2 = 2 * f2, v2 = -1;
          s3 === "RGB" && (m2 = 3, c3 = 0, l3 = 1, w3 = 2, u2 = -1), d3 === "RGBA" ? v2 = 3 * f2 : d3 === "RBG" ? (p = 0, b2 = f2, y2 = 2 * f2) : d3 === "BGR" && (b2 = 0, y2 = f2, p = 2 * f2);
          for (let t4 = 0; t4 < f2; t4++, c3 += m2, w3 += m2, l3 += m2, u2 += m2)
            g3[p++] = (e3[c3] + a3) / i3, g3[y2++] = (e3[l3] + a3) / i3, g3[b2++] = (e3[w3] + a3) / i3, v2 !== -1 && u2 !== -1 && (g3[v2++] = (e3[u2] + a3) / i3);
          return new h2("float32", g3, d3 === "RGBA" ? [1, 4, r3, n3] : [1, 3, r3, n3]);
        }
        static async fromImage(e3, t3) {
          const r3 = typeof HTMLImageElement != "undefined" && e3 instanceof HTMLImageElement, n3 = typeof ImageData != "undefined" && e3 instanceof ImageData, o3 = typeof ImageBitmap != "undefined" && e3 instanceof ImageBitmap, i3 = typeof String != "undefined" && (e3 instanceof String || typeof e3 == "string");
          let a3, s3 = {};
          if (r3) {
            const r4 = document.createElement("canvas"), n4 = r4.getContext("2d");
            if (n4 == null)
              throw new Error("Can not access image data");
            {
              let o4 = e3.naturalHeight, i4 = e3.naturalWidth;
              if (t3 !== void 0 && t3.resizedHeight !== void 0 && t3.resizedWidth !== void 0 && (o4 = t3.resizedHeight, i4 = t3.resizedWidth), t3 !== void 0) {
                if (s3 = t3, t3.tensorFormat !== void 0)
                  throw new Error("Image input config format must be RGBA for HTMLImageElement");
                if (s3.tensorFormat = "RGBA", t3.height !== void 0 && t3.height !== o4)
                  throw new Error("Image input config height doesn't match HTMLImageElement height");
                if (s3.height = o4, t3.width !== void 0 && t3.width !== i4)
                  throw new Error("Image input config width doesn't match HTMLImageElement width");
                s3.width = i4;
              } else
                s3.tensorFormat = "RGBA", s3.height = o4, s3.width = i4;
              r4.width = i4, r4.height = o4, n4.drawImage(e3, 0, 0, i4, o4), a3 = n4.getImageData(0, 0, i4, o4).data;
            }
          } else {
            if (!n3) {
              if (o3) {
                if (t3 === void 0)
                  throw new Error("Please provide image config with format for Imagebitmap");
                if (t3.bitmapFormat !== void 0)
                  throw new Error("Image input config format must be defined for ImageBitmap");
                const r4 = document.createElement("canvas").getContext("2d");
                if (r4 != null) {
                  const n4 = e3.height, o4 = e3.width;
                  if (r4.drawImage(e3, 0, 0, o4, n4), a3 = r4.getImageData(0, 0, o4, n4).data, t3 !== void 0) {
                    if (t3.height !== void 0 && t3.height !== n4)
                      throw new Error("Image input config height doesn't match ImageBitmap height");
                    if (s3.height = n4, t3.width !== void 0 && t3.width !== o4)
                      throw new Error("Image input config width doesn't match ImageBitmap width");
                    s3.width = o4;
                  } else
                    s3.height = n4, s3.width = o4;
                  return h2.bufferToTensor(a3, s3);
                }
                throw new Error("Can not access image data");
              }
              if (i3)
                return new Promise((r4, n4) => {
                  const o4 = document.createElement("canvas"), i4 = o4.getContext("2d");
                  if (!e3 || !i4)
                    return n4();
                  const a4 = new Image();
                  a4.crossOrigin = "Anonymous", a4.src = e3, a4.onload = () => {
                    o4.width = a4.width, o4.height = a4.height, i4.drawImage(a4, 0, 0, o4.width, o4.height);
                    const e4 = i4.getImageData(0, 0, o4.width, o4.height);
                    if (t3 !== void 0) {
                      if (t3.height !== void 0 && t3.height !== o4.height)
                        throw new Error("Image input config height doesn't match ImageBitmap height");
                      if (s3.height = o4.height, t3.width !== void 0 && t3.width !== o4.width)
                        throw new Error("Image input config width doesn't match ImageBitmap width");
                      s3.width = o4.width;
                    } else
                      s3.height = o4.height, s3.width = o4.width;
                    r4(h2.bufferToTensor(e4.data, s3));
                  };
                });
              throw new Error("Input data provided is not supported - aborted tensor creation");
            }
            {
              const r4 = "RGBA";
              let n4, o4;
              if (t3 !== void 0 && t3.resizedWidth !== void 0 && t3.resizedHeight !== void 0 ? (n4 = t3.resizedHeight, o4 = t3.resizedWidth) : (n4 = e3.height, o4 = e3.width), t3 !== void 0) {
                if (s3 = t3, t3.bitmapFormat !== void 0 && t3.bitmapFormat !== r4)
                  throw new Error("Image input config format must be RGBA for ImageData");
                s3.bitmapFormat = "RGBA";
              } else
                s3.bitmapFormat = "RGBA";
              if (s3.height = n4, s3.width = o4, t3 !== void 0) {
                const t4 = document.createElement("canvas");
                t4.width = o4, t4.height = n4;
                const r5 = t4.getContext("2d");
                if (r5 == null)
                  throw new Error("Can not access image data");
                r5.putImageData(e3, 0, 0), a3 = r5.getImageData(0, 0, o4, n4).data;
              } else
                a3 = e3.data;
            }
          }
          if (a3 !== void 0)
            return h2.bufferToTensor(a3, s3);
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
        toImageData(e3) {
          var t3, r3;
          const n3 = document.createElement("canvas").getContext("2d");
          let o3;
          if (n3 == null)
            throw new Error("Can not access image data");
          {
            const i3 = this.dims[3], a3 = this.dims[2], s3 = this.dims[1], d3 = e3 !== void 0 && e3.format !== void 0 ? e3.format : "RGB", f2 = e3 !== void 0 && ((t3 = e3.norm) === null || t3 === void 0 ? void 0 : t3.mean) !== void 0 ? e3.norm.mean : 255, h3 = e3 !== void 0 && ((r3 = e3.norm) === null || r3 === void 0 ? void 0 : r3.bias) !== void 0 ? e3.norm.bias : 0, g3 = a3 * i3;
            if (e3 !== void 0) {
              if (e3.height !== void 0 && e3.height !== a3)
                throw new Error("Image output config height doesn't match tensor height");
              if (e3.width !== void 0 && e3.width !== i3)
                throw new Error("Image output config width doesn't match tensor width");
              if (e3.format !== void 0 && s3 === 4 && e3.format !== "RGBA" || s3 === 3 && e3.format !== "RGB" && e3.format !== "BGR")
                throw new Error("Tensor format doesn't match input tensor dims");
            }
            const m2 = 4;
            let c3 = 0, l3 = 1, w3 = 2, u2 = 3, p = 0, y2 = g3, b2 = 2 * g3, v2 = -1;
            d3 === "RGBA" ? (p = 0, y2 = g3, b2 = 2 * g3, v2 = 3 * g3) : d3 === "RGB" ? (p = 0, y2 = g3, b2 = 2 * g3) : d3 === "RBG" && (p = 0, b2 = g3, y2 = 2 * g3), o3 = n3.createImageData(i3, a3);
            for (let e4 = 0; e4 < a3 * i3; c3 += m2, l3 += m2, w3 += m2, u2 += m2, e4++)
              o3.data[c3] = (this.data[p++] - h3) * f2, o3.data[l3] = (this.data[y2++] - h3) * f2, o3.data[w3] = (this.data[b2++] - h3) * f2, o3.data[u2] = v2 === -1 ? 255 : (this.data[v2++] - h3) * f2;
          }
          return o3;
        }
        reshape(e3) {
          return new h2(this.type, this.data, e3);
        }
      }
      const g2 = h2;
      class m {
        constructor(e3) {
          this.handler = e3;
        }
        async run(e3, t3, r3) {
          const n3 = {};
          let o3 = {};
          if (typeof e3 != "object" || e3 === null || e3 instanceof g2 || Array.isArray(e3))
            throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
          let i3 = true;
          if (typeof t3 == "object") {
            if (t3 === null)
              throw new TypeError("Unexpected argument[1]: cannot be null.");
            if (t3 instanceof g2)
              throw new TypeError("'fetches' cannot be a Tensor");
            if (Array.isArray(t3)) {
              if (t3.length === 0)
                throw new TypeError("'fetches' cannot be an empty array.");
              i3 = false;
              for (const e4 of t3) {
                if (typeof e4 != "string")
                  throw new TypeError("'fetches' must be a string array or an object.");
                if (this.outputNames.indexOf(e4) === -1)
                  throw new RangeError(`'fetches' contains invalid output name: ${e4}.`);
                n3[e4] = null;
              }
              if (typeof r3 == "object" && r3 !== null)
                o3 = r3;
              else if (r3 !== void 0)
                throw new TypeError("'options' must be an object.");
            } else {
              let e4 = false;
              const a4 = Object.getOwnPropertyNames(t3);
              for (const r4 of this.outputNames)
                if (a4.indexOf(r4) !== -1) {
                  const o4 = t3[r4];
                  (o4 === null || o4 instanceof g2) && (e4 = true, i3 = false, n3[r4] = o4);
                }
              if (e4) {
                if (typeof r3 == "object" && r3 !== null)
                  o3 = r3;
                else if (r3 !== void 0)
                  throw new TypeError("'options' must be an object.");
              } else
                o3 = t3;
            }
          } else if (t3 !== void 0)
            throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
          for (const t4 of this.inputNames)
            if (e3[t4] === void 0)
              throw new Error(`input '${t4}' is missing in 'feeds'.`);
          if (i3)
            for (const e4 of this.outputNames)
              n3[e4] = null;
          const a3 = await this.handler.run(e3, n3, o3), s3 = {};
          for (const e4 in a3)
            Object.hasOwnProperty.call(a3, e4) && (s3[e4] = new g2(a3[e4].type, a3[e4].data, a3[e4].dims));
          return s3;
        }
        static async create(e3, t3, o3, i3) {
          let a3, s3 = {};
          if (typeof e3 == "string") {
            if (a3 = e3, typeof t3 == "object" && t3 !== null)
              s3 = t3;
            else if (t3 !== void 0)
              throw new TypeError("'options' must be an object.");
          } else if (e3 instanceof Uint8Array) {
            if (a3 = e3, typeof t3 == "object" && t3 !== null)
              s3 = t3;
            else if (t3 !== void 0)
              throw new TypeError("'options' must be an object.");
          } else {
            if (!(e3 instanceof ArrayBuffer || typeof SharedArrayBuffer != "undefined" && e3 instanceof SharedArrayBuffer))
              throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
            {
              const r3 = e3;
              let n3 = 0, d4 = e3.byteLength;
              if (typeof t3 == "object" && t3 !== null)
                s3 = t3;
              else if (typeof t3 == "number") {
                if (n3 = t3, !Number.isSafeInteger(n3))
                  throw new RangeError("'byteOffset' must be an integer.");
                if (n3 < 0 || n3 >= r3.byteLength)
                  throw new RangeError(`'byteOffset' is out of range [0, ${r3.byteLength}).`);
                if (d4 = e3.byteLength - n3, typeof o3 == "number") {
                  if (d4 = o3, !Number.isSafeInteger(d4))
                    throw new RangeError("'byteLength' must be an integer.");
                  if (d4 <= 0 || n3 + d4 > r3.byteLength)
                    throw new RangeError(`'byteLength' is out of range (0, ${r3.byteLength - n3}].`);
                  if (typeof i3 == "object" && i3 !== null)
                    s3 = i3;
                  else if (i3 !== void 0)
                    throw new TypeError("'options' must be an object.");
                } else if (o3 !== void 0)
                  throw new TypeError("'byteLength' must be a number.");
              } else if (t3 !== void 0)
                throw new TypeError("'options' must be an object.");
              a3 = new Uint8Array(r3, n3, d4);
            }
          }
          const d3 = (s3.executionProviders || []).map((e4) => typeof e4 == "string" ? e4 : e4.name), f2 = await (async (e4) => {
            const t4 = e4.length === 0 ? n2 : e4, o4 = [];
            for (const e5 of t4) {
              const t5 = r2[e5];
              if (t5) {
                if (t5.initialized)
                  return t5.backend;
                if (t5.aborted)
                  continue;
                const r3 = !!t5.initPromise;
                try {
                  return r3 || (t5.initPromise = t5.backend.init()), await t5.initPromise, t5.initialized = true, t5.backend;
                } catch (n3) {
                  r3 || o4.push({name: e5, err: n3}), t5.aborted = true;
                } finally {
                  delete t5.initPromise;
                }
              }
            }
            throw new Error(`no available backend found. ERR: ${o4.map((e5) => `[${e5.name}] ${e5.err}`).join(", ")}`);
          })(d3), h3 = await f2.createSessionHandler(a3, s3);
          return new m(h3);
        }
        startProfiling() {
          this.handler.startProfiling();
        }
        endProfiling() {
          this.handler.endProfiling();
        }
        get inputNames() {
          return this.handler.inputNames;
        }
        get outputNames() {
          return this.handler.outputNames;
        }
      }
      const c2 = m;
      var l2 = exports2;
      for (var w2 in t2)
        l2[w2] = t2[w2];
      t2.__esModule && Object.defineProperty(l2, "__esModule", {value: true});
    })();
  });

  // node_modules/onnxruntime-web/dist/ort-web.min.js
  var require_ort_web_min = __commonJS((exports, module) => {
    /*!
    * ONNX Runtime Web v1.14.0
    * Copyright (c) Microsoft Corporation. All rights reserved.
    * Licensed under the MIT License.
    */
    !function(t2, e2) {
      if (typeof exports == "object" && typeof module == "object")
        module.exports = e2(require_ort_common_node());
      else if (typeof define == "function" && define.amd)
        define([], e2);
      else {
        var n2 = typeof exports == "object" ? e2(require_ort_common_node()) : e2(t2.ort);
        for (var r2 in n2)
          (typeof exports == "object" ? exports : t2)[r2] = n2[r2];
      }
    }(self, (__WEBPACK_EXTERNAL_MODULE__1670__) => (() => {
      var __webpack_modules__ = {3474: (t2, e2, n2) => {
        var _scriptDir, r2 = (_scriptDir = (_scriptDir = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0) || "/index.js", function(t3) {
          function e3() {
            return $2.buffer != C && H2($2.buffer), F2;
          }
          function r3() {
            return $2.buffer != C && H2($2.buffer), N2;
          }
          function i2() {
            return $2.buffer != C && H2($2.buffer), L2;
          }
          function o2() {
            return $2.buffer != C && H2($2.buffer), R2;
          }
          function a2() {
            return $2.buffer != C && H2($2.buffer), j2;
          }
          var s2, u2, c2;
          t3 = t3 || {}, s2 || (s2 = t3 !== void 0 ? t3 : {}), s2.ready = new Promise(function(t4, e4) {
            u2 = t4, c2 = e4;
          });
          var l2, p, f, d2, h2, g2, b2 = Object.assign({}, s2), m = "./this.program", y2 = (t4, e4) => {
            throw e4;
          }, _2 = typeof window == "object", v2 = typeof importScripts == "function", w2 = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", x2 = s2.ENVIRONMENT_IS_PTHREAD || false, T2 = "";
          function S2(t4) {
            return s2.locateFile ? s2.locateFile(t4, T2) : T2 + t4;
          }
          if (w2) {
            let e4;
            T2 = v2 ? n2(908).dirname(T2) + "/" : "//", g2 = () => {
              h2 || (d2 = n2(1384), h2 = n2(908));
            }, l2 = function(t4, e5) {
              return g2(), t4 = h2.normalize(t4), d2.readFileSync(t4, e5 ? void 0 : "utf8");
            }, f = (t4) => ((t4 = l2(t4, true)).buffer || (t4 = new Uint8Array(t4)), t4), p = (t4, e5, n3) => {
              g2(), t4 = h2.normalize(t4), d2.readFile(t4, function(t5, r4) {
                t5 ? n3(t5) : e5(r4.buffer);
              });
            }, 1 < process.argv.length && (m = process.argv[1].replace(/\\/g, "/")), process.argv.slice(2), process.on("uncaughtException", function(t4) {
              if (!(t4 instanceof ut))
                throw t4;
            }), process.on("unhandledRejection", function(t4) {
              throw t4;
            }), y2 = (t4, e5) => {
              if (J2())
                throw process.exitCode = t4, e5;
              e5 instanceof ut || P2("exiting due to exception: " + e5), process.exit(t4);
            }, s2.inspect = function() {
              return "[Emscripten Module object]";
            };
            try {
              e4 = n2(9925);
            } catch (t4) {
              throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), t4;
            }
            n2.g.Worker = e4.Worker;
          } else
            (_2 || v2) && (v2 ? T2 = self.location.href : typeof document != "undefined" && document.currentScript && (T2 = document.currentScript.src), _scriptDir && (T2 = _scriptDir), T2 = T2.indexOf("blob:") !== 0 ? T2.substr(0, T2.replace(/[?#].*/, "").lastIndexOf("/") + 1) : "", w2 || (l2 = (t4) => {
              var e4 = new XMLHttpRequest();
              return e4.open("GET", t4, false), e4.send(null), e4.responseText;
            }, v2 && (f = (t4) => {
              var e4 = new XMLHttpRequest();
              return e4.open("GET", t4, false), e4.responseType = "arraybuffer", e4.send(null), new Uint8Array(e4.response);
            }), p = (t4, e4, n3) => {
              var r4 = new XMLHttpRequest();
              r4.open("GET", t4, true), r4.responseType = "arraybuffer", r4.onload = () => {
                r4.status == 200 || r4.status == 0 && r4.response ? e4(r4.response) : n3();
              }, r4.onerror = n3, r4.send(null);
            }));
          w2 && typeof performance == "undefined" && (n2.g.performance = n2(6953).performance);
          var O = console.log.bind(console), A2 = console.warn.bind(console);
          w2 && (g2(), O = (t4) => d2.writeSync(1, t4 + "\n"), A2 = (t4) => d2.writeSync(2, t4 + "\n"));
          var E2, I2 = s2.print || O, P2 = s2.printErr || A2;
          Object.assign(s2, b2), b2 = null, s2.thisProgram && (m = s2.thisProgram), s2.quit && (y2 = s2.quit), s2.wasmBinary && (E2 = s2.wasmBinary);
          var D2 = s2.noExitRuntime || false;
          typeof WebAssembly != "object" && it("no native wasm support detected");
          var $2, k2, C, F2, N2, L2, R2, j2, M2 = false, U2 = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
          function V2(t4, e4, n3) {
            var r4 = (e4 >>>= 0) + n3;
            for (n3 = e4; t4[n3] && !(n3 >= r4); )
              ++n3;
            if (16 < n3 - e4 && t4.buffer && U2)
              return U2.decode(t4.buffer instanceof SharedArrayBuffer ? t4.slice(e4, n3) : t4.subarray(e4, n3));
            for (r4 = ""; e4 < n3; ) {
              var i3 = t4[e4++];
              if (128 & i3) {
                var o3 = 63 & t4[e4++];
                if ((224 & i3) == 192)
                  r4 += String.fromCharCode((31 & i3) << 6 | o3);
                else {
                  var a3 = 63 & t4[e4++];
                  65536 > (i3 = (240 & i3) == 224 ? (15 & i3) << 12 | o3 << 6 | a3 : (7 & i3) << 18 | o3 << 12 | a3 << 6 | 63 & t4[e4++]) ? r4 += String.fromCharCode(i3) : (i3 -= 65536, r4 += String.fromCharCode(55296 | i3 >> 10, 56320 | 1023 & i3));
                }
              } else
                r4 += String.fromCharCode(i3);
            }
            return r4;
          }
          function B2(t4, e4) {
            return (t4 >>>= 0) ? V2(r3(), t4, e4) : "";
          }
          function z2(t4, e4, n3, r4) {
            if (!(0 < r4))
              return 0;
            var i3 = n3 >>>= 0;
            r4 = n3 + r4 - 1;
            for (var o3 = 0; o3 < t4.length; ++o3) {
              var a3 = t4.charCodeAt(o3);
              if (55296 <= a3 && 57343 >= a3 && (a3 = 65536 + ((1023 & a3) << 10) | 1023 & t4.charCodeAt(++o3)), 127 >= a3) {
                if (n3 >= r4)
                  break;
                e4[n3++ >>> 0] = a3;
              } else {
                if (2047 >= a3) {
                  if (n3 + 1 >= r4)
                    break;
                  e4[n3++ >>> 0] = 192 | a3 >> 6;
                } else {
                  if (65535 >= a3) {
                    if (n3 + 2 >= r4)
                      break;
                    e4[n3++ >>> 0] = 224 | a3 >> 12;
                  } else {
                    if (n3 + 3 >= r4)
                      break;
                    e4[n3++ >>> 0] = 240 | a3 >> 18, e4[n3++ >>> 0] = 128 | a3 >> 12 & 63;
                  }
                  e4[n3++ >>> 0] = 128 | a3 >> 6 & 63;
                }
                e4[n3++ >>> 0] = 128 | 63 & a3;
              }
            }
            return e4[n3 >>> 0] = 0, n3 - i3;
          }
          function G2(t4) {
            for (var e4 = 0, n3 = 0; n3 < t4.length; ++n3) {
              var r4 = t4.charCodeAt(n3);
              127 >= r4 ? e4++ : 2047 >= r4 ? e4 += 2 : 55296 <= r4 && 57343 >= r4 ? (e4 += 4, ++n3) : e4 += 3;
            }
            return e4;
          }
          function H2(t4) {
            C = t4, s2.HEAP8 = F2 = new Int8Array(t4), s2.HEAP16 = new Int16Array(t4), s2.HEAP32 = L2 = new Int32Array(t4), s2.HEAPU8 = N2 = new Uint8Array(t4), s2.HEAPU16 = new Uint16Array(t4), s2.HEAPU32 = R2 = new Uint32Array(t4), s2.HEAPF32 = new Float32Array(t4), s2.HEAPF64 = j2 = new Float64Array(t4);
          }
          x2 && (C = s2.buffer);
          var W2 = s2.INITIAL_MEMORY || 16777216;
          if (x2)
            $2 = s2.wasmMemory, C = s2.buffer;
          else if (s2.wasmMemory)
            $2 = s2.wasmMemory;
          else if (!(($2 = new WebAssembly.Memory({initial: W2 / 65536, maximum: 65536, shared: true})).buffer instanceof SharedArrayBuffer))
            throw P2("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), w2 && console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)"), Error("bad memory");
          $2 && (C = $2.buffer), W2 = C.byteLength, H2(C);
          var q2, X2 = [], Y2 = [], K2 = [], Z2 = [];
          function J2() {
            return D2 || false;
          }
          function Q2() {
            var t4 = s2.preRun.shift();
            X2.unshift(t4);
          }
          var tt, et = 0, nt = null, rt = null;
          function it(t4) {
            throw x2 ? postMessage({cmd: "onAbort", arg: t4}) : s2.onAbort && s2.onAbort(t4), P2(t4 = "Aborted(" + t4 + ")"), M2 = true, t4 = new WebAssembly.RuntimeError(t4 + ". Build with -sASSERTIONS for more info."), c2(t4), t4;
          }
          function ot() {
            return tt.startsWith("data:application/octet-stream;base64,");
          }
          function at() {
            var t4 = tt;
            try {
              if (t4 == tt && E2)
                return new Uint8Array(E2);
              if (f)
                return f(t4);
              throw "both async and sync fetching of the wasm failed";
            } catch (t5) {
              it(t5);
            }
          }
          tt = "ort-wasm-threaded.wasm", ot() || (tt = S2(tt));
          var st = {};
          function ut(t4) {
            this.name = "ExitStatus", this.message = "Program terminated with exit(" + t4 + ")", this.status = t4;
          }
          function ct(t4) {
            (t4 = dt.Vb[t4]) || it(), dt.mc(t4);
          }
          function lt(t4) {
            var e4 = dt.Cc();
            if (!e4)
              return 6;
            dt.ac.push(e4), dt.Vb[t4.Ub] = e4, e4.Ub = t4.Ub;
            var n3 = {cmd: "run", start_routine: t4.Ic, arg: t4.zc, pthread_ptr: t4.Ub};
            return e4.$b = () => {
              n3.time = performance.now(), e4.postMessage(n3, t4.Nc);
            }, e4.loaded && (e4.$b(), delete e4.$b), 0;
          }
          function pt(t4) {
            if (x2)
              return qt(1, 1, t4);
            J2() || (dt.oc(), s2.onExit && s2.onExit(t4), M2 = true), y2(t4, new ut(t4));
          }
          function ft(t4, e4) {
            if (!e4 && x2)
              throw bt(t4), "unwind";
            J2() || x2 || (me2(), ht(K2), be2(0), re2[1].length && ie2(1, 10), re2[2].length && ie2(2, 10), dt.oc()), pt(t4);
          }
          var dt = {Yb: [], ac: [], qc: [], Vb: {}, fc: function() {
            x2 && dt.Ec();
          }, Pc: function() {
          }, Ec: function() {
            dt.receiveObjectTransfer = dt.Gc, dt.threadInitTLS = dt.pc, dt.setExitStatus = dt.nc, D2 = false;
          }, nc: function() {
          }, oc: function() {
            for (var t4 of Object.values(dt.Vb))
              dt.mc(t4);
            for (t4 of dt.Yb)
              t4.terminate();
            dt.Yb = [];
          }, mc: function(t4) {
            var e4 = t4.Ub;
            delete dt.Vb[e4], dt.Yb.push(t4), dt.ac.splice(dt.ac.indexOf(t4), 1), t4.Ub = 0, xe2(e4);
          }, Gc: function() {
          }, pc: function() {
            dt.qc.forEach((t4) => t4());
          }, Fc: function(t4, e4) {
            t4.onmessage = (n3) => {
              var r4 = (n3 = n3.data).cmd;
              if (t4.Ub && (dt.Bc = t4.Ub), n3.targetThread && n3.targetThread != de2()) {
                var i3 = dt.Vb[n3.Qc];
                i3 ? i3.postMessage(n3, n3.transferList) : P2('Internal error! Worker sent a message "' + r4 + '" to target pthread ' + n3.targetThread + ", but that thread no longer exists!");
              } else
                r4 === "processProxyingQueue" ? Vt(n3.queue) : r4 === "spawnThread" ? lt(n3) : r4 === "cleanupThread" ? ct(n3.thread) : r4 === "killThread" ? (n3 = n3.thread, r4 = dt.Vb[n3], delete dt.Vb[n3], r4.terminate(), xe2(n3), dt.ac.splice(dt.ac.indexOf(r4), 1), r4.Ub = 0) : r4 === "cancelThread" ? dt.Vb[n3.thread].postMessage({cmd: "cancel"}) : r4 === "loaded" ? (t4.loaded = true, e4 && e4(t4), t4.$b && (t4.$b(), delete t4.$b)) : r4 === "print" ? I2("Thread " + n3.threadId + ": " + n3.text) : r4 === "printErr" ? P2("Thread " + n3.threadId + ": " + n3.text) : r4 === "alert" ? alert("Thread " + n3.threadId + ": " + n3.text) : n3.target === "setimmediate" ? t4.postMessage(n3) : r4 === "onAbort" ? s2.onAbort && s2.onAbort(n3.arg) : r4 && P2("worker sent an unknown command " + r4);
              dt.Bc = void 0;
            }, t4.onerror = (t5) => {
              throw P2("worker sent an error! " + t5.filename + ":" + t5.lineno + ": " + t5.message), t5;
            }, w2 && (t4.on("message", function(e5) {
              t4.onmessage({data: e5});
            }), t4.on("error", function(e5) {
              t4.onerror(e5);
            }), t4.on("detachedExit", function() {
            })), t4.postMessage({cmd: "load", urlOrBlob: s2.mainScriptUrlOrBlob || _scriptDir, wasmMemory: $2, wasmModule: k2});
          }, yc: function() {
            var t4 = S2("ort-wasm-threaded.worker.js");
            dt.Yb.push(new Worker(t4));
          }, Cc: function() {
            return dt.Yb.length == 0 && (dt.yc(), dt.Fc(dt.Yb[0])), dt.Yb.pop();
          }};
          function ht(t4) {
            for (; 0 < t4.length; )
              t4.shift()(s2);
          }
          function gt(t4) {
            var e4 = Ae2();
            return t4 = t4(), Ee2(e4), t4;
          }
          function bt(t4) {
            if (x2)
              return qt(2, 0, t4);
            try {
              ft(t4);
            } catch (t5) {
              t5 instanceof ut || t5 == "unwind" || y2(1, t5);
            }
          }
          s2.PThread = dt, s2.establishStackSpace = function() {
            var t4 = de2(), e4 = i2()[t4 + 44 >> 2 >>> 0];
            t4 = i2()[t4 + 48 >> 2 >>> 0], Oe2(e4, e4 - t4), Ee2(e4);
          };
          var mt = [];
          function yt(t4) {
            var e4 = mt[t4];
            return e4 || (t4 >= mt.length && (mt.length = t4 + 1), mt[t4] = e4 = q2.get(t4)), e4;
          }
          s2.invokeEntryPoint = function(t4, e4) {
            t4 = yt(t4)(e4), J2() ? dt.nc(t4) : Te2(t4);
          };
          var _t, vt, wt = [], xt = 0, Tt = 0;
          function St(t4) {
            this.Zb = t4, this.Sb = t4 - 24, this.xc = function(t5) {
              o2()[this.Sb + 4 >> 2 >>> 0] = t5;
            }, this.bc = function() {
              return o2()[this.Sb + 4 >> 2 >>> 0];
            }, this.wc = function(t5) {
              o2()[this.Sb + 8 >> 2 >>> 0] = t5;
            }, this.Dc = function() {
              return o2()[this.Sb + 8 >> 2 >>> 0];
            }, this.rc = function() {
              i2()[this.Sb >> 2 >>> 0] = 0;
            }, this.hc = function(t5) {
              t5 = t5 ? 1 : 0, e3()[this.Sb + 12 >> 0 >>> 0] = t5;
            }, this.uc = function() {
              return e3()[this.Sb + 12 >> 0 >>> 0] != 0;
            }, this.ic = function(t5) {
              t5 = t5 ? 1 : 0, e3()[this.Sb + 13 >> 0 >>> 0] = t5;
            }, this.kc = function() {
              return e3()[this.Sb + 13 >> 0 >>> 0] != 0;
            }, this.fc = function(t5, e4) {
              this.cc(0), this.xc(t5), this.wc(e4), this.rc(), this.hc(false), this.ic(false);
            }, this.sc = function() {
              Atomics.add(i2(), this.Sb >> 2, 1);
            }, this.Hc = function() {
              return Atomics.sub(i2(), this.Sb >> 2, 1) === 1;
            }, this.cc = function(t5) {
              o2()[this.Sb + 16 >> 2 >>> 0] = t5;
            }, this.tc = function() {
              return o2()[this.Sb + 16 >> 2 >>> 0];
            }, this.vc = function() {
              if (De2(this.bc()))
                return o2()[this.Zb >> 2 >>> 0];
              var t5 = this.tc();
              return t5 !== 0 ? t5 : this.Zb;
            };
          }
          function Ot(t4) {
            return ge2(new St(t4).Sb);
          }
          function At(t4, e4, n3, r4) {
            return x2 ? qt(3, 1, t4, e4, n3, r4) : Et(t4, e4, n3, r4);
          }
          function Et(t4, e4, n3, r4) {
            if (typeof SharedArrayBuffer == "undefined")
              return P2("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
            var i3 = [];
            return x2 && i3.length === 0 ? At(t4, e4, n3, r4) : (t4 = {Ic: n3, Ub: t4, zc: r4, Nc: i3}, x2 ? (t4.Oc = "spawnThread", postMessage(t4, i3), 0) : lt(t4));
          }
          function It(t4, e4, n3) {
            return x2 ? qt(4, 1, t4, e4, n3) : 0;
          }
          function Pt(t4, e4) {
            if (x2)
              return qt(5, 1, t4, e4);
          }
          function Dt(t4, e4) {
            if (x2)
              return qt(6, 1, t4, e4);
          }
          function $t(t4, e4, n3) {
            if (x2)
              return qt(7, 1, t4, e4, n3);
          }
          function kt(t4, e4, n3) {
            return x2 ? qt(8, 1, t4, e4, n3) : 0;
          }
          function Ct(t4, e4) {
            if (x2)
              return qt(9, 1, t4, e4);
          }
          function Ft(t4, e4, n3) {
            if (x2)
              return qt(10, 1, t4, e4, n3);
          }
          function Nt(t4, e4, n3, r4) {
            if (x2)
              return qt(11, 1, t4, e4, n3, r4);
          }
          function Lt(t4, e4, n3, r4) {
            if (x2)
              return qt(12, 1, t4, e4, n3, r4);
          }
          function Rt(t4, e4, n3, r4) {
            if (x2)
              return qt(13, 1, t4, e4, n3, r4);
          }
          function jt(t4) {
            if (x2)
              return qt(14, 1, t4);
          }
          function Mt(t4, e4) {
            if (x2)
              return qt(15, 1, t4, e4);
          }
          function Ut(t4, e4, n3) {
            if (x2)
              return qt(16, 1, t4, e4, n3);
          }
          function Vt(t4) {
            Atomics.store(i2(), t4 >> 2, 1), de2() && we2(t4), Atomics.compareExchange(i2(), t4 >> 2, 1, 0);
          }
          function Bt(t4) {
            return o2()[t4 >>> 2] + 4294967296 * i2()[t4 + 4 >>> 2];
          }
          function zt(t4, e4, n3, r4, i3, o3) {
            return x2 ? qt(17, 1, t4, e4, n3, r4, i3, o3) : -52;
          }
          function Gt(t4, e4, n3, r4, i3, o3) {
            if (x2)
              return qt(18, 1, t4, e4, n3, r4, i3, o3);
          }
          function Ht(t4) {
            var n3 = G2(t4) + 1, r4 = he2(n3);
            return r4 && z2(t4, e3(), r4, n3), r4;
          }
          function Wt(t4, e4, n3) {
            function r4(t5) {
              return (t5 = t5.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? t5[1] : "GMT";
            }
            if (x2)
              return qt(19, 1, t4, e4, n3);
            var a3 = new Date().getFullYear(), s3 = new Date(a3, 0, 1), u3 = new Date(a3, 6, 1);
            a3 = s3.getTimezoneOffset();
            var c3 = u3.getTimezoneOffset(), l3 = Math.max(a3, c3);
            i2()[t4 >> 2 >>> 0] = 60 * l3, i2()[e4 >> 2 >>> 0] = Number(a3 != c3), t4 = r4(s3), e4 = r4(u3), t4 = Ht(t4), e4 = Ht(e4), c3 < a3 ? (o2()[n3 >> 2 >>> 0] = t4, o2()[n3 + 4 >> 2 >>> 0] = e4) : (o2()[n3 >> 2 >>> 0] = e4, o2()[n3 + 4 >> 2 >>> 0] = t4);
          }
          function qt(t4, e4) {
            var n3 = arguments.length - 2, r4 = arguments;
            return gt(() => {
              for (var i3 = Ie2(8 * n3), o3 = i3 >> 3, s3 = 0; s3 < n3; s3++) {
                var u3 = r4[2 + s3];
                a2()[o3 + s3 >>> 0] = u3;
              }
              return ve2(t4, n3, i3, e4);
            });
          }
          s2.executeNotifiedProxyingQueue = Vt, vt = w2 ? () => {
            var t4 = process.hrtime();
            return 1e3 * t4[0] + t4[1] / 1e6;
          } : x2 ? () => performance.now() - s2.__performance_now_clock_drift : () => performance.now();
          var Xt, Yt = [], Kt = {};
          function Zt() {
            if (!Xt) {
              var t4, e4 = {USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: m || "./this.program"};
              for (t4 in Kt)
                Kt[t4] === void 0 ? delete e4[t4] : e4[t4] = Kt[t4];
              var n3 = [];
              for (t4 in e4)
                n3.push(t4 + "=" + e4[t4]);
              Xt = n3;
            }
            return Xt;
          }
          function Jt(t4, n3) {
            if (x2)
              return qt(20, 1, t4, n3);
            var r4 = 0;
            return Zt().forEach(function(i3, a3) {
              var s3 = n3 + r4;
              for (a3 = o2()[t4 + 4 * a3 >> 2 >>> 0] = s3, s3 = 0; s3 < i3.length; ++s3)
                e3()[a3++ >> 0 >>> 0] = i3.charCodeAt(s3);
              e3()[a3 >> 0 >>> 0] = 0, r4 += i3.length + 1;
            }), 0;
          }
          function Qt(t4, e4) {
            if (x2)
              return qt(21, 1, t4, e4);
            var n3 = Zt();
            o2()[t4 >> 2 >>> 0] = n3.length;
            var r4 = 0;
            return n3.forEach(function(t5) {
              r4 += t5.length + 1;
            }), o2()[e4 >> 2 >>> 0] = r4, 0;
          }
          function te2(t4) {
            return x2 ? qt(22, 1, t4) : 52;
          }
          function ee2(t4, e4, n3, r4) {
            return x2 ? qt(23, 1, t4, e4, n3, r4) : 52;
          }
          function ne2(t4, e4, n3, r4, i3) {
            return x2 ? qt(24, 1, t4, e4, n3, r4, i3) : 70;
          }
          var re2 = [null, [], []];
          function ie2(t4, e4) {
            var n3 = re2[t4];
            e4 === 0 || e4 === 10 ? ((t4 === 1 ? I2 : P2)(V2(n3, 0)), n3.length = 0) : n3.push(e4);
          }
          function oe2(t4, e4, n3, i3) {
            if (x2)
              return qt(25, 1, t4, e4, n3, i3);
            for (var a3 = 0, s3 = 0; s3 < n3; s3++) {
              var u3 = o2()[e4 >> 2 >>> 0], c3 = o2()[e4 + 4 >> 2 >>> 0];
              e4 += 8;
              for (var l3 = 0; l3 < c3; l3++)
                ie2(t4, r3()[u3 + l3 >>> 0]);
              a3 += c3;
            }
            return o2()[i3 >> 2 >>> 0] = a3, 0;
          }
          var ae2 = 0;
          function se2(t4) {
            return t4 % 4 == 0 && (t4 % 100 != 0 || t4 % 400 == 0);
          }
          var ue2 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], ce2 = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function le2(t4, n3, r4, o3) {
            function a3(t5, e4, n4) {
              for (t5 = typeof t5 == "number" ? t5.toString() : t5 || ""; t5.length < e4; )
                t5 = n4[0] + t5;
              return t5;
            }
            function s3(t5, e4) {
              return a3(t5, e4, "0");
            }
            function u3(t5, e4) {
              function n4(t6) {
                return 0 > t6 ? -1 : 0 < t6 ? 1 : 0;
              }
              var r5;
              return (r5 = n4(t5.getFullYear() - e4.getFullYear())) === 0 && (r5 = n4(t5.getMonth() - e4.getMonth())) === 0 && (r5 = n4(t5.getDate() - e4.getDate())), r5;
            }
            function c3(t5) {
              switch (t5.getDay()) {
                case 0:
                  return new Date(t5.getFullYear() - 1, 11, 29);
                case 1:
                  return t5;
                case 2:
                  return new Date(t5.getFullYear(), 0, 3);
                case 3:
                  return new Date(t5.getFullYear(), 0, 2);
                case 4:
                  return new Date(t5.getFullYear(), 0, 1);
                case 5:
                  return new Date(t5.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(t5.getFullYear() - 1, 11, 30);
              }
            }
            function l3(t5) {
              var e4 = t5.Wb;
              for (t5 = new Date(new Date(t5.Xb + 1900, 0, 1).getTime()); 0 < e4; ) {
                var n4 = t5.getMonth(), r5 = (se2(t5.getFullYear()) ? ue2 : ce2)[n4];
                if (!(e4 > r5 - t5.getDate())) {
                  t5.setDate(t5.getDate() + e4);
                  break;
                }
                e4 -= r5 - t5.getDate() + 1, t5.setDate(1), 11 > n4 ? t5.setMonth(n4 + 1) : (t5.setMonth(0), t5.setFullYear(t5.getFullYear() + 1));
              }
              return n4 = new Date(t5.getFullYear() + 1, 0, 4), e4 = c3(new Date(t5.getFullYear(), 0, 4)), n4 = c3(n4), 0 >= u3(e4, t5) ? 0 >= u3(n4, t5) ? t5.getFullYear() + 1 : t5.getFullYear() : t5.getFullYear() - 1;
            }
            var p2 = i2()[o3 + 40 >> 2 >>> 0];
            for (var f2 in o3 = {Lc: i2()[o3 >> 2 >>> 0], Kc: i2()[o3 + 4 >> 2 >>> 0], dc: i2()[o3 + 8 >> 2 >>> 0], jc: i2()[o3 + 12 >> 2 >>> 0], ec: i2()[o3 + 16 >> 2 >>> 0], Xb: i2()[o3 + 20 >> 2 >>> 0], Tb: i2()[o3 + 24 >> 2 >>> 0], Wb: i2()[o3 + 28 >> 2 >>> 0], Rc: i2()[o3 + 32 >> 2 >>> 0], Jc: i2()[o3 + 36 >> 2 >>> 0], Mc: p2 ? B2(p2) : ""}, r4 = B2(r4), p2 = {"%c": "%a %b %d %H:%M:%S %Y", "%D": "%m/%d/%y", "%F": "%Y-%m-%d", "%h": "%b", "%r": "%I:%M:%S %p", "%R": "%H:%M", "%T": "%H:%M:%S", "%x": "%m/%d/%y", "%X": "%H:%M:%S", "%Ec": "%c", "%EC": "%C", "%Ex": "%m/%d/%y", "%EX": "%H:%M:%S", "%Ey": "%y", "%EY": "%Y", "%Od": "%d", "%Oe": "%e", "%OH": "%H", "%OI": "%I", "%Om": "%m", "%OM": "%M", "%OS": "%S", "%Ou": "%u", "%OU": "%U", "%OV": "%V", "%Ow": "%w", "%OW": "%W", "%Oy": "%y"})
              r4 = r4.replace(new RegExp(f2, "g"), p2[f2]);
            var d3 = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), h3 = "January February March April May June July August September October November December".split(" ");
            for (f2 in p2 = {"%a": function(t5) {
              return d3[t5.Tb].substring(0, 3);
            }, "%A": function(t5) {
              return d3[t5.Tb];
            }, "%b": function(t5) {
              return h3[t5.ec].substring(0, 3);
            }, "%B": function(t5) {
              return h3[t5.ec];
            }, "%C": function(t5) {
              return s3((t5.Xb + 1900) / 100 | 0, 2);
            }, "%d": function(t5) {
              return s3(t5.jc, 2);
            }, "%e": function(t5) {
              return a3(t5.jc, 2, " ");
            }, "%g": function(t5) {
              return l3(t5).toString().substring(2);
            }, "%G": function(t5) {
              return l3(t5);
            }, "%H": function(t5) {
              return s3(t5.dc, 2);
            }, "%I": function(t5) {
              return (t5 = t5.dc) == 0 ? t5 = 12 : 12 < t5 && (t5 -= 12), s3(t5, 2);
            }, "%j": function(t5) {
              for (var e4 = 0, n4 = 0; n4 <= t5.ec - 1; e4 += (se2(t5.Xb + 1900) ? ue2 : ce2)[n4++])
                ;
              return s3(t5.jc + e4, 3);
            }, "%m": function(t5) {
              return s3(t5.ec + 1, 2);
            }, "%M": function(t5) {
              return s3(t5.Kc, 2);
            }, "%n": function() {
              return "\n";
            }, "%p": function(t5) {
              return 0 <= t5.dc && 12 > t5.dc ? "AM" : "PM";
            }, "%S": function(t5) {
              return s3(t5.Lc, 2);
            }, "%t": function() {
              return "	";
            }, "%u": function(t5) {
              return t5.Tb || 7;
            }, "%U": function(t5) {
              return s3(Math.floor((t5.Wb + 7 - t5.Tb) / 7), 2);
            }, "%V": function(t5) {
              var e4 = Math.floor((t5.Wb + 7 - (t5.Tb + 6) % 7) / 7);
              if (2 >= (t5.Tb + 371 - t5.Wb - 2) % 7 && e4++, e4)
                e4 == 53 && ((n4 = (t5.Tb + 371 - t5.Wb) % 7) == 4 || n4 == 3 && se2(t5.Xb) || (e4 = 1));
              else {
                e4 = 52;
                var n4 = (t5.Tb + 7 - t5.Wb - 1) % 7;
                (n4 == 4 || n4 == 5 && se2(t5.Xb % 400 - 1)) && e4++;
              }
              return s3(e4, 2);
            }, "%w": function(t5) {
              return t5.Tb;
            }, "%W": function(t5) {
              return s3(Math.floor((t5.Wb + 7 - (t5.Tb + 6) % 7) / 7), 2);
            }, "%y": function(t5) {
              return (t5.Xb + 1900).toString().substring(2);
            }, "%Y": function(t5) {
              return t5.Xb + 1900;
            }, "%z": function(t5) {
              var e4 = 0 <= (t5 = t5.Jc);
              return t5 = Math.abs(t5) / 60, (e4 ? "+" : "-") + String("0000" + (t5 / 60 * 100 + t5 % 60)).slice(-4);
            }, "%Z": function(t5) {
              return t5.Mc;
            }, "%%": function() {
              return "%";
            }}, r4 = r4.replace(/%%/g, "\0\0"), p2)
              r4.includes(f2) && (r4 = r4.replace(new RegExp(f2, "g"), p2[f2](o3)));
            return f2 = function(t5) {
              var e4 = Array(G2(t5) + 1);
              return z2(t5, e4, 0, e4.length), e4;
            }(r4 = r4.replace(/\0\0/g, "%")), f2.length > n3 ? 0 : (function(t5, n4) {
              e3().set(t5, n4 >>> 0);
            }(f2, t4), f2.length - 1);
          }
          dt.fc();
          var pe2 = [null, pt, bt, At, It, Pt, Dt, $t, kt, Ct, Ft, Nt, Lt, Rt, jt, Mt, Ut, zt, Gt, Wt, Jt, Qt, te2, ee2, ne2, oe2], fe2 = {b: function(t4) {
            return he2(t4 + 24) + 24;
          }, n: function(t4) {
            return (t4 = new St(t4)).uc() || (t4.hc(true), xt--), t4.ic(false), wt.push(t4), t4.sc(), t4.vc();
          }, ma: function(t4) {
            throw P2("Unexpected exception thrown, this is not properly supported - aborting"), M2 = true, t4;
          }, x: function() {
            Se2(0);
            var t4 = wt.pop();
            if (t4.Hc() && !t4.kc()) {
              var e4 = t4.Dc();
              e4 && yt(e4)(t4.Zb), Ot(t4.Zb);
            }
            Tt = 0;
          }, e: function() {
            var t4 = Tt;
            if (!t4)
              return ae2 = 0;
            var e4 = new St(t4);
            e4.cc(t4);
            var n3 = e4.bc();
            if (!n3)
              return ae2 = 0, t4;
            for (var r4 = Array.prototype.slice.call(arguments), i3 = 0; i3 < r4.length; i3++) {
              var o3 = r4[i3];
              if (o3 === 0 || o3 === n3)
                break;
              if (Pe2(o3, n3, e4.Sb + 16))
                return ae2 = o3, t4;
            }
            return ae2 = n3, t4;
          }, l: function() {
            var t4 = Tt;
            if (!t4)
              return ae2 = 0;
            var e4 = new St(t4);
            e4.cc(t4);
            var n3 = e4.bc();
            if (!n3)
              return ae2 = 0, t4;
            for (var r4 = Array.prototype.slice.call(arguments), i3 = 0; i3 < r4.length; i3++) {
              var o3 = r4[i3];
              if (o3 === 0 || o3 === n3)
                break;
              if (Pe2(o3, n3, e4.Sb + 16))
                return ae2 = o3, t4;
            }
            return ae2 = n3, t4;
          }, h: function() {
            var t4 = Tt;
            if (!t4)
              return ae2 = 0;
            var e4 = new St(t4);
            e4.cc(t4);
            var n3 = e4.bc();
            if (!n3)
              return ae2 = 0, t4;
            for (var r4 = Array.prototype.slice.call(arguments), i3 = 0; i3 < r4.length; i3++) {
              var o3 = r4[i3];
              if (o3 === 0 || o3 === n3)
                break;
              if (Pe2(o3, n3, e4.Sb + 16))
                return ae2 = o3, t4;
            }
            return ae2 = n3, t4;
          }, t: Ot, M: function() {
            var t4 = wt.pop();
            t4 || it("no exception to throw");
            var e4 = t4.Zb;
            throw t4.kc() || (wt.push(t4), t4.ic(true), t4.hc(false), xt++), Tt = e4, e4;
          }, c: function(t4, e4, n3) {
            throw new St(t4).fc(e4, n3), Tt = t4, xt++, t4;
          }, pa: function() {
            return xt;
          }, Fa: function(t4) {
            ye2(t4, !v2, 1, !_2), dt.pc();
          }, T: function(t4) {
            x2 ? postMessage({cmd: "cleanupThread", thread: t4}) : ct(t4);
          }, xa: Et, j: function(t4) {
            throw Tt || (Tt = t4), t4;
          }, H: It, Ma: Pt, ua: Dt, wa: $t, oa: kt, Ka: Ct, Ca: Ft, Ja: Nt, V: Lt, va: Rt, sa: jt, La: Mt, ta: Ut, Ta: function() {
          }, X: function() {
            it("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking");
          }, Ua: function() {
            it("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking");
          }, W: function() {
            return Date.now();
          }, ya: function() {
            return 2097152;
          }, Oa: function() {
            return true;
          }, za: function(t4, e4, n3, r4) {
            if (t4 == e4)
              setTimeout(() => Vt(r4));
            else if (x2)
              postMessage({targetThread: t4, cmd: "processProxyingQueue", queue: r4});
            else {
              if (!(t4 = dt.Vb[t4]))
                return;
              t4.postMessage({cmd: "processProxyingQueue", queue: r4});
            }
            return 1;
          }, Ea: function() {
            return -1;
          }, Pa: function(t4, e4) {
            t4 = new Date(1e3 * Bt(t4)), i2()[e4 >> 2 >>> 0] = t4.getUTCSeconds(), i2()[e4 + 4 >> 2 >>> 0] = t4.getUTCMinutes(), i2()[e4 + 8 >> 2 >>> 0] = t4.getUTCHours(), i2()[e4 + 12 >> 2 >>> 0] = t4.getUTCDate(), i2()[e4 + 16 >> 2 >>> 0] = t4.getUTCMonth(), i2()[e4 + 20 >> 2 >>> 0] = t4.getUTCFullYear() - 1900, i2()[e4 + 24 >> 2 >>> 0] = t4.getUTCDay(), t4 = (t4.getTime() - Date.UTC(t4.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0, i2()[e4 + 28 >> 2 >>> 0] = t4;
          }, Qa: function(t4, e4) {
            t4 = new Date(1e3 * Bt(t4)), i2()[e4 >> 2 >>> 0] = t4.getSeconds(), i2()[e4 + 4 >> 2 >>> 0] = t4.getMinutes(), i2()[e4 + 8 >> 2 >>> 0] = t4.getHours(), i2()[e4 + 12 >> 2 >>> 0] = t4.getDate(), i2()[e4 + 16 >> 2 >>> 0] = t4.getMonth(), i2()[e4 + 20 >> 2 >>> 0] = t4.getFullYear() - 1900, i2()[e4 + 24 >> 2 >>> 0] = t4.getDay();
            var n3 = new Date(t4.getFullYear(), 0, 1), r4 = (t4.getTime() - n3.getTime()) / 864e5 | 0;
            i2()[e4 + 28 >> 2 >>> 0] = r4, i2()[e4 + 36 >> 2 >>> 0] = -60 * t4.getTimezoneOffset(), r4 = new Date(t4.getFullYear(), 6, 1).getTimezoneOffset(), t4 = 0 | (r4 != (n3 = n3.getTimezoneOffset()) && t4.getTimezoneOffset() == Math.min(n3, r4)), i2()[e4 + 32 >> 2 >>> 0] = t4;
          }, Ra: function(t4) {
            var e4 = new Date(i2()[t4 + 20 >> 2 >>> 0] + 1900, i2()[t4 + 16 >> 2 >>> 0], i2()[t4 + 12 >> 2 >>> 0], i2()[t4 + 8 >> 2 >>> 0], i2()[t4 + 4 >> 2 >>> 0], i2()[t4 >> 2 >>> 0], 0), n3 = i2()[t4 + 32 >> 2 >>> 0], r4 = e4.getTimezoneOffset(), o3 = new Date(e4.getFullYear(), 0, 1), a3 = new Date(e4.getFullYear(), 6, 1).getTimezoneOffset(), s3 = o3.getTimezoneOffset(), u3 = Math.min(s3, a3);
            return 0 > n3 ? i2()[t4 + 32 >> 2 >>> 0] = Number(a3 != s3 && u3 == r4) : 0 < n3 != (u3 == r4) && (a3 = Math.max(s3, a3), e4.setTime(e4.getTime() + 6e4 * ((0 < n3 ? u3 : a3) - r4))), i2()[t4 + 24 >> 2 >>> 0] = e4.getDay(), n3 = (e4.getTime() - o3.getTime()) / 864e5 | 0, i2()[t4 + 28 >> 2 >>> 0] = n3, i2()[t4 >> 2 >>> 0] = e4.getSeconds(), i2()[t4 + 4 >> 2 >>> 0] = e4.getMinutes(), i2()[t4 + 8 >> 2 >>> 0] = e4.getHours(), i2()[t4 + 12 >> 2 >>> 0] = e4.getDate(), i2()[t4 + 16 >> 2 >>> 0] = e4.getMonth(), e4.getTime() / 1e3 | 0;
          }, Aa: zt, Ba: Gt, Sa: function t4(e4, n3, r4) {
            t4.Ac || (t4.Ac = true, Wt(e4, n3, r4));
          }, y: function() {
            it("");
          }, U: function() {
            if (!w2 && !v2) {
              var t4 = "Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread";
              _t || (_t = {}), _t[t4] || (_t[t4] = 1, w2 && (t4 = "warning: " + t4), P2(t4));
            }
          }, ra: function() {
            return 4294901760;
          }, B: vt, Ia: function(t4, e4, n3) {
            r3().copyWithin(t4 >>> 0, e4 >>> 0, e4 + n3 >>> 0);
          }, F: function() {
            return w2 ? n2(3993).cpus().length : navigator.hardwareConcurrency;
          }, Da: function(t4, e4, n3) {
            Yt.length = e4, n3 >>= 3;
            for (var r4 = 0; r4 < e4; r4++)
              Yt[r4] = a2()[n3 + r4 >>> 0];
            return (0 > t4 ? st[-t4 - 1] : pe2[t4]).apply(null, Yt);
          }, qa: function(t4) {
            var e4 = r3().length;
            if ((t4 >>>= 0) <= e4 || 4294901760 < t4)
              return false;
            for (var n3 = 1; 4 >= n3; n3 *= 2) {
              var i3 = e4 * (1 + 0.2 / n3);
              i3 = Math.min(i3, t4 + 100663296);
              var o3 = Math;
              i3 = Math.max(t4, i3), o3 = o3.min.call(o3, 4294901760, i3 + (65536 - i3 % 65536) % 65536);
              t: {
                try {
                  $2.grow(o3 - C.byteLength + 65535 >>> 16), H2($2.buffer);
                  var a3 = 1;
                  break t;
                } catch (t5) {
                }
                a3 = void 0;
              }
              if (a3)
                return true;
            }
            return false;
          }, Na: function() {
            throw "unwind";
          }, Ga: Jt, Ha: Qt, J: ft, I: te2, S: ee2, ga: ne2, R: oe2, d: function() {
            return ae2;
          }, na: function t4(r4, i3) {
            t4.lc || (t4.lc = function() {
              if (typeof crypto == "object" && typeof crypto.getRandomValues == "function") {
                var t5 = new Uint8Array(1);
                return () => (crypto.getRandomValues(t5), t5[0]);
              }
              if (w2)
                try {
                  var e4 = n2(Object(function() {
                    var t6 = new Error("Cannot find module 'crypto'");
                    throw t6.code = "MODULE_NOT_FOUND", t6;
                  }()));
                  return () => e4.randomBytes(1)[0];
                } catch (t6) {
                }
              return () => it("randomDevice");
            }());
            for (var o3 = 0; o3 < i3; o3++)
              e3()[r4 + o3 >> 0 >>> 0] = t4.lc();
            return 0;
          }, ia: function(t4, e4, n3) {
            var r4 = Ae2();
            try {
              return yt(t4)(e4, n3);
            } catch (t5) {
              if (Ee2(r4), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, ja: function(t4, e4, n3) {
            var r4 = Ae2();
            try {
              return yt(t4)(e4, n3);
            } catch (t5) {
              if (Ee2(r4), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, K: function(t4) {
            var e4 = Ae2();
            try {
              return yt(t4)();
            } catch (t5) {
              if (Ee2(e4), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, f: function(t4, e4) {
            var n3 = Ae2();
            try {
              return yt(t4)(e4);
            } catch (t5) {
              if (Ee2(n3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, P: function(t4, e4, n3) {
            var r4 = Ae2();
            try {
              return yt(t4)(e4, n3);
            } catch (t5) {
              if (Ee2(r4), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, Q: function(t4, e4, n3) {
            var r4 = Ae2();
            try {
              return yt(t4)(e4, n3);
            } catch (t5) {
              if (Ee2(r4), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, k: function(t4, e4, n3) {
            var r4 = Ae2();
            try {
              return yt(t4)(e4, n3);
            } catch (t5) {
              if (Ee2(r4), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, p: function(t4, e4, n3, r4) {
            var i3 = Ae2();
            try {
              return yt(t4)(e4, n3, r4);
            } catch (t5) {
              if (Ee2(i3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, q: function(t4, e4, n3, r4, i3) {
            var o3 = Ae2();
            try {
              return yt(t4)(e4, n3, r4, i3);
            } catch (t5) {
              if (Ee2(o3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, N: function(t4, e4, n3, r4, i3, o3) {
            var a3 = Ae2();
            try {
              return yt(t4)(e4, n3, r4, i3, o3);
            } catch (t5) {
              if (Ee2(a3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, s: function(t4, e4, n3, r4, i3, o3) {
            var a3 = Ae2();
            try {
              return yt(t4)(e4, n3, r4, i3, o3);
            } catch (t5) {
              if (Ee2(a3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, w: function(t4, e4, n3, r4, i3, o3, a3) {
            var s3 = Ae2();
            try {
              return yt(t4)(e4, n3, r4, i3, o3, a3);
            } catch (t5) {
              if (Ee2(s3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, L: function(t4, e4, n3, r4, i3, o3, a3, s3) {
            var u3 = Ae2();
            try {
              return yt(t4)(e4, n3, r4, i3, o3, a3, s3);
            } catch (t5) {
              if (Ee2(u3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, E: function(t4, e4, n3, r4, i3, o3, a3, s3, u3, c3, l3, p2) {
            var f2 = Ae2();
            try {
              return yt(t4)(e4, n3, r4, i3, o3, a3, s3, u3, c3, l3, p2);
            } catch (t5) {
              if (Ee2(f2), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, aa: function(t4, e4, n3, r4, i3, o3, a3, s3) {
            var u3 = Ae2();
            try {
              return Me2(t4, e4, n3, r4, i3, o3, a3, s3);
            } catch (t5) {
              if (Ee2(u3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, _: function(t4, e4, n3, r4, i3, o3, a3) {
            var s3 = Ae2();
            try {
              return ke2(t4, e4, n3, r4, i3, o3, a3);
            } catch (t5) {
              if (Ee2(s3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, Z: function(t4, e4, n3, r4, i3) {
            var o3 = Ae2();
            try {
              return Ue(t4, e4, n3, r4, i3);
            } catch (t5) {
              if (Ee2(o3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, ca: function(t4, e4, n3, r4) {
            var i3 = Ae2();
            try {
              return Re2(t4, e4, n3, r4);
            } catch (t5) {
              if (Ee2(i3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, $: function(t4) {
            var e4 = Ae2();
            try {
              return $e2(t4);
            } catch (t5) {
              if (Ee2(e4), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, ba: function(t4, e4) {
            var n3 = Ae2();
            try {
              return je2(t4, e4);
            } catch (t5) {
              if (Ee2(n3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, Y: function(t4, e4, n3) {
            var r4 = Ae2();
            try {
              return Ce2(t4, e4, n3);
            } catch (t5) {
              if (Ee2(r4), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, g: function(t4) {
            var e4 = Ae2();
            try {
              yt(t4)();
            } catch (t5) {
              if (Ee2(e4), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, r: function(t4, e4) {
            var n3 = Ae2();
            try {
              yt(t4)(e4);
            } catch (t5) {
              if (Ee2(n3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, i: function(t4, e4, n3) {
            var r4 = Ae2();
            try {
              yt(t4)(e4, n3);
            } catch (t5) {
              if (Ee2(r4), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, ha: function(t4, e4, n3, r4) {
            var i3 = Ae2();
            try {
              yt(t4)(e4, n3, r4);
            } catch (t5) {
              if (Ee2(i3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, m: function(t4, e4, n3, r4) {
            var i3 = Ae2();
            try {
              yt(t4)(e4, n3, r4);
            } catch (t5) {
              if (Ee2(i3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, v: function(t4, e4, n3, r4, i3) {
            var o3 = Ae2();
            try {
              yt(t4)(e4, n3, r4, i3);
            } catch (t5) {
              if (Ee2(o3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, u: function(t4, e4, n3, r4, i3, o3) {
            var a3 = Ae2();
            try {
              yt(t4)(e4, n3, r4, i3, o3);
            } catch (t5) {
              if (Ee2(a3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, O: function(t4, e4, n3, r4, i3, o3, a3) {
            var s3 = Ae2();
            try {
              yt(t4)(e4, n3, r4, i3, o3, a3);
            } catch (t5) {
              if (Ee2(s3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, A: function(t4, e4, n3, r4, i3, o3, a3, s3) {
            var u3 = Ae2();
            try {
              yt(t4)(e4, n3, r4, i3, o3, a3, s3);
            } catch (t5) {
              if (Ee2(u3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, ka: function(t4, e4, n3, r4, i3, o3, a3, s3, u3) {
            var c3 = Ae2();
            try {
              yt(t4)(e4, n3, r4, i3, o3, a3, s3, u3);
            } catch (t5) {
              if (Ee2(c3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, C: function(t4, e4, n3, r4, i3, o3, a3, s3, u3, c3, l3) {
            var p2 = Ae2();
            try {
              yt(t4)(e4, n3, r4, i3, o3, a3, s3, u3, c3, l3);
            } catch (t5) {
              if (Ee2(p2), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, D: function(t4, e4, n3, r4, i3, o3, a3, s3, u3, c3, l3, p2, f2, d3, h3, g3) {
            var b3 = Ae2();
            try {
              yt(t4)(e4, n3, r4, i3, o3, a3, s3, u3, c3, l3, p2, f2, d3, h3, g3);
            } catch (t5) {
              if (Ee2(b3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, fa: function(t4, e4, n3, r4, i3, o3, a3, s3) {
            var u3 = Ae2();
            try {
              Fe(t4, e4, n3, r4, i3, o3, a3, s3);
            } catch (t5) {
              if (Ee2(u3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, da: function(t4, e4, n3, r4, i3, o3, a3, s3, u3, c3, l3, p2) {
            var f2 = Ae2();
            try {
              Le2(t4, e4, n3, r4, i3, o3, a3, s3, u3, c3, l3, p2);
            } catch (t5) {
              if (Ee2(f2), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, ea: function(t4, e4, n3, r4, i3, o3) {
            var a3 = Ae2();
            try {
              Ne2(t4, e4, n3, r4, i3, o3);
            } catch (t5) {
              if (Ee2(a3), t5 !== t5 + 0)
                throw t5;
              Se2(1, 0);
            }
          }, o: function(t4) {
            return t4;
          }, a: $2 || s2.wasmMemory, G: function(t4) {
            ae2 = t4;
          }, la: le2, z: function(t4, e4, n3, r4) {
            return le2(t4, e4, n3, r4);
          }};
          !function() {
            function t4(t5, e5) {
              s2.asm = t5.exports, dt.qc.push(s2.asm.sb), q2 = s2.asm.ub, Y2.unshift(s2.asm.Va), k2 = e5, x2 || (et--, s2.monitorRunDependencies && s2.monitorRunDependencies(et), et == 0 && (nt !== null && (clearInterval(nt), nt = null), rt && (t5 = rt, rt = null, t5())));
            }
            function e4(e5) {
              t4(e5.instance, e5.module);
            }
            function n3(t5) {
              return function() {
                if (!E2 && (_2 || v2)) {
                  if (typeof fetch == "function" && !tt.startsWith("file://"))
                    return fetch(tt, {credentials: "same-origin"}).then(function(t6) {
                      if (!t6.ok)
                        throw "failed to load wasm binary file at '" + tt + "'";
                      return t6.arrayBuffer();
                    }).catch(function() {
                      return at();
                    });
                  if (p)
                    return new Promise(function(t6, e5) {
                      p(tt, function(e6) {
                        t6(new Uint8Array(e6));
                      }, e5);
                    });
                }
                return Promise.resolve().then(function() {
                  return at();
                });
              }().then(function(t6) {
                return WebAssembly.instantiate(t6, r4);
              }).then(function(t6) {
                return t6;
              }).then(t5, function(t6) {
                P2("failed to asynchronously prepare wasm: " + t6), it(t6);
              });
            }
            var r4 = {a: fe2};
            if (x2 || (et++, s2.monitorRunDependencies && s2.monitorRunDependencies(et)), s2.instantiateWasm)
              try {
                return s2.instantiateWasm(r4, t4);
              } catch (t5) {
                return P2("Module.instantiateWasm callback failed with error: " + t5), false;
              }
            (E2 || typeof WebAssembly.instantiateStreaming != "function" || ot() || tt.startsWith("file://") || w2 || typeof fetch != "function" ? n3(e4) : fetch(tt, {credentials: "same-origin"}).then(function(t5) {
              return WebAssembly.instantiateStreaming(t5, r4).then(e4, function(t6) {
                return P2("wasm streaming compile failed: " + t6), P2("falling back to ArrayBuffer instantiation"), n3(e4);
              });
            })).catch(c2);
          }(), s2.___wasm_call_ctors = function() {
            return (s2.___wasm_call_ctors = s2.asm.Va).apply(null, arguments);
          }, s2._OrtInit = function() {
            return (s2._OrtInit = s2.asm.Wa).apply(null, arguments);
          }, s2._OrtCreateSessionOptions = function() {
            return (s2._OrtCreateSessionOptions = s2.asm.Xa).apply(null, arguments);
          }, s2._OrtAppendExecutionProvider = function() {
            return (s2._OrtAppendExecutionProvider = s2.asm.Ya).apply(null, arguments);
          }, s2._OrtAddSessionConfigEntry = function() {
            return (s2._OrtAddSessionConfigEntry = s2.asm.Za).apply(null, arguments);
          }, s2._OrtReleaseSessionOptions = function() {
            return (s2._OrtReleaseSessionOptions = s2.asm._a).apply(null, arguments);
          }, s2._OrtCreateSession = function() {
            return (s2._OrtCreateSession = s2.asm.$a).apply(null, arguments);
          }, s2._OrtReleaseSession = function() {
            return (s2._OrtReleaseSession = s2.asm.ab).apply(null, arguments);
          }, s2._OrtGetInputCount = function() {
            return (s2._OrtGetInputCount = s2.asm.bb).apply(null, arguments);
          }, s2._OrtGetOutputCount = function() {
            return (s2._OrtGetOutputCount = s2.asm.cb).apply(null, arguments);
          }, s2._OrtGetInputName = function() {
            return (s2._OrtGetInputName = s2.asm.db).apply(null, arguments);
          }, s2._OrtGetOutputName = function() {
            return (s2._OrtGetOutputName = s2.asm.eb).apply(null, arguments);
          }, s2._OrtFree = function() {
            return (s2._OrtFree = s2.asm.fb).apply(null, arguments);
          }, s2._OrtCreateTensor = function() {
            return (s2._OrtCreateTensor = s2.asm.gb).apply(null, arguments);
          }, s2._OrtGetTensorData = function() {
            return (s2._OrtGetTensorData = s2.asm.hb).apply(null, arguments);
          }, s2._OrtReleaseTensor = function() {
            return (s2._OrtReleaseTensor = s2.asm.ib).apply(null, arguments);
          }, s2._OrtCreateRunOptions = function() {
            return (s2._OrtCreateRunOptions = s2.asm.jb).apply(null, arguments);
          }, s2._OrtAddRunConfigEntry = function() {
            return (s2._OrtAddRunConfigEntry = s2.asm.kb).apply(null, arguments);
          }, s2._OrtReleaseRunOptions = function() {
            return (s2._OrtReleaseRunOptions = s2.asm.lb).apply(null, arguments);
          }, s2._OrtRun = function() {
            return (s2._OrtRun = s2.asm.mb).apply(null, arguments);
          }, s2._OrtEndProfiling = function() {
            return (s2._OrtEndProfiling = s2.asm.nb).apply(null, arguments);
          };
          var de2 = s2._pthread_self = function() {
            return (de2 = s2._pthread_self = s2.asm.ob).apply(null, arguments);
          }, he2 = s2._malloc = function() {
            return (he2 = s2._malloc = s2.asm.pb).apply(null, arguments);
          }, ge2 = s2._free = function() {
            return (ge2 = s2._free = s2.asm.qb).apply(null, arguments);
          }, be2 = s2._fflush = function() {
            return (be2 = s2._fflush = s2.asm.rb).apply(null, arguments);
          };
          s2.__emscripten_tls_init = function() {
            return (s2.__emscripten_tls_init = s2.asm.sb).apply(null, arguments);
          };
          var me2 = s2.___funcs_on_exit = function() {
            return (me2 = s2.___funcs_on_exit = s2.asm.tb).apply(null, arguments);
          }, ye2 = s2.__emscripten_thread_init = function() {
            return (ye2 = s2.__emscripten_thread_init = s2.asm.vb).apply(null, arguments);
          };
          s2.__emscripten_thread_crashed = function() {
            return (s2.__emscripten_thread_crashed = s2.asm.wb).apply(null, arguments);
          };
          var _e2, ve2 = s2._emscripten_run_in_main_runtime_thread_js = function() {
            return (ve2 = s2._emscripten_run_in_main_runtime_thread_js = s2.asm.xb).apply(null, arguments);
          }, we2 = s2.__emscripten_proxy_execute_task_queue = function() {
            return (we2 = s2.__emscripten_proxy_execute_task_queue = s2.asm.yb).apply(null, arguments);
          }, xe2 = s2.__emscripten_thread_free_data = function() {
            return (xe2 = s2.__emscripten_thread_free_data = s2.asm.zb).apply(null, arguments);
          }, Te2 = s2.__emscripten_thread_exit = function() {
            return (Te2 = s2.__emscripten_thread_exit = s2.asm.Ab).apply(null, arguments);
          }, Se2 = s2._setThrew = function() {
            return (Se2 = s2._setThrew = s2.asm.Bb).apply(null, arguments);
          }, Oe2 = s2._emscripten_stack_set_limits = function() {
            return (Oe2 = s2._emscripten_stack_set_limits = s2.asm.Cb).apply(null, arguments);
          }, Ae2 = s2.stackSave = function() {
            return (Ae2 = s2.stackSave = s2.asm.Db).apply(null, arguments);
          }, Ee2 = s2.stackRestore = function() {
            return (Ee2 = s2.stackRestore = s2.asm.Eb).apply(null, arguments);
          }, Ie2 = s2.stackAlloc = function() {
            return (Ie2 = s2.stackAlloc = s2.asm.Fb).apply(null, arguments);
          }, Pe2 = s2.___cxa_can_catch = function() {
            return (Pe2 = s2.___cxa_can_catch = s2.asm.Gb).apply(null, arguments);
          }, De2 = s2.___cxa_is_pointer_type = function() {
            return (De2 = s2.___cxa_is_pointer_type = s2.asm.Hb).apply(null, arguments);
          }, $e2 = s2.dynCall_j = function() {
            return ($e2 = s2.dynCall_j = s2.asm.Ib).apply(null, arguments);
          }, ke2 = s2.dynCall_iiiiij = function() {
            return (ke2 = s2.dynCall_iiiiij = s2.asm.Jb).apply(null, arguments);
          }, Ce2 = s2.dynCall_jii = function() {
            return (Ce2 = s2.dynCall_jii = s2.asm.Kb).apply(null, arguments);
          }, Fe = s2.dynCall_viiiiij = function() {
            return (Fe = s2.dynCall_viiiiij = s2.asm.Lb).apply(null, arguments);
          }, Ne2 = s2.dynCall_vjji = function() {
            return (Ne2 = s2.dynCall_vjji = s2.asm.Mb).apply(null, arguments);
          }, Le2 = s2.dynCall_viiijjjii = function() {
            return (Le2 = s2.dynCall_viiijjjii = s2.asm.Nb).apply(null, arguments);
          }, Re2 = s2.dynCall_iij = function() {
            return (Re2 = s2.dynCall_iij = s2.asm.Ob).apply(null, arguments);
          }, je2 = s2.dynCall_ji = function() {
            return (je2 = s2.dynCall_ji = s2.asm.Pb).apply(null, arguments);
          }, Me2 = s2.dynCall_iiiiiij = function() {
            return (Me2 = s2.dynCall_iiiiiij = s2.asm.Qb).apply(null, arguments);
          }, Ue = s2.dynCall_iiij = function() {
            return (Ue = s2.dynCall_iiij = s2.asm.Rb).apply(null, arguments);
          };
          function Ve2() {
            function t4() {
              if (!_e2 && (_e2 = true, s2.calledRun = true, !M2) && (x2 || ht(Y2), u2(s2), s2.onRuntimeInitialized && s2.onRuntimeInitialized(), !x2)) {
                if (s2.postRun)
                  for (typeof s2.postRun == "function" && (s2.postRun = [s2.postRun]); s2.postRun.length; ) {
                    var t5 = s2.postRun.shift();
                    Z2.unshift(t5);
                  }
                ht(Z2);
              }
            }
            if (!(0 < et))
              if (x2)
                u2(s2), x2 || ht(Y2), postMessage({cmd: "loaded"});
              else {
                if (s2.preRun)
                  for (typeof s2.preRun == "function" && (s2.preRun = [s2.preRun]); s2.preRun.length; )
                    Q2();
                ht(X2), 0 < et || (s2.setStatus ? (s2.setStatus("Running..."), setTimeout(function() {
                  setTimeout(function() {
                    s2.setStatus("");
                  }, 1), t4();
                }, 1)) : t4());
              }
          }
          if (s2.UTF8ToString = B2, s2.stringToUTF8 = function(t4, e4, n3) {
            return z2(t4, r3(), e4, n3);
          }, s2.lengthBytesUTF8 = G2, s2.keepRuntimeAlive = J2, s2.wasmMemory = $2, s2.stackSave = Ae2, s2.stackRestore = Ee2, s2.stackAlloc = Ie2, s2.ExitStatus = ut, s2.PThread = dt, rt = function t4() {
            _e2 || Ve2(), _e2 || (rt = t4);
          }, s2.preInit)
            for (typeof s2.preInit == "function" && (s2.preInit = [s2.preInit]); 0 < s2.preInit.length; )
              s2.preInit.pop()();
          return Ve2(), t3.ready;
        });
        t2.exports = r2;
      }, 932: (t2, e2, n2) => {
        var _scriptDir, r2 = (_scriptDir = (_scriptDir = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0) || "/index.js", function(t3) {
          var e3, r3, i2;
          t3 = t3 || {}, e3 || (e3 = t3 !== void 0 ? t3 : {}), e3.ready = new Promise(function(t4, e4) {
            r3 = t4, i2 = e4;
          });
          var o2, a2, s2, u2, c2, l2, p = Object.assign({}, e3), f = "./this.program", d2 = (t4, e4) => {
            throw e4;
          }, h2 = typeof window == "object", g2 = typeof importScripts == "function", b2 = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", m = "";
          b2 ? (m = g2 ? n2(908).dirname(m) + "/" : "//", l2 = () => {
            c2 || (u2 = n2(1384), c2 = n2(908));
          }, o2 = function(t4, e4) {
            return l2(), t4 = c2.normalize(t4), u2.readFileSync(t4, e4 ? void 0 : "utf8");
          }, s2 = (t4) => ((t4 = o2(t4, true)).buffer || (t4 = new Uint8Array(t4)), t4), a2 = (t4, e4, n3) => {
            l2(), t4 = c2.normalize(t4), u2.readFile(t4, function(t5, r4) {
              t5 ? n3(t5) : e4(r4.buffer);
            });
          }, 1 < process.argv.length && (f = process.argv[1].replace(/\\/g, "/")), process.argv.slice(2), process.on("uncaughtException", function(t4) {
            if (!(t4 instanceof K2))
              throw t4;
          }), process.on("unhandledRejection", function(t4) {
            throw t4;
          }), d2 = (t4, e4) => {
            if (w2 || 0 < U2)
              throw process.exitCode = t4, e4;
            e4 instanceof K2 || v2("exiting due to exception: " + e4), process.exit(t4);
          }, e3.inspect = function() {
            return "[Emscripten Module object]";
          }) : (h2 || g2) && (g2 ? m = self.location.href : typeof document != "undefined" && document.currentScript && (m = document.currentScript.src), _scriptDir && (m = _scriptDir), m = m.indexOf("blob:") !== 0 ? m.substr(0, m.replace(/[?#].*/, "").lastIndexOf("/") + 1) : "", o2 = (t4) => {
            var e4 = new XMLHttpRequest();
            return e4.open("GET", t4, false), e4.send(null), e4.responseText;
          }, g2 && (s2 = (t4) => {
            var e4 = new XMLHttpRequest();
            return e4.open("GET", t4, false), e4.responseType = "arraybuffer", e4.send(null), new Uint8Array(e4.response);
          }), a2 = (t4, e4, n3) => {
            var r4 = new XMLHttpRequest();
            r4.open("GET", t4, true), r4.responseType = "arraybuffer", r4.onload = () => {
              r4.status == 200 || r4.status == 0 && r4.response ? e4(r4.response) : n3();
            }, r4.onerror = n3, r4.send(null);
          });
          var y2, _2 = e3.print || console.log.bind(console), v2 = e3.printErr || console.warn.bind(console);
          Object.assign(e3, p), p = null, e3.thisProgram && (f = e3.thisProgram), e3.quit && (d2 = e3.quit), e3.wasmBinary && (y2 = e3.wasmBinary);
          var w2 = e3.noExitRuntime || false;
          typeof WebAssembly != "object" && W2("no native wasm support detected");
          var x2, T2, S2, O, A2, E2, I2 = false, P2 = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
          function D2(t4, e4, n3) {
            var r4 = (e4 >>>= 0) + n3;
            for (n3 = e4; t4[n3] && !(n3 >= r4); )
              ++n3;
            if (16 < n3 - e4 && t4.buffer && P2)
              return P2.decode(t4.subarray(e4, n3));
            for (r4 = ""; e4 < n3; ) {
              var i3 = t4[e4++];
              if (128 & i3) {
                var o3 = 63 & t4[e4++];
                if ((224 & i3) == 192)
                  r4 += String.fromCharCode((31 & i3) << 6 | o3);
                else {
                  var a3 = 63 & t4[e4++];
                  65536 > (i3 = (240 & i3) == 224 ? (15 & i3) << 12 | o3 << 6 | a3 : (7 & i3) << 18 | o3 << 12 | a3 << 6 | 63 & t4[e4++]) ? r4 += String.fromCharCode(i3) : (i3 -= 65536, r4 += String.fromCharCode(55296 | i3 >> 10, 56320 | 1023 & i3));
                }
              } else
                r4 += String.fromCharCode(i3);
            }
            return r4;
          }
          function $2(t4, e4) {
            return (t4 >>>= 0) ? D2(O, t4, e4) : "";
          }
          function k2(t4, e4, n3, r4) {
            if (!(0 < r4))
              return 0;
            var i3 = n3 >>>= 0;
            r4 = n3 + r4 - 1;
            for (var o3 = 0; o3 < t4.length; ++o3) {
              var a3 = t4.charCodeAt(o3);
              if (55296 <= a3 && 57343 >= a3 && (a3 = 65536 + ((1023 & a3) << 10) | 1023 & t4.charCodeAt(++o3)), 127 >= a3) {
                if (n3 >= r4)
                  break;
                e4[n3++ >>> 0] = a3;
              } else {
                if (2047 >= a3) {
                  if (n3 + 1 >= r4)
                    break;
                  e4[n3++ >>> 0] = 192 | a3 >> 6;
                } else {
                  if (65535 >= a3) {
                    if (n3 + 2 >= r4)
                      break;
                    e4[n3++ >>> 0] = 224 | a3 >> 12;
                  } else {
                    if (n3 + 3 >= r4)
                      break;
                    e4[n3++ >>> 0] = 240 | a3 >> 18, e4[n3++ >>> 0] = 128 | a3 >> 12 & 63;
                  }
                  e4[n3++ >>> 0] = 128 | a3 >> 6 & 63;
                }
                e4[n3++ >>> 0] = 128 | 63 & a3;
              }
            }
            return e4[n3 >>> 0] = 0, n3 - i3;
          }
          function C(t4) {
            for (var e4 = 0, n3 = 0; n3 < t4.length; ++n3) {
              var r4 = t4.charCodeAt(n3);
              127 >= r4 ? e4++ : 2047 >= r4 ? e4 += 2 : 55296 <= r4 && 57343 >= r4 ? (e4 += 4, ++n3) : e4 += 3;
            }
            return e4;
          }
          function F2() {
            var t4 = x2.buffer;
            T2 = t4, e3.HEAP8 = S2 = new Int8Array(t4), e3.HEAP16 = new Int16Array(t4), e3.HEAP32 = A2 = new Int32Array(t4), e3.HEAPU8 = O = new Uint8Array(t4), e3.HEAPU16 = new Uint16Array(t4), e3.HEAPU32 = E2 = new Uint32Array(t4), e3.HEAPF32 = new Float32Array(t4), e3.HEAPF64 = new Float64Array(t4);
          }
          var N2, L2 = [], R2 = [], j2 = [], M2 = [], U2 = 0;
          function V2() {
            var t4 = e3.preRun.shift();
            L2.unshift(t4);
          }
          var B2, z2 = 0, G2 = null, H2 = null;
          function W2(t4) {
            throw e3.onAbort && e3.onAbort(t4), v2(t4 = "Aborted(" + t4 + ")"), I2 = true, t4 = new WebAssembly.RuntimeError(t4 + ". Build with -sASSERTIONS for more info."), i2(t4), t4;
          }
          function q2() {
            return B2.startsWith("data:application/octet-stream;base64,");
          }
          if (B2 = "ort-wasm.wasm", !q2()) {
            var X2 = B2;
            B2 = e3.locateFile ? e3.locateFile(X2, m) : m + X2;
          }
          function Y2() {
            var t4 = B2;
            try {
              if (t4 == B2 && y2)
                return new Uint8Array(y2);
              if (s2)
                return s2(t4);
              throw "both async and sync fetching of the wasm failed";
            } catch (t5) {
              W2(t5);
            }
          }
          function K2(t4) {
            this.name = "ExitStatus", this.message = "Program terminated with exit(" + t4 + ")", this.status = t4;
          }
          function Z2(t4) {
            for (; 0 < t4.length; )
              t4.shift()(e3);
          }
          var J2 = [], Q2 = 0, tt = 0;
          function et(t4) {
            this.Db = t4, this.zb = t4 - 24, this.Ub = function(t5) {
              E2[this.zb + 4 >> 2 >>> 0] = t5;
            }, this.Eb = function() {
              return E2[this.zb + 4 >> 2 >>> 0];
            }, this.Sb = function(t5) {
              E2[this.zb + 8 >> 2 >>> 0] = t5;
            }, this.Wb = function() {
              return E2[this.zb + 8 >> 2 >>> 0];
            }, this.Tb = function() {
              A2[this.zb >> 2 >>> 0] = 0;
            }, this.Ib = function(t5) {
              S2[this.zb + 12 >> 0 >>> 0] = t5 ? 1 : 0;
            }, this.Pb = function() {
              return S2[this.zb + 12 >> 0 >>> 0] != 0;
            }, this.Jb = function(t5) {
              S2[this.zb + 13 >> 0 >>> 0] = t5 ? 1 : 0;
            }, this.Lb = function() {
              return S2[this.zb + 13 >> 0 >>> 0] != 0;
            }, this.Rb = function(t5, e4) {
              this.Fb(0), this.Ub(t5), this.Sb(e4), this.Tb(), this.Ib(false), this.Jb(false);
            }, this.Nb = function() {
              A2[this.zb >> 2 >>> 0] += 1;
            }, this.Xb = function() {
              var t5 = A2[this.zb >> 2 >>> 0];
              return A2[this.zb >> 2 >>> 0] = t5 - 1, t5 === 1;
            }, this.Fb = function(t5) {
              E2[this.zb + 16 >> 2 >>> 0] = t5;
            }, this.Ob = function() {
              return E2[this.zb + 16 >> 2 >>> 0];
            }, this.Qb = function() {
              if (Et(this.Eb()))
                return E2[this.Db >> 2 >>> 0];
              var t5 = this.Ob();
              return t5 !== 0 ? t5 : this.Db;
            };
          }
          function nt(t4) {
            return _t(new et(t4).zb);
          }
          var rt = [];
          function it(t4) {
            var e4 = rt[t4];
            return e4 || (t4 >= rt.length && (rt.length = t4 + 1), rt[t4] = e4 = N2.get(t4)), e4;
          }
          function ot(t4) {
            var e4 = C(t4) + 1, n3 = yt(e4);
            return n3 && k2(t4, S2, n3, e4), n3;
          }
          var at = {};
          function st() {
            if (!ut) {
              var t4, e4 = {USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: f || "./this.program"};
              for (t4 in at)
                at[t4] === void 0 ? delete e4[t4] : e4[t4] = at[t4];
              var n3 = [];
              for (t4 in e4)
                n3.push(t4 + "=" + e4[t4]);
              ut = n3;
            }
            return ut;
          }
          var ut, ct = [null, [], []];
          function lt(t4, e4) {
            var n3 = ct[t4];
            e4 === 0 || e4 === 10 ? ((t4 === 1 ? _2 : v2)(D2(n3, 0)), n3.length = 0) : n3.push(e4);
          }
          var pt = 0;
          function ft(t4) {
            return t4 % 4 == 0 && (t4 % 100 != 0 || t4 % 400 == 0);
          }
          var dt = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], ht = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function gt(t4, e4, n3, r4) {
            function i3(t5, e5, n4) {
              for (t5 = typeof t5 == "number" ? t5.toString() : t5 || ""; t5.length < e5; )
                t5 = n4[0] + t5;
              return t5;
            }
            function o3(t5, e5) {
              return i3(t5, e5, "0");
            }
            function a3(t5, e5) {
              function n4(t6) {
                return 0 > t6 ? -1 : 0 < t6 ? 1 : 0;
              }
              var r5;
              return (r5 = n4(t5.getFullYear() - e5.getFullYear())) === 0 && (r5 = n4(t5.getMonth() - e5.getMonth())) === 0 && (r5 = n4(t5.getDate() - e5.getDate())), r5;
            }
            function s3(t5) {
              switch (t5.getDay()) {
                case 0:
                  return new Date(t5.getFullYear() - 1, 11, 29);
                case 1:
                  return t5;
                case 2:
                  return new Date(t5.getFullYear(), 0, 3);
                case 3:
                  return new Date(t5.getFullYear(), 0, 2);
                case 4:
                  return new Date(t5.getFullYear(), 0, 1);
                case 5:
                  return new Date(t5.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(t5.getFullYear() - 1, 11, 30);
              }
            }
            function u3(t5) {
              var e5 = t5.Bb;
              for (t5 = new Date(new Date(t5.Cb + 1900, 0, 1).getTime()); 0 < e5; ) {
                var n4 = t5.getMonth(), r5 = (ft(t5.getFullYear()) ? dt : ht)[n4];
                if (!(e5 > r5 - t5.getDate())) {
                  t5.setDate(t5.getDate() + e5);
                  break;
                }
                e5 -= r5 - t5.getDate() + 1, t5.setDate(1), 11 > n4 ? t5.setMonth(n4 + 1) : (t5.setMonth(0), t5.setFullYear(t5.getFullYear() + 1));
              }
              return n4 = new Date(t5.getFullYear() + 1, 0, 4), e5 = s3(new Date(t5.getFullYear(), 0, 4)), n4 = s3(n4), 0 >= a3(e5, t5) ? 0 >= a3(n4, t5) ? t5.getFullYear() + 1 : t5.getFullYear() : t5.getFullYear() - 1;
            }
            var c3 = A2[r4 + 40 >> 2 >>> 0];
            for (var l3 in r4 = {$b: A2[r4 >> 2 >>> 0], Zb: A2[r4 + 4 >> 2 >>> 0], Gb: A2[r4 + 8 >> 2 >>> 0], Kb: A2[r4 + 12 >> 2 >>> 0], Hb: A2[r4 + 16 >> 2 >>> 0], Cb: A2[r4 + 20 >> 2 >>> 0], Ab: A2[r4 + 24 >> 2 >>> 0], Bb: A2[r4 + 28 >> 2 >>> 0], bc: A2[r4 + 32 >> 2 >>> 0], Yb: A2[r4 + 36 >> 2 >>> 0], ac: c3 ? $2(c3) : ""}, n3 = $2(n3), c3 = {"%c": "%a %b %d %H:%M:%S %Y", "%D": "%m/%d/%y", "%F": "%Y-%m-%d", "%h": "%b", "%r": "%I:%M:%S %p", "%R": "%H:%M", "%T": "%H:%M:%S", "%x": "%m/%d/%y", "%X": "%H:%M:%S", "%Ec": "%c", "%EC": "%C", "%Ex": "%m/%d/%y", "%EX": "%H:%M:%S", "%Ey": "%y", "%EY": "%Y", "%Od": "%d", "%Oe": "%e", "%OH": "%H", "%OI": "%I", "%Om": "%m", "%OM": "%M", "%OS": "%S", "%Ou": "%u", "%OU": "%U", "%OV": "%V", "%Ow": "%w", "%OW": "%W", "%Oy": "%y"})
              n3 = n3.replace(new RegExp(l3, "g"), c3[l3]);
            var p2 = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), f2 = "January February March April May June July August September October November December".split(" ");
            for (l3 in c3 = {"%a": function(t5) {
              return p2[t5.Ab].substring(0, 3);
            }, "%A": function(t5) {
              return p2[t5.Ab];
            }, "%b": function(t5) {
              return f2[t5.Hb].substring(0, 3);
            }, "%B": function(t5) {
              return f2[t5.Hb];
            }, "%C": function(t5) {
              return o3((t5.Cb + 1900) / 100 | 0, 2);
            }, "%d": function(t5) {
              return o3(t5.Kb, 2);
            }, "%e": function(t5) {
              return i3(t5.Kb, 2, " ");
            }, "%g": function(t5) {
              return u3(t5).toString().substring(2);
            }, "%G": function(t5) {
              return u3(t5);
            }, "%H": function(t5) {
              return o3(t5.Gb, 2);
            }, "%I": function(t5) {
              return (t5 = t5.Gb) == 0 ? t5 = 12 : 12 < t5 && (t5 -= 12), o3(t5, 2);
            }, "%j": function(t5) {
              for (var e5 = 0, n4 = 0; n4 <= t5.Hb - 1; e5 += (ft(t5.Cb + 1900) ? dt : ht)[n4++])
                ;
              return o3(t5.Kb + e5, 3);
            }, "%m": function(t5) {
              return o3(t5.Hb + 1, 2);
            }, "%M": function(t5) {
              return o3(t5.Zb, 2);
            }, "%n": function() {
              return "\n";
            }, "%p": function(t5) {
              return 0 <= t5.Gb && 12 > t5.Gb ? "AM" : "PM";
            }, "%S": function(t5) {
              return o3(t5.$b, 2);
            }, "%t": function() {
              return "	";
            }, "%u": function(t5) {
              return t5.Ab || 7;
            }, "%U": function(t5) {
              return o3(Math.floor((t5.Bb + 7 - t5.Ab) / 7), 2);
            }, "%V": function(t5) {
              var e5 = Math.floor((t5.Bb + 7 - (t5.Ab + 6) % 7) / 7);
              if (2 >= (t5.Ab + 371 - t5.Bb - 2) % 7 && e5++, e5)
                e5 == 53 && ((n4 = (t5.Ab + 371 - t5.Bb) % 7) == 4 || n4 == 3 && ft(t5.Cb) || (e5 = 1));
              else {
                e5 = 52;
                var n4 = (t5.Ab + 7 - t5.Bb - 1) % 7;
                (n4 == 4 || n4 == 5 && ft(t5.Cb % 400 - 1)) && e5++;
              }
              return o3(e5, 2);
            }, "%w": function(t5) {
              return t5.Ab;
            }, "%W": function(t5) {
              return o3(Math.floor((t5.Bb + 7 - (t5.Ab + 6) % 7) / 7), 2);
            }, "%y": function(t5) {
              return (t5.Cb + 1900).toString().substring(2);
            }, "%Y": function(t5) {
              return t5.Cb + 1900;
            }, "%z": function(t5) {
              var e5 = 0 <= (t5 = t5.Yb);
              return t5 = Math.abs(t5) / 60, (e5 ? "+" : "-") + String("0000" + (t5 / 60 * 100 + t5 % 60)).slice(-4);
            }, "%Z": function(t5) {
              return t5.ac;
            }, "%%": function() {
              return "%";
            }}, n3 = n3.replace(/%%/g, "\0\0"), c3)
              n3.includes(l3) && (n3 = n3.replace(new RegExp(l3, "g"), c3[l3](r4)));
            return l3 = function(t5) {
              var e5 = Array(C(t5) + 1);
              return k2(t5, e5, 0, e5.length), e5;
            }(n3 = n3.replace(/\0\0/g, "%")), l3.length > e4 ? 0 : (S2.set(l3, t4 >>> 0), l3.length - 1);
          }
          var bt = {a: function(t4) {
            return yt(t4 + 24) + 24;
          }, m: function(t4) {
            return (t4 = new et(t4)).Pb() || (t4.Ib(true), Q2--), t4.Jb(false), J2.push(t4), t4.Nb(), t4.Qb();
          }, ia: function(t4) {
            throw v2("Unexpected exception thrown, this is not properly supported - aborting"), I2 = true, t4;
          }, w: function() {
            xt(0);
            var t4 = J2.pop();
            if (t4.Xb() && !t4.Lb()) {
              var e4 = t4.Wb();
              e4 && it(e4)(t4.Db), nt(t4.Db);
            }
            tt = 0;
          }, d: function() {
            var t4 = tt;
            if (!t4)
              return pt = 0;
            var e4 = new et(t4);
            e4.Fb(t4);
            var n3 = e4.Eb();
            if (!n3)
              return pt = 0, t4;
            for (var r4 = Array.prototype.slice.call(arguments), i3 = 0; i3 < r4.length; i3++) {
              var o3 = r4[i3];
              if (o3 === 0 || o3 === n3)
                break;
              if (At(o3, n3, e4.zb + 16))
                return pt = o3, t4;
            }
            return pt = n3, t4;
          }, k: function() {
            var t4 = tt;
            if (!t4)
              return pt = 0;
            var e4 = new et(t4);
            e4.Fb(t4);
            var n3 = e4.Eb();
            if (!n3)
              return pt = 0, t4;
            for (var r4 = Array.prototype.slice.call(arguments), i3 = 0; i3 < r4.length; i3++) {
              var o3 = r4[i3];
              if (o3 === 0 || o3 === n3)
                break;
              if (At(o3, n3, e4.zb + 16))
                return pt = o3, t4;
            }
            return pt = n3, t4;
          }, g: function() {
            var t4 = tt;
            if (!t4)
              return pt = 0;
            var e4 = new et(t4);
            e4.Fb(t4);
            var n3 = e4.Eb();
            if (!n3)
              return pt = 0, t4;
            for (var r4 = Array.prototype.slice.call(arguments), i3 = 0; i3 < r4.length; i3++) {
              var o3 = r4[i3];
              if (o3 === 0 || o3 === n3)
                break;
              if (At(o3, n3, e4.zb + 16))
                return pt = o3, t4;
            }
            return pt = n3, t4;
          }, s: nt, L: function() {
            var t4 = J2.pop();
            t4 || W2("no exception to throw");
            var e4 = t4.Db;
            throw t4.Lb() || (J2.push(t4), t4.Jb(true), t4.Ib(false), Q2++), tt = e4, e4;
          }, b: function(t4, e4, n3) {
            throw new et(t4).Rb(e4, n3), tt = t4, Q2++, t4;
          }, la: function() {
            return Q2;
          }, i: function(t4) {
            throw tt || (tt = t4), t4;
          }, H: function() {
            return 0;
          }, Ba: function() {
          }, pa: function() {
          }, ra: function() {
          }, ka: function() {
            return 0;
          }, za: function() {
          }, ua: function() {
          }, ya: function() {
          }, R: function() {
          }, qa: function() {
          }, na: function() {
          }, Aa: function() {
          }, oa: function() {
          }, Ha: function() {
          }, Ja: function() {
            W2("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking");
          }, Ia: function() {
            W2("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking");
          }, S: function() {
            return Date.now();
          }, Ca: function() {
            return true;
          }, Da: function(t4, e4) {
            t4 = new Date(1e3 * (E2[t4 >>> 2] + 4294967296 * A2[t4 + 4 >>> 2])), A2[e4 >> 2 >>> 0] = t4.getUTCSeconds(), A2[e4 + 4 >> 2 >>> 0] = t4.getUTCMinutes(), A2[e4 + 8 >> 2 >>> 0] = t4.getUTCHours(), A2[e4 + 12 >> 2 >>> 0] = t4.getUTCDate(), A2[e4 + 16 >> 2 >>> 0] = t4.getUTCMonth(), A2[e4 + 20 >> 2 >>> 0] = t4.getUTCFullYear() - 1900, A2[e4 + 24 >> 2 >>> 0] = t4.getUTCDay(), A2[e4 + 28 >> 2 >>> 0] = (t4.getTime() - Date.UTC(t4.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
          }, Ea: function(t4, e4) {
            t4 = new Date(1e3 * (E2[t4 >>> 2] + 4294967296 * A2[t4 + 4 >>> 2])), A2[e4 >> 2 >>> 0] = t4.getSeconds(), A2[e4 + 4 >> 2 >>> 0] = t4.getMinutes(), A2[e4 + 8 >> 2 >>> 0] = t4.getHours(), A2[e4 + 12 >> 2 >>> 0] = t4.getDate(), A2[e4 + 16 >> 2 >>> 0] = t4.getMonth(), A2[e4 + 20 >> 2 >>> 0] = t4.getFullYear() - 1900, A2[e4 + 24 >> 2 >>> 0] = t4.getDay();
            var n3 = new Date(t4.getFullYear(), 0, 1);
            A2[e4 + 28 >> 2 >>> 0] = (t4.getTime() - n3.getTime()) / 864e5 | 0, A2[e4 + 36 >> 2 >>> 0] = -60 * t4.getTimezoneOffset();
            var r4 = new Date(t4.getFullYear(), 6, 1).getTimezoneOffset();
            n3 = n3.getTimezoneOffset(), A2[e4 + 32 >> 2 >>> 0] = 0 | (r4 != n3 && t4.getTimezoneOffset() == Math.min(n3, r4));
          }, Fa: function(t4) {
            var e4 = new Date(A2[t4 + 20 >> 2 >>> 0] + 1900, A2[t4 + 16 >> 2 >>> 0], A2[t4 + 12 >> 2 >>> 0], A2[t4 + 8 >> 2 >>> 0], A2[t4 + 4 >> 2 >>> 0], A2[t4 >> 2 >>> 0], 0), n3 = A2[t4 + 32 >> 2 >>> 0], r4 = e4.getTimezoneOffset(), i3 = new Date(e4.getFullYear(), 0, 1), o3 = new Date(e4.getFullYear(), 6, 1).getTimezoneOffset(), a3 = i3.getTimezoneOffset(), s3 = Math.min(a3, o3);
            return 0 > n3 ? A2[t4 + 32 >> 2 >>> 0] = Number(o3 != a3 && s3 == r4) : 0 < n3 != (s3 == r4) && (o3 = Math.max(a3, o3), e4.setTime(e4.getTime() + 6e4 * ((0 < n3 ? s3 : o3) - r4))), A2[t4 + 24 >> 2 >>> 0] = e4.getDay(), A2[t4 + 28 >> 2 >>> 0] = (e4.getTime() - i3.getTime()) / 864e5 | 0, A2[t4 >> 2 >>> 0] = e4.getSeconds(), A2[t4 + 4 >> 2 >>> 0] = e4.getMinutes(), A2[t4 + 8 >> 2 >>> 0] = e4.getHours(), A2[t4 + 12 >> 2 >>> 0] = e4.getDate(), A2[t4 + 16 >> 2 >>> 0] = e4.getMonth(), e4.getTime() / 1e3 | 0;
          }, sa: function() {
            return -52;
          }, ta: function() {
          }, Ga: function t4(e4, n3, r4) {
            t4.Vb || (t4.Vb = true, function(t5, e5, n4) {
              function r5(t6) {
                return (t6 = t6.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? t6[1] : "GMT";
              }
              var i3 = new Date().getFullYear(), o3 = new Date(i3, 0, 1), a3 = new Date(i3, 6, 1);
              i3 = o3.getTimezoneOffset();
              var s3 = a3.getTimezoneOffset();
              A2[t5 >> 2 >>> 0] = 60 * Math.max(i3, s3), A2[e5 >> 2 >>> 0] = Number(i3 != s3), t5 = r5(o3), e5 = r5(a3), t5 = ot(t5), e5 = ot(e5), s3 < i3 ? (E2[n4 >> 2 >>> 0] = t5, E2[n4 + 4 >> 2 >>> 0] = e5) : (E2[n4 >> 2 >>> 0] = e5, E2[n4 + 4 >> 2 >>> 0] = t5);
            }(e4, n3, r4));
          }, B: function() {
            W2("");
          }, ma: function() {
            return 4294901760;
          }, I: b2 ? () => {
            var t4 = process.hrtime();
            return 1e3 * t4[0] + t4[1] / 1e6;
          } : () => performance.now(), xa: function(t4, e4, n3) {
            O.copyWithin(t4 >>> 0, e4 >>> 0, e4 + n3 >>> 0);
          }, G: function(t4) {
            var e4 = O.length;
            if (4294901760 < (t4 >>>= 0))
              return false;
            for (var n3 = 1; 4 >= n3; n3 *= 2) {
              var r4 = e4 * (1 + 0.2 / n3);
              r4 = Math.min(r4, t4 + 100663296);
              var i3 = Math;
              r4 = Math.max(t4, r4), i3 = i3.min.call(i3, 4294901760, r4 + (65536 - r4 % 65536) % 65536);
              t: {
                try {
                  x2.grow(i3 - T2.byteLength + 65535 >>> 16), F2();
                  var o3 = 1;
                  break t;
                } catch (t5) {
                }
                o3 = void 0;
              }
              if (o3)
                return true;
            }
            return false;
          }, va: function(t4, e4) {
            var n3 = 0;
            return st().forEach(function(r4, i3) {
              var o3 = e4 + n3;
              for (i3 = E2[t4 + 4 * i3 >> 2 >>> 0] = o3, o3 = 0; o3 < r4.length; ++o3)
                S2[i3++ >> 0 >>> 0] = r4.charCodeAt(o3);
              S2[i3 >> 0 >>> 0] = 0, n3 += r4.length + 1;
            }), 0;
          }, wa: function(t4, e4) {
            var n3 = st();
            E2[t4 >> 2 >>> 0] = n3.length;
            var r4 = 0;
            return n3.forEach(function(t5) {
              r4 += t5.length + 1;
            }), E2[e4 >> 2 >>> 0] = r4, 0;
          }, ba: function(t4) {
            w2 || 0 < U2 || (wt(), Z2(j2), vt(0), ct[1].length && lt(1, 10), ct[2].length && lt(2, 10)), w2 || 0 < U2 || (e3.onExit && e3.onExit(t4), I2 = true), d2(t4, new K2(t4));
          }, E: function() {
            return 52;
          }, Q: function() {
            return 52;
          }, ca: function() {
            return 70;
          }, P: function(t4, e4, n3, r4) {
            for (var i3 = 0, o3 = 0; o3 < n3; o3++) {
              var a3 = E2[e4 >> 2 >>> 0], s3 = E2[e4 + 4 >> 2 >>> 0];
              e4 += 8;
              for (var u3 = 0; u3 < s3; u3++)
                lt(t4, O[a3 + u3 >>> 0]);
              i3 += s3;
            }
            return E2[r4 >> 2 >>> 0] = i3, 0;
          }, c: function() {
            return pt;
          }, ja: function t4(e4, r4) {
            t4.Mb || (t4.Mb = function() {
              if (typeof crypto == "object" && typeof crypto.getRandomValues == "function") {
                var t5 = new Uint8Array(1);
                return () => (crypto.getRandomValues(t5), t5[0]);
              }
              if (b2)
                try {
                  var e5 = n2(Object(function() {
                    var t6 = new Error("Cannot find module 'crypto'");
                    throw t6.code = "MODULE_NOT_FOUND", t6;
                  }()));
                  return () => e5.randomBytes(1)[0];
                } catch (t6) {
                }
              return () => W2("randomDevice");
            }());
            for (var i3 = 0; i3 < r4; i3++)
              S2[e4 + i3 >> 0 >>> 0] = t4.Mb();
            return 0;
          }, ea: function(t4, e4, n3) {
            var r4 = Tt();
            try {
              return it(t4)(e4, n3);
            } catch (t5) {
              if (St(r4), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, fa: function(t4, e4, n3) {
            var r4 = Tt();
            try {
              return it(t4)(e4, n3);
            } catch (t5) {
              if (St(r4), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, J: function(t4) {
            var e4 = Tt();
            try {
              return it(t4)();
            } catch (t5) {
              if (St(e4), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, e: function(t4, e4) {
            var n3 = Tt();
            try {
              return it(t4)(e4);
            } catch (t5) {
              if (St(n3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, N: function(t4, e4, n3) {
            var r4 = Tt();
            try {
              return it(t4)(e4, n3);
            } catch (t5) {
              if (St(r4), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, O: function(t4, e4, n3) {
            var r4 = Tt();
            try {
              return it(t4)(e4, n3);
            } catch (t5) {
              if (St(r4), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, j: function(t4, e4, n3) {
            var r4 = Tt();
            try {
              return it(t4)(e4, n3);
            } catch (t5) {
              if (St(r4), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, o: function(t4, e4, n3, r4) {
            var i3 = Tt();
            try {
              return it(t4)(e4, n3, r4);
            } catch (t5) {
              if (St(i3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, p: function(t4, e4, n3, r4, i3) {
            var o3 = Tt();
            try {
              return it(t4)(e4, n3, r4, i3);
            } catch (t5) {
              if (St(o3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, M: function(t4, e4, n3, r4, i3, o3) {
            var a3 = Tt();
            try {
              return it(t4)(e4, n3, r4, i3, o3);
            } catch (t5) {
              if (St(a3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, r: function(t4, e4, n3, r4, i3, o3) {
            var a3 = Tt();
            try {
              return it(t4)(e4, n3, r4, i3, o3);
            } catch (t5) {
              if (St(a3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, v: function(t4, e4, n3, r4, i3, o3, a3) {
            var s3 = Tt();
            try {
              return it(t4)(e4, n3, r4, i3, o3, a3);
            } catch (t5) {
              if (St(s3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, K: function(t4, e4, n3, r4, i3, o3, a3, s3) {
            var u3 = Tt();
            try {
              return it(t4)(e4, n3, r4, i3, o3, a3, s3);
            } catch (t5) {
              if (St(u3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, D: function(t4, e4, n3, r4, i3, o3, a3, s3, u3, c3, l3, p2) {
            var f2 = Tt();
            try {
              return it(t4)(e4, n3, r4, i3, o3, a3, s3, u3, c3, l3, p2);
            } catch (t5) {
              if (St(f2), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, X: function(t4, e4, n3, r4, i3, o3, a3, s3) {
            var u3 = Tt();
            try {
              return Lt(t4, e4, n3, r4, i3, o3, a3, s3);
            } catch (t5) {
              if (St(u3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, V: function(t4, e4, n3, r4, i3, o3, a3) {
            var s3 = Tt();
            try {
              return Pt(t4, e4, n3, r4, i3, o3, a3);
            } catch (t5) {
              if (St(s3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, U: function(t4, e4, n3, r4, i3) {
            var o3 = Tt();
            try {
              return Rt(t4, e4, n3, r4, i3);
            } catch (t5) {
              if (St(o3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, Z: function(t4, e4, n3, r4) {
            var i3 = Tt();
            try {
              return Ft(t4, e4, n3, r4);
            } catch (t5) {
              if (St(i3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, W: function(t4) {
            var e4 = Tt();
            try {
              return It(t4);
            } catch (t5) {
              if (St(e4), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, Y: function(t4, e4) {
            var n3 = Tt();
            try {
              return Nt(t4, e4);
            } catch (t5) {
              if (St(n3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, T: function(t4, e4, n3) {
            var r4 = Tt();
            try {
              return Dt(t4, e4, n3);
            } catch (t5) {
              if (St(r4), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, f: function(t4) {
            var e4 = Tt();
            try {
              it(t4)();
            } catch (t5) {
              if (St(e4), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, q: function(t4, e4) {
            var n3 = Tt();
            try {
              it(t4)(e4);
            } catch (t5) {
              if (St(n3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, h: function(t4, e4, n3) {
            var r4 = Tt();
            try {
              it(t4)(e4, n3);
            } catch (t5) {
              if (St(r4), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, da: function(t4, e4, n3, r4) {
            var i3 = Tt();
            try {
              it(t4)(e4, n3, r4);
            } catch (t5) {
              if (St(i3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, l: function(t4, e4, n3, r4) {
            var i3 = Tt();
            try {
              it(t4)(e4, n3, r4);
            } catch (t5) {
              if (St(i3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, t: function(t4, e4, n3, r4, i3) {
            var o3 = Tt();
            try {
              it(t4)(e4, n3, r4, i3);
            } catch (t5) {
              if (St(o3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, u: function(t4, e4, n3, r4, i3, o3) {
            var a3 = Tt();
            try {
              it(t4)(e4, n3, r4, i3, o3);
            } catch (t5) {
              if (St(a3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, x: function(t4, e4, n3, r4, i3, o3, a3) {
            var s3 = Tt();
            try {
              it(t4)(e4, n3, r4, i3, o3, a3);
            } catch (t5) {
              if (St(s3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, z: function(t4, e4, n3, r4, i3, o3, a3, s3) {
            var u3 = Tt();
            try {
              it(t4)(e4, n3, r4, i3, o3, a3, s3);
            } catch (t5) {
              if (St(u3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, ga: function(t4, e4, n3, r4, i3, o3, a3, s3, u3) {
            var c3 = Tt();
            try {
              it(t4)(e4, n3, r4, i3, o3, a3, s3, u3);
            } catch (t5) {
              if (St(c3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, A: function(t4, e4, n3, r4, i3, o3, a3, s3, u3, c3, l3) {
            var p2 = Tt();
            try {
              it(t4)(e4, n3, r4, i3, o3, a3, s3, u3, c3, l3);
            } catch (t5) {
              if (St(p2), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, C: function(t4, e4, n3, r4, i3, o3, a3, s3, u3, c3, l3, p2, f2, d3, h3, g3) {
            var b3 = Tt();
            try {
              it(t4)(e4, n3, r4, i3, o3, a3, s3, u3, c3, l3, p2, f2, d3, h3, g3);
            } catch (t5) {
              if (St(b3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, aa: function(t4, e4, n3, r4, i3, o3, a3, s3) {
            var u3 = Tt();
            try {
              $t(t4, e4, n3, r4, i3, o3, a3, s3);
            } catch (t5) {
              if (St(u3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, _: function(t4, e4, n3, r4, i3, o3, a3, s3, u3, c3, l3, p2) {
            var f2 = Tt();
            try {
              Ct(t4, e4, n3, r4, i3, o3, a3, s3, u3, c3, l3, p2);
            } catch (t5) {
              if (St(f2), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, $: function(t4, e4, n3, r4, i3, o3) {
            var a3 = Tt();
            try {
              kt(t4, e4, n3, r4, i3, o3);
            } catch (t5) {
              if (St(a3), t5 !== t5 + 0)
                throw t5;
              xt(1, 0);
            }
          }, n: function(t4) {
            return t4;
          }, F: function(t4) {
            pt = t4;
          }, ha: gt, y: function(t4, e4, n3, r4) {
            return gt(t4, e4, n3, r4);
          }};
          !function() {
            function t4(t5) {
              e3.asm = t5.exports, x2 = e3.asm.Ka, F2(), N2 = e3.asm.ib, R2.unshift(e3.asm.La), z2--, e3.monitorRunDependencies && e3.monitorRunDependencies(z2), z2 == 0 && (G2 !== null && (clearInterval(G2), G2 = null), H2 && (t5 = H2, H2 = null, t5()));
            }
            function n3(e4) {
              t4(e4.instance);
            }
            function r4(t5) {
              return function() {
                if (!y2 && (h2 || g2)) {
                  if (typeof fetch == "function" && !B2.startsWith("file://"))
                    return fetch(B2, {credentials: "same-origin"}).then(function(t6) {
                      if (!t6.ok)
                        throw "failed to load wasm binary file at '" + B2 + "'";
                      return t6.arrayBuffer();
                    }).catch(function() {
                      return Y2();
                    });
                  if (a2)
                    return new Promise(function(t6, e4) {
                      a2(B2, function(e5) {
                        t6(new Uint8Array(e5));
                      }, e4);
                    });
                }
                return Promise.resolve().then(function() {
                  return Y2();
                });
              }().then(function(t6) {
                return WebAssembly.instantiate(t6, o3);
              }).then(function(t6) {
                return t6;
              }).then(t5, function(t6) {
                v2("failed to asynchronously prepare wasm: " + t6), W2(t6);
              });
            }
            var o3 = {a: bt};
            if (z2++, e3.monitorRunDependencies && e3.monitorRunDependencies(z2), e3.instantiateWasm)
              try {
                return e3.instantiateWasm(o3, t4);
              } catch (t5) {
                return v2("Module.instantiateWasm callback failed with error: " + t5), false;
              }
            (y2 || typeof WebAssembly.instantiateStreaming != "function" || q2() || B2.startsWith("file://") || b2 || typeof fetch != "function" ? r4(n3) : fetch(B2, {credentials: "same-origin"}).then(function(t5) {
              return WebAssembly.instantiateStreaming(t5, o3).then(n3, function(t6) {
                return v2("wasm streaming compile failed: " + t6), v2("falling back to ArrayBuffer instantiation"), r4(n3);
              });
            })).catch(i2);
          }(), e3.___wasm_call_ctors = function() {
            return (e3.___wasm_call_ctors = e3.asm.La).apply(null, arguments);
          }, e3._OrtInit = function() {
            return (e3._OrtInit = e3.asm.Ma).apply(null, arguments);
          }, e3._OrtCreateSessionOptions = function() {
            return (e3._OrtCreateSessionOptions = e3.asm.Na).apply(null, arguments);
          }, e3._OrtAppendExecutionProvider = function() {
            return (e3._OrtAppendExecutionProvider = e3.asm.Oa).apply(null, arguments);
          }, e3._OrtAddSessionConfigEntry = function() {
            return (e3._OrtAddSessionConfigEntry = e3.asm.Pa).apply(null, arguments);
          }, e3._OrtReleaseSessionOptions = function() {
            return (e3._OrtReleaseSessionOptions = e3.asm.Qa).apply(null, arguments);
          }, e3._OrtCreateSession = function() {
            return (e3._OrtCreateSession = e3.asm.Ra).apply(null, arguments);
          }, e3._OrtReleaseSession = function() {
            return (e3._OrtReleaseSession = e3.asm.Sa).apply(null, arguments);
          }, e3._OrtGetInputCount = function() {
            return (e3._OrtGetInputCount = e3.asm.Ta).apply(null, arguments);
          }, e3._OrtGetOutputCount = function() {
            return (e3._OrtGetOutputCount = e3.asm.Ua).apply(null, arguments);
          }, e3._OrtGetInputName = function() {
            return (e3._OrtGetInputName = e3.asm.Va).apply(null, arguments);
          }, e3._OrtGetOutputName = function() {
            return (e3._OrtGetOutputName = e3.asm.Wa).apply(null, arguments);
          }, e3._OrtFree = function() {
            return (e3._OrtFree = e3.asm.Xa).apply(null, arguments);
          }, e3._OrtCreateTensor = function() {
            return (e3._OrtCreateTensor = e3.asm.Ya).apply(null, arguments);
          }, e3._OrtGetTensorData = function() {
            return (e3._OrtGetTensorData = e3.asm.Za).apply(null, arguments);
          }, e3._OrtReleaseTensor = function() {
            return (e3._OrtReleaseTensor = e3.asm._a).apply(null, arguments);
          }, e3._OrtCreateRunOptions = function() {
            return (e3._OrtCreateRunOptions = e3.asm.$a).apply(null, arguments);
          }, e3._OrtAddRunConfigEntry = function() {
            return (e3._OrtAddRunConfigEntry = e3.asm.ab).apply(null, arguments);
          }, e3._OrtReleaseRunOptions = function() {
            return (e3._OrtReleaseRunOptions = e3.asm.bb).apply(null, arguments);
          }, e3._OrtRun = function() {
            return (e3._OrtRun = e3.asm.cb).apply(null, arguments);
          }, e3._OrtEndProfiling = function() {
            return (e3._OrtEndProfiling = e3.asm.db).apply(null, arguments);
          };
          var mt, yt = e3._malloc = function() {
            return (yt = e3._malloc = e3.asm.eb).apply(null, arguments);
          }, _t = e3._free = function() {
            return (_t = e3._free = e3.asm.fb).apply(null, arguments);
          }, vt = e3._fflush = function() {
            return (vt = e3._fflush = e3.asm.gb).apply(null, arguments);
          }, wt = e3.___funcs_on_exit = function() {
            return (wt = e3.___funcs_on_exit = e3.asm.hb).apply(null, arguments);
          }, xt = e3._setThrew = function() {
            return (xt = e3._setThrew = e3.asm.jb).apply(null, arguments);
          }, Tt = e3.stackSave = function() {
            return (Tt = e3.stackSave = e3.asm.kb).apply(null, arguments);
          }, St = e3.stackRestore = function() {
            return (St = e3.stackRestore = e3.asm.lb).apply(null, arguments);
          }, Ot = e3.stackAlloc = function() {
            return (Ot = e3.stackAlloc = e3.asm.mb).apply(null, arguments);
          }, At = e3.___cxa_can_catch = function() {
            return (At = e3.___cxa_can_catch = e3.asm.nb).apply(null, arguments);
          }, Et = e3.___cxa_is_pointer_type = function() {
            return (Et = e3.___cxa_is_pointer_type = e3.asm.ob).apply(null, arguments);
          }, It = e3.dynCall_j = function() {
            return (It = e3.dynCall_j = e3.asm.pb).apply(null, arguments);
          }, Pt = e3.dynCall_iiiiij = function() {
            return (Pt = e3.dynCall_iiiiij = e3.asm.qb).apply(null, arguments);
          }, Dt = e3.dynCall_jii = function() {
            return (Dt = e3.dynCall_jii = e3.asm.rb).apply(null, arguments);
          }, $t = e3.dynCall_viiiiij = function() {
            return ($t = e3.dynCall_viiiiij = e3.asm.sb).apply(null, arguments);
          }, kt = e3.dynCall_vjji = function() {
            return (kt = e3.dynCall_vjji = e3.asm.tb).apply(null, arguments);
          }, Ct = e3.dynCall_viiijjjii = function() {
            return (Ct = e3.dynCall_viiijjjii = e3.asm.ub).apply(null, arguments);
          }, Ft = e3.dynCall_iij = function() {
            return (Ft = e3.dynCall_iij = e3.asm.vb).apply(null, arguments);
          }, Nt = e3.dynCall_ji = function() {
            return (Nt = e3.dynCall_ji = e3.asm.wb).apply(null, arguments);
          }, Lt = e3.dynCall_iiiiiij = function() {
            return (Lt = e3.dynCall_iiiiiij = e3.asm.xb).apply(null, arguments);
          }, Rt = e3.dynCall_iiij = function() {
            return (Rt = e3.dynCall_iiij = e3.asm.yb).apply(null, arguments);
          };
          function jt() {
            function t4() {
              if (!mt && (mt = true, e3.calledRun = true, !I2)) {
                if (Z2(R2), r3(e3), e3.onRuntimeInitialized && e3.onRuntimeInitialized(), e3.postRun)
                  for (typeof e3.postRun == "function" && (e3.postRun = [e3.postRun]); e3.postRun.length; ) {
                    var t5 = e3.postRun.shift();
                    M2.unshift(t5);
                  }
                Z2(M2);
              }
            }
            if (!(0 < z2)) {
              if (e3.preRun)
                for (typeof e3.preRun == "function" && (e3.preRun = [e3.preRun]); e3.preRun.length; )
                  V2();
              Z2(L2), 0 < z2 || (e3.setStatus ? (e3.setStatus("Running..."), setTimeout(function() {
                setTimeout(function() {
                  e3.setStatus("");
                }, 1), t4();
              }, 1)) : t4());
            }
          }
          if (e3.UTF8ToString = $2, e3.stringToUTF8 = function(t4, e4, n3) {
            return k2(t4, O, e4, n3);
          }, e3.lengthBytesUTF8 = C, e3.stackSave = Tt, e3.stackRestore = St, e3.stackAlloc = Ot, H2 = function t4() {
            mt || jt(), mt || (H2 = t4);
          }, e3.preInit)
            for (typeof e3.preInit == "function" && (e3.preInit = [e3.preInit]); 0 < e3.preInit.length; )
              e3.preInit.pop()();
          return jt(), t3.ready;
        });
        t2.exports = r2;
      }, 4537: (t2) => {
        "use strict";
        t2.exports = function(t3, e2) {
          for (var n2 = new Array(arguments.length - 1), r2 = 0, i2 = 2, o2 = true; i2 < arguments.length; )
            n2[r2++] = arguments[i2++];
          return new Promise(function(i3, a2) {
            n2[r2] = function(t4) {
              if (o2)
                if (o2 = false, t4)
                  a2(t4);
                else {
                  for (var e3 = new Array(arguments.length - 1), n3 = 0; n3 < e3.length; )
                    e3[n3++] = arguments[n3];
                  i3.apply(null, e3);
                }
            };
            try {
              t3.apply(e2 || null, n2);
            } catch (t4) {
              o2 && (o2 = false, a2(t4));
            }
          });
        };
      }, 7419: (t2, e2) => {
        "use strict";
        var n2 = e2;
        n2.length = function(t3) {
          var e3 = t3.length;
          if (!e3)
            return 0;
          for (var n3 = 0; --e3 % 4 > 1 && t3.charAt(e3) === "="; )
            ++n3;
          return Math.ceil(3 * t3.length) / 4 - n3;
        };
        for (var r2 = new Array(64), i2 = new Array(123), o2 = 0; o2 < 64; )
          i2[r2[o2] = o2 < 26 ? o2 + 65 : o2 < 52 ? o2 + 71 : o2 < 62 ? o2 - 4 : o2 - 59 | 43] = o2++;
        n2.encode = function(t3, e3, n3) {
          for (var i3, o3 = null, a3 = [], s2 = 0, u2 = 0; e3 < n3; ) {
            var c2 = t3[e3++];
            switch (u2) {
              case 0:
                a3[s2++] = r2[c2 >> 2], i3 = (3 & c2) << 4, u2 = 1;
                break;
              case 1:
                a3[s2++] = r2[i3 | c2 >> 4], i3 = (15 & c2) << 2, u2 = 2;
                break;
              case 2:
                a3[s2++] = r2[i3 | c2 >> 6], a3[s2++] = r2[63 & c2], u2 = 0;
            }
            s2 > 8191 && ((o3 || (o3 = [])).push(String.fromCharCode.apply(String, a3)), s2 = 0);
          }
          return u2 && (a3[s2++] = r2[i3], a3[s2++] = 61, u2 === 1 && (a3[s2++] = 61)), o3 ? (s2 && o3.push(String.fromCharCode.apply(String, a3.slice(0, s2))), o3.join("")) : String.fromCharCode.apply(String, a3.slice(0, s2));
        };
        var a2 = "invalid encoding";
        n2.decode = function(t3, e3, n3) {
          for (var r3, o3 = n3, s2 = 0, u2 = 0; u2 < t3.length; ) {
            var c2 = t3.charCodeAt(u2++);
            if (c2 === 61 && s2 > 1)
              break;
            if ((c2 = i2[c2]) === void 0)
              throw Error(a2);
            switch (s2) {
              case 0:
                r3 = c2, s2 = 1;
                break;
              case 1:
                e3[n3++] = r3 << 2 | (48 & c2) >> 4, r3 = c2, s2 = 2;
                break;
              case 2:
                e3[n3++] = (15 & r3) << 4 | (60 & c2) >> 2, r3 = c2, s2 = 3;
                break;
              case 3:
                e3[n3++] = (3 & r3) << 6 | c2, s2 = 0;
            }
          }
          if (s2 === 1)
            throw Error(a2);
          return n3 - o3;
        }, n2.test = function(t3) {
          return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t3);
        };
      }, 9211: (t2) => {
        "use strict";
        function e2() {
          this._listeners = {};
        }
        t2.exports = e2, e2.prototype.on = function(t3, e3, n2) {
          return (this._listeners[t3] || (this._listeners[t3] = [])).push({fn: e3, ctx: n2 || this}), this;
        }, e2.prototype.off = function(t3, e3) {
          if (t3 === void 0)
            this._listeners = {};
          else if (e3 === void 0)
            this._listeners[t3] = [];
          else
            for (var n2 = this._listeners[t3], r2 = 0; r2 < n2.length; )
              n2[r2].fn === e3 ? n2.splice(r2, 1) : ++r2;
          return this;
        }, e2.prototype.emit = function(t3) {
          var e3 = this._listeners[t3];
          if (e3) {
            for (var n2 = [], r2 = 1; r2 < arguments.length; )
              n2.push(arguments[r2++]);
            for (r2 = 0; r2 < e3.length; )
              e3[r2].fn.apply(e3[r2++].ctx, n2);
          }
          return this;
        };
      }, 945: (t2) => {
        "use strict";
        function e2(t3) {
          return typeof Float32Array != "undefined" ? function() {
            var e3 = new Float32Array([-0]), n3 = new Uint8Array(e3.buffer), r3 = n3[3] === 128;
            function i3(t4, r4, i4) {
              e3[0] = t4, r4[i4] = n3[0], r4[i4 + 1] = n3[1], r4[i4 + 2] = n3[2], r4[i4 + 3] = n3[3];
            }
            function o3(t4, r4, i4) {
              e3[0] = t4, r4[i4] = n3[3], r4[i4 + 1] = n3[2], r4[i4 + 2] = n3[1], r4[i4 + 3] = n3[0];
            }
            function a2(t4, r4) {
              return n3[0] = t4[r4], n3[1] = t4[r4 + 1], n3[2] = t4[r4 + 2], n3[3] = t4[r4 + 3], e3[0];
            }
            function s2(t4, r4) {
              return n3[3] = t4[r4], n3[2] = t4[r4 + 1], n3[1] = t4[r4 + 2], n3[0] = t4[r4 + 3], e3[0];
            }
            t3.writeFloatLE = r3 ? i3 : o3, t3.writeFloatBE = r3 ? o3 : i3, t3.readFloatLE = r3 ? a2 : s2, t3.readFloatBE = r3 ? s2 : a2;
          }() : function() {
            function e3(t4, e4, n3, r3) {
              var i3 = e4 < 0 ? 1 : 0;
              if (i3 && (e4 = -e4), e4 === 0)
                t4(1 / e4 > 0 ? 0 : 2147483648, n3, r3);
              else if (isNaN(e4))
                t4(2143289344, n3, r3);
              else if (e4 > 34028234663852886e22)
                t4((i3 << 31 | 2139095040) >>> 0, n3, r3);
              else if (e4 < 11754943508222875e-54)
                t4((i3 << 31 | Math.round(e4 / 1401298464324817e-60)) >>> 0, n3, r3);
              else {
                var o3 = Math.floor(Math.log(e4) / Math.LN2);
                t4((i3 << 31 | o3 + 127 << 23 | 8388607 & Math.round(e4 * Math.pow(2, -o3) * 8388608)) >>> 0, n3, r3);
              }
            }
            function a2(t4, e4, n3) {
              var r3 = t4(e4, n3), i3 = 2 * (r3 >> 31) + 1, o3 = r3 >>> 23 & 255, a3 = 8388607 & r3;
              return o3 === 255 ? a3 ? NaN : i3 * (1 / 0) : o3 === 0 ? 1401298464324817e-60 * i3 * a3 : i3 * Math.pow(2, o3 - 150) * (a3 + 8388608);
            }
            t3.writeFloatLE = e3.bind(null, n2), t3.writeFloatBE = e3.bind(null, r2), t3.readFloatLE = a2.bind(null, i2), t3.readFloatBE = a2.bind(null, o2);
          }(), typeof Float64Array != "undefined" ? function() {
            var e3 = new Float64Array([-0]), n3 = new Uint8Array(e3.buffer), r3 = n3[7] === 128;
            function i3(t4, r4, i4) {
              e3[0] = t4, r4[i4] = n3[0], r4[i4 + 1] = n3[1], r4[i4 + 2] = n3[2], r4[i4 + 3] = n3[3], r4[i4 + 4] = n3[4], r4[i4 + 5] = n3[5], r4[i4 + 6] = n3[6], r4[i4 + 7] = n3[7];
            }
            function o3(t4, r4, i4) {
              e3[0] = t4, r4[i4] = n3[7], r4[i4 + 1] = n3[6], r4[i4 + 2] = n3[5], r4[i4 + 3] = n3[4], r4[i4 + 4] = n3[3], r4[i4 + 5] = n3[2], r4[i4 + 6] = n3[1], r4[i4 + 7] = n3[0];
            }
            function a2(t4, r4) {
              return n3[0] = t4[r4], n3[1] = t4[r4 + 1], n3[2] = t4[r4 + 2], n3[3] = t4[r4 + 3], n3[4] = t4[r4 + 4], n3[5] = t4[r4 + 5], n3[6] = t4[r4 + 6], n3[7] = t4[r4 + 7], e3[0];
            }
            function s2(t4, r4) {
              return n3[7] = t4[r4], n3[6] = t4[r4 + 1], n3[5] = t4[r4 + 2], n3[4] = t4[r4 + 3], n3[3] = t4[r4 + 4], n3[2] = t4[r4 + 5], n3[1] = t4[r4 + 6], n3[0] = t4[r4 + 7], e3[0];
            }
            t3.writeDoubleLE = r3 ? i3 : o3, t3.writeDoubleBE = r3 ? o3 : i3, t3.readDoubleLE = r3 ? a2 : s2, t3.readDoubleBE = r3 ? s2 : a2;
          }() : function() {
            function e3(t4, e4, n3, r3, i3, o3) {
              var a3 = r3 < 0 ? 1 : 0;
              if (a3 && (r3 = -r3), r3 === 0)
                t4(0, i3, o3 + e4), t4(1 / r3 > 0 ? 0 : 2147483648, i3, o3 + n3);
              else if (isNaN(r3))
                t4(0, i3, o3 + e4), t4(2146959360, i3, o3 + n3);
              else if (r3 > 17976931348623157e292)
                t4(0, i3, o3 + e4), t4((a3 << 31 | 2146435072) >>> 0, i3, o3 + n3);
              else {
                var s2;
                if (r3 < 22250738585072014e-324)
                  t4((s2 = r3 / 5e-324) >>> 0, i3, o3 + e4), t4((a3 << 31 | s2 / 4294967296) >>> 0, i3, o3 + n3);
                else {
                  var u2 = Math.floor(Math.log(r3) / Math.LN2);
                  u2 === 1024 && (u2 = 1023), t4(4503599627370496 * (s2 = r3 * Math.pow(2, -u2)) >>> 0, i3, o3 + e4), t4((a3 << 31 | u2 + 1023 << 20 | 1048576 * s2 & 1048575) >>> 0, i3, o3 + n3);
                }
              }
            }
            function a2(t4, e4, n3, r3, i3) {
              var o3 = t4(r3, i3 + e4), a3 = t4(r3, i3 + n3), s2 = 2 * (a3 >> 31) + 1, u2 = a3 >>> 20 & 2047, c2 = 4294967296 * (1048575 & a3) + o3;
              return u2 === 2047 ? c2 ? NaN : s2 * (1 / 0) : u2 === 0 ? 5e-324 * s2 * c2 : s2 * Math.pow(2, u2 - 1075) * (c2 + 4503599627370496);
            }
            t3.writeDoubleLE = e3.bind(null, n2, 0, 4), t3.writeDoubleBE = e3.bind(null, r2, 4, 0), t3.readDoubleLE = a2.bind(null, i2, 0, 4), t3.readDoubleBE = a2.bind(null, o2, 4, 0);
          }(), t3;
        }
        function n2(t3, e3, n3) {
          e3[n3] = 255 & t3, e3[n3 + 1] = t3 >>> 8 & 255, e3[n3 + 2] = t3 >>> 16 & 255, e3[n3 + 3] = t3 >>> 24;
        }
        function r2(t3, e3, n3) {
          e3[n3] = t3 >>> 24, e3[n3 + 1] = t3 >>> 16 & 255, e3[n3 + 2] = t3 >>> 8 & 255, e3[n3 + 3] = 255 & t3;
        }
        function i2(t3, e3) {
          return (t3[e3] | t3[e3 + 1] << 8 | t3[e3 + 2] << 16 | t3[e3 + 3] << 24) >>> 0;
        }
        function o2(t3, e3) {
          return (t3[e3] << 24 | t3[e3 + 1] << 16 | t3[e3 + 2] << 8 | t3[e3 + 3]) >>> 0;
        }
        t2.exports = e2(e2);
      }, 7199: (module) => {
        "use strict";
        function inquire(moduleName) {
          try {
            var mod = eval("quire".replace(/^/, "re"))(moduleName);
            if (mod && (mod.length || Object.keys(mod).length))
              return mod;
          } catch (t2) {
          }
          return null;
        }
        module.exports = inquire;
      }, 6662: (t2) => {
        "use strict";
        t2.exports = function(t3, e2, n2) {
          var r2 = n2 || 8192, i2 = r2 >>> 1, o2 = null, a2 = r2;
          return function(n3) {
            if (n3 < 1 || n3 > i2)
              return t3(n3);
            a2 + n3 > r2 && (o2 = t3(r2), a2 = 0);
            var s2 = e2.call(o2, a2, a2 += n3);
            return 7 & a2 && (a2 = 1 + (7 | a2)), s2;
          };
        };
      }, 4997: (t2, e2) => {
        "use strict";
        var n2 = e2;
        n2.length = function(t3) {
          for (var e3 = 0, n3 = 0, r2 = 0; r2 < t3.length; ++r2)
            (n3 = t3.charCodeAt(r2)) < 128 ? e3 += 1 : n3 < 2048 ? e3 += 2 : (64512 & n3) == 55296 && (64512 & t3.charCodeAt(r2 + 1)) == 56320 ? (++r2, e3 += 4) : e3 += 3;
          return e3;
        }, n2.read = function(t3, e3, n3) {
          if (n3 - e3 < 1)
            return "";
          for (var r2, i2 = null, o2 = [], a2 = 0; e3 < n3; )
            (r2 = t3[e3++]) < 128 ? o2[a2++] = r2 : r2 > 191 && r2 < 224 ? o2[a2++] = (31 & r2) << 6 | 63 & t3[e3++] : r2 > 239 && r2 < 365 ? (r2 = ((7 & r2) << 18 | (63 & t3[e3++]) << 12 | (63 & t3[e3++]) << 6 | 63 & t3[e3++]) - 65536, o2[a2++] = 55296 + (r2 >> 10), o2[a2++] = 56320 + (1023 & r2)) : o2[a2++] = (15 & r2) << 12 | (63 & t3[e3++]) << 6 | 63 & t3[e3++], a2 > 8191 && ((i2 || (i2 = [])).push(String.fromCharCode.apply(String, o2)), a2 = 0);
          return i2 ? (a2 && i2.push(String.fromCharCode.apply(String, o2.slice(0, a2))), i2.join("")) : String.fromCharCode.apply(String, o2.slice(0, a2));
        }, n2.write = function(t3, e3, n3) {
          for (var r2, i2, o2 = n3, a2 = 0; a2 < t3.length; ++a2)
            (r2 = t3.charCodeAt(a2)) < 128 ? e3[n3++] = r2 : r2 < 2048 ? (e3[n3++] = r2 >> 6 | 192, e3[n3++] = 63 & r2 | 128) : (64512 & r2) == 55296 && (64512 & (i2 = t3.charCodeAt(a2 + 1))) == 56320 ? (r2 = 65536 + ((1023 & r2) << 10) + (1023 & i2), ++a2, e3[n3++] = r2 >> 18 | 240, e3[n3++] = r2 >> 12 & 63 | 128, e3[n3++] = r2 >> 6 & 63 | 128, e3[n3++] = 63 & r2 | 128) : (e3[n3++] = r2 >> 12 | 224, e3[n3++] = r2 >> 6 & 63 | 128, e3[n3++] = 63 & r2 | 128);
          return n3 - o2;
        };
      }, 3442: (t2, e2) => {
        "use strict";
        e2.__esModule = true;
        var n2 = function() {
          function t3(e3) {
            if (!e3)
              throw new TypeError("Invalid argument; `value` has no value.");
            this.value = t3.EMPTY, e3 && t3.isGuid(e3) && (this.value = e3);
          }
          return t3.isGuid = function(e3) {
            var n3 = e3.toString();
            return e3 && (e3 instanceof t3 || t3.validator.test(n3));
          }, t3.create = function() {
            return new t3([t3.gen(2), t3.gen(1), t3.gen(1), t3.gen(1), t3.gen(3)].join("-"));
          }, t3.createEmpty = function() {
            return new t3("emptyguid");
          }, t3.parse = function(e3) {
            return new t3(e3);
          }, t3.raw = function() {
            return [t3.gen(2), t3.gen(1), t3.gen(1), t3.gen(1), t3.gen(3)].join("-");
          }, t3.gen = function(t4) {
            for (var e3 = "", n3 = 0; n3 < t4; n3++)
              e3 += (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
            return e3;
          }, t3.prototype.equals = function(e3) {
            return t3.isGuid(e3) && this.value === e3.toString();
          }, t3.prototype.isEmpty = function() {
            return this.value === t3.EMPTY;
          }, t3.prototype.toString = function() {
            return this.value;
          }, t3.prototype.toJSON = function() {
            return {value: this.value};
          }, t3.validator = new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$", "i"), t3.EMPTY = "00000000-0000-0000-0000-000000000000", t3;
        }();
        e2.Guid = n2;
      }, 3720: (t2) => {
        t2.exports = n2;
        var e2 = null;
        try {
          e2 = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
        } catch (t3) {
        }
        function n2(t3, e3, n3) {
          this.low = 0 | t3, this.high = 0 | e3, this.unsigned = !!n3;
        }
        function r2(t3) {
          return (t3 && t3.__isLong__) === true;
        }
        n2.prototype.__isLong__, Object.defineProperty(n2.prototype, "__isLong__", {value: true}), n2.isLong = r2;
        var i2 = {}, o2 = {};
        function a2(t3, e3) {
          var n3, r3, a3;
          return e3 ? (a3 = 0 <= (t3 >>>= 0) && t3 < 256) && (r3 = o2[t3]) ? r3 : (n3 = u2(t3, (0 | t3) < 0 ? -1 : 0, true), a3 && (o2[t3] = n3), n3) : (a3 = -128 <= (t3 |= 0) && t3 < 128) && (r3 = i2[t3]) ? r3 : (n3 = u2(t3, t3 < 0 ? -1 : 0, false), a3 && (i2[t3] = n3), n3);
        }
        function s2(t3, e3) {
          if (isNaN(t3))
            return e3 ? m : b2;
          if (e3) {
            if (t3 < 0)
              return m;
            if (t3 >= d2)
              return x2;
          } else {
            if (t3 <= -h2)
              return T2;
            if (t3 + 1 >= h2)
              return w2;
          }
          return t3 < 0 ? s2(-t3, e3).neg() : u2(t3 % f | 0, t3 / f | 0, e3);
        }
        function u2(t3, e3, r3) {
          return new n2(t3, e3, r3);
        }
        n2.fromInt = a2, n2.fromNumber = s2, n2.fromBits = u2;
        var c2 = Math.pow;
        function l2(t3, e3, n3) {
          if (t3.length === 0)
            throw Error("empty string");
          if (t3 === "NaN" || t3 === "Infinity" || t3 === "+Infinity" || t3 === "-Infinity")
            return b2;
          if (typeof e3 == "number" ? (n3 = e3, e3 = false) : e3 = !!e3, (n3 = n3 || 10) < 2 || 36 < n3)
            throw RangeError("radix");
          var r3;
          if ((r3 = t3.indexOf("-")) > 0)
            throw Error("interior hyphen");
          if (r3 === 0)
            return l2(t3.substring(1), e3, n3).neg();
          for (var i3 = s2(c2(n3, 8)), o3 = b2, a3 = 0; a3 < t3.length; a3 += 8) {
            var u3 = Math.min(8, t3.length - a3), p2 = parseInt(t3.substring(a3, a3 + u3), n3);
            if (u3 < 8) {
              var f2 = s2(c2(n3, u3));
              o3 = o3.mul(f2).add(s2(p2));
            } else
              o3 = (o3 = o3.mul(i3)).add(s2(p2));
          }
          return o3.unsigned = e3, o3;
        }
        function p(t3, e3) {
          return typeof t3 == "number" ? s2(t3, e3) : typeof t3 == "string" ? l2(t3, e3) : u2(t3.low, t3.high, typeof e3 == "boolean" ? e3 : t3.unsigned);
        }
        n2.fromString = l2, n2.fromValue = p;
        var f = 4294967296, d2 = f * f, h2 = d2 / 2, g2 = a2(1 << 24), b2 = a2(0);
        n2.ZERO = b2;
        var m = a2(0, true);
        n2.UZERO = m;
        var y2 = a2(1);
        n2.ONE = y2;
        var _2 = a2(1, true);
        n2.UONE = _2;
        var v2 = a2(-1);
        n2.NEG_ONE = v2;
        var w2 = u2(-1, 2147483647, false);
        n2.MAX_VALUE = w2;
        var x2 = u2(-1, -1, true);
        n2.MAX_UNSIGNED_VALUE = x2;
        var T2 = u2(0, -2147483648, false);
        n2.MIN_VALUE = T2;
        var S2 = n2.prototype;
        S2.toInt = function() {
          return this.unsigned ? this.low >>> 0 : this.low;
        }, S2.toNumber = function() {
          return this.unsigned ? (this.high >>> 0) * f + (this.low >>> 0) : this.high * f + (this.low >>> 0);
        }, S2.toString = function(t3) {
          if ((t3 = t3 || 10) < 2 || 36 < t3)
            throw RangeError("radix");
          if (this.isZero())
            return "0";
          if (this.isNegative()) {
            if (this.eq(T2)) {
              var e3 = s2(t3), n3 = this.div(e3), r3 = n3.mul(e3).sub(this);
              return n3.toString(t3) + r3.toInt().toString(t3);
            }
            return "-" + this.neg().toString(t3);
          }
          for (var i3 = s2(c2(t3, 6), this.unsigned), o3 = this, a3 = ""; ; ) {
            var u3 = o3.div(i3), l3 = (o3.sub(u3.mul(i3)).toInt() >>> 0).toString(t3);
            if ((o3 = u3).isZero())
              return l3 + a3;
            for (; l3.length < 6; )
              l3 = "0" + l3;
            a3 = "" + l3 + a3;
          }
        }, S2.getHighBits = function() {
          return this.high;
        }, S2.getHighBitsUnsigned = function() {
          return this.high >>> 0;
        }, S2.getLowBits = function() {
          return this.low;
        }, S2.getLowBitsUnsigned = function() {
          return this.low >>> 0;
        }, S2.getNumBitsAbs = function() {
          if (this.isNegative())
            return this.eq(T2) ? 64 : this.neg().getNumBitsAbs();
          for (var t3 = this.high != 0 ? this.high : this.low, e3 = 31; e3 > 0 && (t3 & 1 << e3) == 0; e3--)
            ;
          return this.high != 0 ? e3 + 33 : e3 + 1;
        }, S2.isZero = function() {
          return this.high === 0 && this.low === 0;
        }, S2.eqz = S2.isZero, S2.isNegative = function() {
          return !this.unsigned && this.high < 0;
        }, S2.isPositive = function() {
          return this.unsigned || this.high >= 0;
        }, S2.isOdd = function() {
          return (1 & this.low) == 1;
        }, S2.isEven = function() {
          return (1 & this.low) == 0;
        }, S2.equals = function(t3) {
          return r2(t3) || (t3 = p(t3)), (this.unsigned === t3.unsigned || this.high >>> 31 != 1 || t3.high >>> 31 != 1) && this.high === t3.high && this.low === t3.low;
        }, S2.eq = S2.equals, S2.notEquals = function(t3) {
          return !this.eq(t3);
        }, S2.neq = S2.notEquals, S2.ne = S2.notEquals, S2.lessThan = function(t3) {
          return this.comp(t3) < 0;
        }, S2.lt = S2.lessThan, S2.lessThanOrEqual = function(t3) {
          return this.comp(t3) <= 0;
        }, S2.lte = S2.lessThanOrEqual, S2.le = S2.lessThanOrEqual, S2.greaterThan = function(t3) {
          return this.comp(t3) > 0;
        }, S2.gt = S2.greaterThan, S2.greaterThanOrEqual = function(t3) {
          return this.comp(t3) >= 0;
        }, S2.gte = S2.greaterThanOrEqual, S2.ge = S2.greaterThanOrEqual, S2.compare = function(t3) {
          if (r2(t3) || (t3 = p(t3)), this.eq(t3))
            return 0;
          var e3 = this.isNegative(), n3 = t3.isNegative();
          return e3 && !n3 ? -1 : !e3 && n3 ? 1 : this.unsigned ? t3.high >>> 0 > this.high >>> 0 || t3.high === this.high && t3.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(t3).isNegative() ? -1 : 1;
        }, S2.comp = S2.compare, S2.negate = function() {
          return !this.unsigned && this.eq(T2) ? T2 : this.not().add(y2);
        }, S2.neg = S2.negate, S2.add = function(t3) {
          r2(t3) || (t3 = p(t3));
          var e3 = this.high >>> 16, n3 = 65535 & this.high, i3 = this.low >>> 16, o3 = 65535 & this.low, a3 = t3.high >>> 16, s3 = 65535 & t3.high, c3 = t3.low >>> 16, l3 = 0, f2 = 0, d3 = 0, h3 = 0;
          return d3 += (h3 += o3 + (65535 & t3.low)) >>> 16, f2 += (d3 += i3 + c3) >>> 16, l3 += (f2 += n3 + s3) >>> 16, l3 += e3 + a3, u2((d3 &= 65535) << 16 | (h3 &= 65535), (l3 &= 65535) << 16 | (f2 &= 65535), this.unsigned);
        }, S2.subtract = function(t3) {
          return r2(t3) || (t3 = p(t3)), this.add(t3.neg());
        }, S2.sub = S2.subtract, S2.multiply = function(t3) {
          if (this.isZero())
            return b2;
          if (r2(t3) || (t3 = p(t3)), e2)
            return u2(e2.mul(this.low, this.high, t3.low, t3.high), e2.get_high(), this.unsigned);
          if (t3.isZero())
            return b2;
          if (this.eq(T2))
            return t3.isOdd() ? T2 : b2;
          if (t3.eq(T2))
            return this.isOdd() ? T2 : b2;
          if (this.isNegative())
            return t3.isNegative() ? this.neg().mul(t3.neg()) : this.neg().mul(t3).neg();
          if (t3.isNegative())
            return this.mul(t3.neg()).neg();
          if (this.lt(g2) && t3.lt(g2))
            return s2(this.toNumber() * t3.toNumber(), this.unsigned);
          var n3 = this.high >>> 16, i3 = 65535 & this.high, o3 = this.low >>> 16, a3 = 65535 & this.low, c3 = t3.high >>> 16, l3 = 65535 & t3.high, f2 = t3.low >>> 16, d3 = 65535 & t3.low, h3 = 0, m2 = 0, y3 = 0, _3 = 0;
          return y3 += (_3 += a3 * d3) >>> 16, m2 += (y3 += o3 * d3) >>> 16, y3 &= 65535, m2 += (y3 += a3 * f2) >>> 16, h3 += (m2 += i3 * d3) >>> 16, m2 &= 65535, h3 += (m2 += o3 * f2) >>> 16, m2 &= 65535, h3 += (m2 += a3 * l3) >>> 16, h3 += n3 * d3 + i3 * f2 + o3 * l3 + a3 * c3, u2((y3 &= 65535) << 16 | (_3 &= 65535), (h3 &= 65535) << 16 | (m2 &= 65535), this.unsigned);
        }, S2.mul = S2.multiply, S2.divide = function(t3) {
          if (r2(t3) || (t3 = p(t3)), t3.isZero())
            throw Error("division by zero");
          var n3, i3, o3;
          if (e2)
            return this.unsigned || this.high !== -2147483648 || t3.low !== -1 || t3.high !== -1 ? u2((this.unsigned ? e2.div_u : e2.div_s)(this.low, this.high, t3.low, t3.high), e2.get_high(), this.unsigned) : this;
          if (this.isZero())
            return this.unsigned ? m : b2;
          if (this.unsigned) {
            if (t3.unsigned || (t3 = t3.toUnsigned()), t3.gt(this))
              return m;
            if (t3.gt(this.shru(1)))
              return _2;
            o3 = m;
          } else {
            if (this.eq(T2))
              return t3.eq(y2) || t3.eq(v2) ? T2 : t3.eq(T2) ? y2 : (n3 = this.shr(1).div(t3).shl(1)).eq(b2) ? t3.isNegative() ? y2 : v2 : (i3 = this.sub(t3.mul(n3)), o3 = n3.add(i3.div(t3)));
            if (t3.eq(T2))
              return this.unsigned ? m : b2;
            if (this.isNegative())
              return t3.isNegative() ? this.neg().div(t3.neg()) : this.neg().div(t3).neg();
            if (t3.isNegative())
              return this.div(t3.neg()).neg();
            o3 = b2;
          }
          for (i3 = this; i3.gte(t3); ) {
            n3 = Math.max(1, Math.floor(i3.toNumber() / t3.toNumber()));
            for (var a3 = Math.ceil(Math.log(n3) / Math.LN2), l3 = a3 <= 48 ? 1 : c2(2, a3 - 48), f2 = s2(n3), d3 = f2.mul(t3); d3.isNegative() || d3.gt(i3); )
              d3 = (f2 = s2(n3 -= l3, this.unsigned)).mul(t3);
            f2.isZero() && (f2 = y2), o3 = o3.add(f2), i3 = i3.sub(d3);
          }
          return o3;
        }, S2.div = S2.divide, S2.modulo = function(t3) {
          return r2(t3) || (t3 = p(t3)), e2 ? u2((this.unsigned ? e2.rem_u : e2.rem_s)(this.low, this.high, t3.low, t3.high), e2.get_high(), this.unsigned) : this.sub(this.div(t3).mul(t3));
        }, S2.mod = S2.modulo, S2.rem = S2.modulo, S2.not = function() {
          return u2(~this.low, ~this.high, this.unsigned);
        }, S2.and = function(t3) {
          return r2(t3) || (t3 = p(t3)), u2(this.low & t3.low, this.high & t3.high, this.unsigned);
        }, S2.or = function(t3) {
          return r2(t3) || (t3 = p(t3)), u2(this.low | t3.low, this.high | t3.high, this.unsigned);
        }, S2.xor = function(t3) {
          return r2(t3) || (t3 = p(t3)), u2(this.low ^ t3.low, this.high ^ t3.high, this.unsigned);
        }, S2.shiftLeft = function(t3) {
          return r2(t3) && (t3 = t3.toInt()), (t3 &= 63) == 0 ? this : t3 < 32 ? u2(this.low << t3, this.high << t3 | this.low >>> 32 - t3, this.unsigned) : u2(0, this.low << t3 - 32, this.unsigned);
        }, S2.shl = S2.shiftLeft, S2.shiftRight = function(t3) {
          return r2(t3) && (t3 = t3.toInt()), (t3 &= 63) == 0 ? this : t3 < 32 ? u2(this.low >>> t3 | this.high << 32 - t3, this.high >> t3, this.unsigned) : u2(this.high >> t3 - 32, this.high >= 0 ? 0 : -1, this.unsigned);
        }, S2.shr = S2.shiftRight, S2.shiftRightUnsigned = function(t3) {
          if (r2(t3) && (t3 = t3.toInt()), (t3 &= 63) == 0)
            return this;
          var e3 = this.high;
          return t3 < 32 ? u2(this.low >>> t3 | e3 << 32 - t3, e3 >>> t3, this.unsigned) : u2(t3 === 32 ? e3 : e3 >>> t3 - 32, 0, this.unsigned);
        }, S2.shru = S2.shiftRightUnsigned, S2.shr_u = S2.shiftRightUnsigned, S2.toSigned = function() {
          return this.unsigned ? u2(this.low, this.high, false) : this;
        }, S2.toUnsigned = function() {
          return this.unsigned ? this : u2(this.low, this.high, true);
        }, S2.toBytes = function(t3) {
          return t3 ? this.toBytesLE() : this.toBytesBE();
        }, S2.toBytesLE = function() {
          var t3 = this.high, e3 = this.low;
          return [255 & e3, e3 >>> 8 & 255, e3 >>> 16 & 255, e3 >>> 24, 255 & t3, t3 >>> 8 & 255, t3 >>> 16 & 255, t3 >>> 24];
        }, S2.toBytesBE = function() {
          var t3 = this.high, e3 = this.low;
          return [t3 >>> 24, t3 >>> 16 & 255, t3 >>> 8 & 255, 255 & t3, e3 >>> 24, e3 >>> 16 & 255, e3 >>> 8 & 255, 255 & e3];
        }, n2.fromBytes = function(t3, e3, r3) {
          return r3 ? n2.fromBytesLE(t3, e3) : n2.fromBytesBE(t3, e3);
        }, n2.fromBytesLE = function(t3, e3) {
          return new n2(t3[0] | t3[1] << 8 | t3[2] << 16 | t3[3] << 24, t3[4] | t3[5] << 8 | t3[6] << 16 | t3[7] << 24, e3);
        }, n2.fromBytesBE = function(t3, e3) {
          return new n2(t3[4] << 24 | t3[5] << 16 | t3[6] << 8 | t3[7], t3[0] << 24 | t3[1] << 16 | t3[2] << 8 | t3[3], e3);
        };
      }, 1446: (t2, e2, n2) => {
        "use strict";
        var r2, i2, o2, a2 = n2(2100), s2 = a2.Reader, u2 = a2.Writer, c2 = a2.util, l2 = a2.roots.default || (a2.roots.default = {});
        l2.onnx = ((o2 = {}).Version = (r2 = {}, (i2 = Object.create(r2))[r2[0] = "_START_VERSION"] = 0, i2[r2[1] = "IR_VERSION_2017_10_10"] = 1, i2[r2[2] = "IR_VERSION_2017_10_30"] = 2, i2[r2[3] = "IR_VERSION_2017_11_3"] = 3, i2[r2[4] = "IR_VERSION_2019_1_22"] = 4, i2[r2[5] = "IR_VERSION"] = 5, i2), o2.AttributeProto = function() {
          function t3(t4) {
            if (this.floats = [], this.ints = [], this.strings = [], this.tensors = [], this.graphs = [], t4)
              for (var e3 = Object.keys(t4), n3 = 0; n3 < e3.length; ++n3)
                t4[e3[n3]] != null && (this[e3[n3]] = t4[e3[n3]]);
          }
          return t3.prototype.name = "", t3.prototype.refAttrName = "", t3.prototype.docString = "", t3.prototype.type = 0, t3.prototype.f = 0, t3.prototype.i = c2.Long ? c2.Long.fromBits(0, 0, false) : 0, t3.prototype.s = c2.newBuffer([]), t3.prototype.t = null, t3.prototype.g = null, t3.prototype.floats = c2.emptyArray, t3.prototype.ints = c2.emptyArray, t3.prototype.strings = c2.emptyArray, t3.prototype.tensors = c2.emptyArray, t3.prototype.graphs = c2.emptyArray, t3.create = function(e3) {
            return new t3(e3);
          }, t3.encode = function(t4, e3) {
            if (e3 || (e3 = u2.create()), t4.name != null && t4.hasOwnProperty("name") && e3.uint32(10).string(t4.name), t4.f != null && t4.hasOwnProperty("f") && e3.uint32(21).float(t4.f), t4.i != null && t4.hasOwnProperty("i") && e3.uint32(24).int64(t4.i), t4.s != null && t4.hasOwnProperty("s") && e3.uint32(34).bytes(t4.s), t4.t != null && t4.hasOwnProperty("t") && l2.onnx.TensorProto.encode(t4.t, e3.uint32(42).fork()).ldelim(), t4.g != null && t4.hasOwnProperty("g") && l2.onnx.GraphProto.encode(t4.g, e3.uint32(50).fork()).ldelim(), t4.floats != null && t4.floats.length) {
              e3.uint32(58).fork();
              for (var n3 = 0; n3 < t4.floats.length; ++n3)
                e3.float(t4.floats[n3]);
              e3.ldelim();
            }
            if (t4.ints != null && t4.ints.length) {
              for (e3.uint32(66).fork(), n3 = 0; n3 < t4.ints.length; ++n3)
                e3.int64(t4.ints[n3]);
              e3.ldelim();
            }
            if (t4.strings != null && t4.strings.length)
              for (n3 = 0; n3 < t4.strings.length; ++n3)
                e3.uint32(74).bytes(t4.strings[n3]);
            if (t4.tensors != null && t4.tensors.length)
              for (n3 = 0; n3 < t4.tensors.length; ++n3)
                l2.onnx.TensorProto.encode(t4.tensors[n3], e3.uint32(82).fork()).ldelim();
            if (t4.graphs != null && t4.graphs.length)
              for (n3 = 0; n3 < t4.graphs.length; ++n3)
                l2.onnx.GraphProto.encode(t4.graphs[n3], e3.uint32(90).fork()).ldelim();
            return t4.docString != null && t4.hasOwnProperty("docString") && e3.uint32(106).string(t4.docString), t4.type != null && t4.hasOwnProperty("type") && e3.uint32(160).int32(t4.type), t4.refAttrName != null && t4.hasOwnProperty("refAttrName") && e3.uint32(170).string(t4.refAttrName), e3;
          }, t3.encodeDelimited = function(t4, e3) {
            return this.encode(t4, e3).ldelim();
          }, t3.decode = function(t4, e3) {
            t4 instanceof s2 || (t4 = s2.create(t4));
            for (var n3 = e3 === void 0 ? t4.len : t4.pos + e3, r3 = new l2.onnx.AttributeProto(); t4.pos < n3; ) {
              var i3 = t4.uint32();
              switch (i3 >>> 3) {
                case 1:
                  r3.name = t4.string();
                  break;
                case 21:
                  r3.refAttrName = t4.string();
                  break;
                case 13:
                  r3.docString = t4.string();
                  break;
                case 20:
                  r3.type = t4.int32();
                  break;
                case 2:
                  r3.f = t4.float();
                  break;
                case 3:
                  r3.i = t4.int64();
                  break;
                case 4:
                  r3.s = t4.bytes();
                  break;
                case 5:
                  r3.t = l2.onnx.TensorProto.decode(t4, t4.uint32());
                  break;
                case 6:
                  r3.g = l2.onnx.GraphProto.decode(t4, t4.uint32());
                  break;
                case 7:
                  if (r3.floats && r3.floats.length || (r3.floats = []), (7 & i3) == 2)
                    for (var o3 = t4.uint32() + t4.pos; t4.pos < o3; )
                      r3.floats.push(t4.float());
                  else
                    r3.floats.push(t4.float());
                  break;
                case 8:
                  if (r3.ints && r3.ints.length || (r3.ints = []), (7 & i3) == 2)
                    for (o3 = t4.uint32() + t4.pos; t4.pos < o3; )
                      r3.ints.push(t4.int64());
                  else
                    r3.ints.push(t4.int64());
                  break;
                case 9:
                  r3.strings && r3.strings.length || (r3.strings = []), r3.strings.push(t4.bytes());
                  break;
                case 10:
                  r3.tensors && r3.tensors.length || (r3.tensors = []), r3.tensors.push(l2.onnx.TensorProto.decode(t4, t4.uint32()));
                  break;
                case 11:
                  r3.graphs && r3.graphs.length || (r3.graphs = []), r3.graphs.push(l2.onnx.GraphProto.decode(t4, t4.uint32()));
                  break;
                default:
                  t4.skipType(7 & i3);
              }
            }
            return r3;
          }, t3.decodeDelimited = function(t4) {
            return t4 instanceof s2 || (t4 = new s2(t4)), this.decode(t4, t4.uint32());
          }, t3.verify = function(t4) {
            if (typeof t4 != "object" || t4 === null)
              return "object expected";
            if (t4.name != null && t4.hasOwnProperty("name") && !c2.isString(t4.name))
              return "name: string expected";
            if (t4.refAttrName != null && t4.hasOwnProperty("refAttrName") && !c2.isString(t4.refAttrName))
              return "refAttrName: string expected";
            if (t4.docString != null && t4.hasOwnProperty("docString") && !c2.isString(t4.docString))
              return "docString: string expected";
            if (t4.type != null && t4.hasOwnProperty("type"))
              switch (t4.type) {
                default:
                  return "type: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
              }
            if (t4.f != null && t4.hasOwnProperty("f") && typeof t4.f != "number")
              return "f: number expected";
            if (t4.i != null && t4.hasOwnProperty("i") && !(c2.isInteger(t4.i) || t4.i && c2.isInteger(t4.i.low) && c2.isInteger(t4.i.high)))
              return "i: integer|Long expected";
            if (t4.s != null && t4.hasOwnProperty("s") && !(t4.s && typeof t4.s.length == "number" || c2.isString(t4.s)))
              return "s: buffer expected";
            if (t4.t != null && t4.hasOwnProperty("t") && (n3 = l2.onnx.TensorProto.verify(t4.t)))
              return "t." + n3;
            if (t4.g != null && t4.hasOwnProperty("g") && (n3 = l2.onnx.GraphProto.verify(t4.g)))
              return "g." + n3;
            if (t4.floats != null && t4.hasOwnProperty("floats")) {
              if (!Array.isArray(t4.floats))
                return "floats: array expected";
              for (var e3 = 0; e3 < t4.floats.length; ++e3)
                if (typeof t4.floats[e3] != "number")
                  return "floats: number[] expected";
            }
            if (t4.ints != null && t4.hasOwnProperty("ints")) {
              if (!Array.isArray(t4.ints))
                return "ints: array expected";
              for (e3 = 0; e3 < t4.ints.length; ++e3)
                if (!(c2.isInteger(t4.ints[e3]) || t4.ints[e3] && c2.isInteger(t4.ints[e3].low) && c2.isInteger(t4.ints[e3].high)))
                  return "ints: integer|Long[] expected";
            }
            if (t4.strings != null && t4.hasOwnProperty("strings")) {
              if (!Array.isArray(t4.strings))
                return "strings: array expected";
              for (e3 = 0; e3 < t4.strings.length; ++e3)
                if (!(t4.strings[e3] && typeof t4.strings[e3].length == "number" || c2.isString(t4.strings[e3])))
                  return "strings: buffer[] expected";
            }
            if (t4.tensors != null && t4.hasOwnProperty("tensors")) {
              if (!Array.isArray(t4.tensors))
                return "tensors: array expected";
              for (e3 = 0; e3 < t4.tensors.length; ++e3)
                if (n3 = l2.onnx.TensorProto.verify(t4.tensors[e3]))
                  return "tensors." + n3;
            }
            if (t4.graphs != null && t4.hasOwnProperty("graphs")) {
              if (!Array.isArray(t4.graphs))
                return "graphs: array expected";
              for (e3 = 0; e3 < t4.graphs.length; ++e3) {
                var n3;
                if (n3 = l2.onnx.GraphProto.verify(t4.graphs[e3]))
                  return "graphs." + n3;
              }
            }
            return null;
          }, t3.fromObject = function(t4) {
            if (t4 instanceof l2.onnx.AttributeProto)
              return t4;
            var e3 = new l2.onnx.AttributeProto();
            switch (t4.name != null && (e3.name = String(t4.name)), t4.refAttrName != null && (e3.refAttrName = String(t4.refAttrName)), t4.docString != null && (e3.docString = String(t4.docString)), t4.type) {
              case "UNDEFINED":
              case 0:
                e3.type = 0;
                break;
              case "FLOAT":
              case 1:
                e3.type = 1;
                break;
              case "INT":
              case 2:
                e3.type = 2;
                break;
              case "STRING":
              case 3:
                e3.type = 3;
                break;
              case "TENSOR":
              case 4:
                e3.type = 4;
                break;
              case "GRAPH":
              case 5:
                e3.type = 5;
                break;
              case "FLOATS":
              case 6:
                e3.type = 6;
                break;
              case "INTS":
              case 7:
                e3.type = 7;
                break;
              case "STRINGS":
              case 8:
                e3.type = 8;
                break;
              case "TENSORS":
              case 9:
                e3.type = 9;
                break;
              case "GRAPHS":
              case 10:
                e3.type = 10;
            }
            if (t4.f != null && (e3.f = Number(t4.f)), t4.i != null && (c2.Long ? (e3.i = c2.Long.fromValue(t4.i)).unsigned = false : typeof t4.i == "string" ? e3.i = parseInt(t4.i, 10) : typeof t4.i == "number" ? e3.i = t4.i : typeof t4.i == "object" && (e3.i = new c2.LongBits(t4.i.low >>> 0, t4.i.high >>> 0).toNumber())), t4.s != null && (typeof t4.s == "string" ? c2.base64.decode(t4.s, e3.s = c2.newBuffer(c2.base64.length(t4.s)), 0) : t4.s.length && (e3.s = t4.s)), t4.t != null) {
              if (typeof t4.t != "object")
                throw TypeError(".onnx.AttributeProto.t: object expected");
              e3.t = l2.onnx.TensorProto.fromObject(t4.t);
            }
            if (t4.g != null) {
              if (typeof t4.g != "object")
                throw TypeError(".onnx.AttributeProto.g: object expected");
              e3.g = l2.onnx.GraphProto.fromObject(t4.g);
            }
            if (t4.floats) {
              if (!Array.isArray(t4.floats))
                throw TypeError(".onnx.AttributeProto.floats: array expected");
              e3.floats = [];
              for (var n3 = 0; n3 < t4.floats.length; ++n3)
                e3.floats[n3] = Number(t4.floats[n3]);
            }
            if (t4.ints) {
              if (!Array.isArray(t4.ints))
                throw TypeError(".onnx.AttributeProto.ints: array expected");
              for (e3.ints = [], n3 = 0; n3 < t4.ints.length; ++n3)
                c2.Long ? (e3.ints[n3] = c2.Long.fromValue(t4.ints[n3])).unsigned = false : typeof t4.ints[n3] == "string" ? e3.ints[n3] = parseInt(t4.ints[n3], 10) : typeof t4.ints[n3] == "number" ? e3.ints[n3] = t4.ints[n3] : typeof t4.ints[n3] == "object" && (e3.ints[n3] = new c2.LongBits(t4.ints[n3].low >>> 0, t4.ints[n3].high >>> 0).toNumber());
            }
            if (t4.strings) {
              if (!Array.isArray(t4.strings))
                throw TypeError(".onnx.AttributeProto.strings: array expected");
              for (e3.strings = [], n3 = 0; n3 < t4.strings.length; ++n3)
                typeof t4.strings[n3] == "string" ? c2.base64.decode(t4.strings[n3], e3.strings[n3] = c2.newBuffer(c2.base64.length(t4.strings[n3])), 0) : t4.strings[n3].length && (e3.strings[n3] = t4.strings[n3]);
            }
            if (t4.tensors) {
              if (!Array.isArray(t4.tensors))
                throw TypeError(".onnx.AttributeProto.tensors: array expected");
              for (e3.tensors = [], n3 = 0; n3 < t4.tensors.length; ++n3) {
                if (typeof t4.tensors[n3] != "object")
                  throw TypeError(".onnx.AttributeProto.tensors: object expected");
                e3.tensors[n3] = l2.onnx.TensorProto.fromObject(t4.tensors[n3]);
              }
            }
            if (t4.graphs) {
              if (!Array.isArray(t4.graphs))
                throw TypeError(".onnx.AttributeProto.graphs: array expected");
              for (e3.graphs = [], n3 = 0; n3 < t4.graphs.length; ++n3) {
                if (typeof t4.graphs[n3] != "object")
                  throw TypeError(".onnx.AttributeProto.graphs: object expected");
                e3.graphs[n3] = l2.onnx.GraphProto.fromObject(t4.graphs[n3]);
              }
            }
            return e3;
          }, t3.toObject = function(t4, e3) {
            e3 || (e3 = {});
            var n3 = {};
            if ((e3.arrays || e3.defaults) && (n3.floats = [], n3.ints = [], n3.strings = [], n3.tensors = [], n3.graphs = []), e3.defaults) {
              if (n3.name = "", n3.f = 0, c2.Long) {
                var r3 = new c2.Long(0, 0, false);
                n3.i = e3.longs === String ? r3.toString() : e3.longs === Number ? r3.toNumber() : r3;
              } else
                n3.i = e3.longs === String ? "0" : 0;
              e3.bytes === String ? n3.s = "" : (n3.s = [], e3.bytes !== Array && (n3.s = c2.newBuffer(n3.s))), n3.t = null, n3.g = null, n3.docString = "", n3.type = e3.enums === String ? "UNDEFINED" : 0, n3.refAttrName = "";
            }
            if (t4.name != null && t4.hasOwnProperty("name") && (n3.name = t4.name), t4.f != null && t4.hasOwnProperty("f") && (n3.f = e3.json && !isFinite(t4.f) ? String(t4.f) : t4.f), t4.i != null && t4.hasOwnProperty("i") && (typeof t4.i == "number" ? n3.i = e3.longs === String ? String(t4.i) : t4.i : n3.i = e3.longs === String ? c2.Long.prototype.toString.call(t4.i) : e3.longs === Number ? new c2.LongBits(t4.i.low >>> 0, t4.i.high >>> 0).toNumber() : t4.i), t4.s != null && t4.hasOwnProperty("s") && (n3.s = e3.bytes === String ? c2.base64.encode(t4.s, 0, t4.s.length) : e3.bytes === Array ? Array.prototype.slice.call(t4.s) : t4.s), t4.t != null && t4.hasOwnProperty("t") && (n3.t = l2.onnx.TensorProto.toObject(t4.t, e3)), t4.g != null && t4.hasOwnProperty("g") && (n3.g = l2.onnx.GraphProto.toObject(t4.g, e3)), t4.floats && t4.floats.length) {
              n3.floats = [];
              for (var i3 = 0; i3 < t4.floats.length; ++i3)
                n3.floats[i3] = e3.json && !isFinite(t4.floats[i3]) ? String(t4.floats[i3]) : t4.floats[i3];
            }
            if (t4.ints && t4.ints.length)
              for (n3.ints = [], i3 = 0; i3 < t4.ints.length; ++i3)
                typeof t4.ints[i3] == "number" ? n3.ints[i3] = e3.longs === String ? String(t4.ints[i3]) : t4.ints[i3] : n3.ints[i3] = e3.longs === String ? c2.Long.prototype.toString.call(t4.ints[i3]) : e3.longs === Number ? new c2.LongBits(t4.ints[i3].low >>> 0, t4.ints[i3].high >>> 0).toNumber() : t4.ints[i3];
            if (t4.strings && t4.strings.length)
              for (n3.strings = [], i3 = 0; i3 < t4.strings.length; ++i3)
                n3.strings[i3] = e3.bytes === String ? c2.base64.encode(t4.strings[i3], 0, t4.strings[i3].length) : e3.bytes === Array ? Array.prototype.slice.call(t4.strings[i3]) : t4.strings[i3];
            if (t4.tensors && t4.tensors.length)
              for (n3.tensors = [], i3 = 0; i3 < t4.tensors.length; ++i3)
                n3.tensors[i3] = l2.onnx.TensorProto.toObject(t4.tensors[i3], e3);
            if (t4.graphs && t4.graphs.length)
              for (n3.graphs = [], i3 = 0; i3 < t4.graphs.length; ++i3)
                n3.graphs[i3] = l2.onnx.GraphProto.toObject(t4.graphs[i3], e3);
            return t4.docString != null && t4.hasOwnProperty("docString") && (n3.docString = t4.docString), t4.type != null && t4.hasOwnProperty("type") && (n3.type = e3.enums === String ? l2.onnx.AttributeProto.AttributeType[t4.type] : t4.type), t4.refAttrName != null && t4.hasOwnProperty("refAttrName") && (n3.refAttrName = t4.refAttrName), n3;
          }, t3.prototype.toJSON = function() {
            return this.constructor.toObject(this, a2.util.toJSONOptions);
          }, t3.AttributeType = function() {
            var t4 = {}, e3 = Object.create(t4);
            return e3[t4[0] = "UNDEFINED"] = 0, e3[t4[1] = "FLOAT"] = 1, e3[t4[2] = "INT"] = 2, e3[t4[3] = "STRING"] = 3, e3[t4[4] = "TENSOR"] = 4, e3[t4[5] = "GRAPH"] = 5, e3[t4[6] = "FLOATS"] = 6, e3[t4[7] = "INTS"] = 7, e3[t4[8] = "STRINGS"] = 8, e3[t4[9] = "TENSORS"] = 9, e3[t4[10] = "GRAPHS"] = 10, e3;
          }(), t3;
        }(), o2.ValueInfoProto = function() {
          function t3(t4) {
            if (t4)
              for (var e3 = Object.keys(t4), n3 = 0; n3 < e3.length; ++n3)
                t4[e3[n3]] != null && (this[e3[n3]] = t4[e3[n3]]);
          }
          return t3.prototype.name = "", t3.prototype.type = null, t3.prototype.docString = "", t3.create = function(e3) {
            return new t3(e3);
          }, t3.encode = function(t4, e3) {
            return e3 || (e3 = u2.create()), t4.name != null && t4.hasOwnProperty("name") && e3.uint32(10).string(t4.name), t4.type != null && t4.hasOwnProperty("type") && l2.onnx.TypeProto.encode(t4.type, e3.uint32(18).fork()).ldelim(), t4.docString != null && t4.hasOwnProperty("docString") && e3.uint32(26).string(t4.docString), e3;
          }, t3.encodeDelimited = function(t4, e3) {
            return this.encode(t4, e3).ldelim();
          }, t3.decode = function(t4, e3) {
            t4 instanceof s2 || (t4 = s2.create(t4));
            for (var n3 = e3 === void 0 ? t4.len : t4.pos + e3, r3 = new l2.onnx.ValueInfoProto(); t4.pos < n3; ) {
              var i3 = t4.uint32();
              switch (i3 >>> 3) {
                case 1:
                  r3.name = t4.string();
                  break;
                case 2:
                  r3.type = l2.onnx.TypeProto.decode(t4, t4.uint32());
                  break;
                case 3:
                  r3.docString = t4.string();
                  break;
                default:
                  t4.skipType(7 & i3);
              }
            }
            return r3;
          }, t3.decodeDelimited = function(t4) {
            return t4 instanceof s2 || (t4 = new s2(t4)), this.decode(t4, t4.uint32());
          }, t3.verify = function(t4) {
            if (typeof t4 != "object" || t4 === null)
              return "object expected";
            if (t4.name != null && t4.hasOwnProperty("name") && !c2.isString(t4.name))
              return "name: string expected";
            if (t4.type != null && t4.hasOwnProperty("type")) {
              var e3 = l2.onnx.TypeProto.verify(t4.type);
              if (e3)
                return "type." + e3;
            }
            return t4.docString != null && t4.hasOwnProperty("docString") && !c2.isString(t4.docString) ? "docString: string expected" : null;
          }, t3.fromObject = function(t4) {
            if (t4 instanceof l2.onnx.ValueInfoProto)
              return t4;
            var e3 = new l2.onnx.ValueInfoProto();
            if (t4.name != null && (e3.name = String(t4.name)), t4.type != null) {
              if (typeof t4.type != "object")
                throw TypeError(".onnx.ValueInfoProto.type: object expected");
              e3.type = l2.onnx.TypeProto.fromObject(t4.type);
            }
            return t4.docString != null && (e3.docString = String(t4.docString)), e3;
          }, t3.toObject = function(t4, e3) {
            e3 || (e3 = {});
            var n3 = {};
            return e3.defaults && (n3.name = "", n3.type = null, n3.docString = ""), t4.name != null && t4.hasOwnProperty("name") && (n3.name = t4.name), t4.type != null && t4.hasOwnProperty("type") && (n3.type = l2.onnx.TypeProto.toObject(t4.type, e3)), t4.docString != null && t4.hasOwnProperty("docString") && (n3.docString = t4.docString), n3;
          }, t3.prototype.toJSON = function() {
            return this.constructor.toObject(this, a2.util.toJSONOptions);
          }, t3;
        }(), o2.NodeProto = function() {
          function t3(t4) {
            if (this.input = [], this.output = [], this.attribute = [], t4)
              for (var e3 = Object.keys(t4), n3 = 0; n3 < e3.length; ++n3)
                t4[e3[n3]] != null && (this[e3[n3]] = t4[e3[n3]]);
          }
          return t3.prototype.input = c2.emptyArray, t3.prototype.output = c2.emptyArray, t3.prototype.name = "", t3.prototype.opType = "", t3.prototype.domain = "", t3.prototype.attribute = c2.emptyArray, t3.prototype.docString = "", t3.create = function(e3) {
            return new t3(e3);
          }, t3.encode = function(t4, e3) {
            if (e3 || (e3 = u2.create()), t4.input != null && t4.input.length)
              for (var n3 = 0; n3 < t4.input.length; ++n3)
                e3.uint32(10).string(t4.input[n3]);
            if (t4.output != null && t4.output.length)
              for (n3 = 0; n3 < t4.output.length; ++n3)
                e3.uint32(18).string(t4.output[n3]);
            if (t4.name != null && t4.hasOwnProperty("name") && e3.uint32(26).string(t4.name), t4.opType != null && t4.hasOwnProperty("opType") && e3.uint32(34).string(t4.opType), t4.attribute != null && t4.attribute.length)
              for (n3 = 0; n3 < t4.attribute.length; ++n3)
                l2.onnx.AttributeProto.encode(t4.attribute[n3], e3.uint32(42).fork()).ldelim();
            return t4.docString != null && t4.hasOwnProperty("docString") && e3.uint32(50).string(t4.docString), t4.domain != null && t4.hasOwnProperty("domain") && e3.uint32(58).string(t4.domain), e3;
          }, t3.encodeDelimited = function(t4, e3) {
            return this.encode(t4, e3).ldelim();
          }, t3.decode = function(t4, e3) {
            t4 instanceof s2 || (t4 = s2.create(t4));
            for (var n3 = e3 === void 0 ? t4.len : t4.pos + e3, r3 = new l2.onnx.NodeProto(); t4.pos < n3; ) {
              var i3 = t4.uint32();
              switch (i3 >>> 3) {
                case 1:
                  r3.input && r3.input.length || (r3.input = []), r3.input.push(t4.string());
                  break;
                case 2:
                  r3.output && r3.output.length || (r3.output = []), r3.output.push(t4.string());
                  break;
                case 3:
                  r3.name = t4.string();
                  break;
                case 4:
                  r3.opType = t4.string();
                  break;
                case 7:
                  r3.domain = t4.string();
                  break;
                case 5:
                  r3.attribute && r3.attribute.length || (r3.attribute = []), r3.attribute.push(l2.onnx.AttributeProto.decode(t4, t4.uint32()));
                  break;
                case 6:
                  r3.docString = t4.string();
                  break;
                default:
                  t4.skipType(7 & i3);
              }
            }
            return r3;
          }, t3.decodeDelimited = function(t4) {
            return t4 instanceof s2 || (t4 = new s2(t4)), this.decode(t4, t4.uint32());
          }, t3.verify = function(t4) {
            if (typeof t4 != "object" || t4 === null)
              return "object expected";
            if (t4.input != null && t4.hasOwnProperty("input")) {
              if (!Array.isArray(t4.input))
                return "input: array expected";
              for (var e3 = 0; e3 < t4.input.length; ++e3)
                if (!c2.isString(t4.input[e3]))
                  return "input: string[] expected";
            }
            if (t4.output != null && t4.hasOwnProperty("output")) {
              if (!Array.isArray(t4.output))
                return "output: array expected";
              for (e3 = 0; e3 < t4.output.length; ++e3)
                if (!c2.isString(t4.output[e3]))
                  return "output: string[] expected";
            }
            if (t4.name != null && t4.hasOwnProperty("name") && !c2.isString(t4.name))
              return "name: string expected";
            if (t4.opType != null && t4.hasOwnProperty("opType") && !c2.isString(t4.opType))
              return "opType: string expected";
            if (t4.domain != null && t4.hasOwnProperty("domain") && !c2.isString(t4.domain))
              return "domain: string expected";
            if (t4.attribute != null && t4.hasOwnProperty("attribute")) {
              if (!Array.isArray(t4.attribute))
                return "attribute: array expected";
              for (e3 = 0; e3 < t4.attribute.length; ++e3) {
                var n3 = l2.onnx.AttributeProto.verify(t4.attribute[e3]);
                if (n3)
                  return "attribute." + n3;
              }
            }
            return t4.docString != null && t4.hasOwnProperty("docString") && !c2.isString(t4.docString) ? "docString: string expected" : null;
          }, t3.fromObject = function(t4) {
            if (t4 instanceof l2.onnx.NodeProto)
              return t4;
            var e3 = new l2.onnx.NodeProto();
            if (t4.input) {
              if (!Array.isArray(t4.input))
                throw TypeError(".onnx.NodeProto.input: array expected");
              e3.input = [];
              for (var n3 = 0; n3 < t4.input.length; ++n3)
                e3.input[n3] = String(t4.input[n3]);
            }
            if (t4.output) {
              if (!Array.isArray(t4.output))
                throw TypeError(".onnx.NodeProto.output: array expected");
              for (e3.output = [], n3 = 0; n3 < t4.output.length; ++n3)
                e3.output[n3] = String(t4.output[n3]);
            }
            if (t4.name != null && (e3.name = String(t4.name)), t4.opType != null && (e3.opType = String(t4.opType)), t4.domain != null && (e3.domain = String(t4.domain)), t4.attribute) {
              if (!Array.isArray(t4.attribute))
                throw TypeError(".onnx.NodeProto.attribute: array expected");
              for (e3.attribute = [], n3 = 0; n3 < t4.attribute.length; ++n3) {
                if (typeof t4.attribute[n3] != "object")
                  throw TypeError(".onnx.NodeProto.attribute: object expected");
                e3.attribute[n3] = l2.onnx.AttributeProto.fromObject(t4.attribute[n3]);
              }
            }
            return t4.docString != null && (e3.docString = String(t4.docString)), e3;
          }, t3.toObject = function(t4, e3) {
            e3 || (e3 = {});
            var n3 = {};
            if ((e3.arrays || e3.defaults) && (n3.input = [], n3.output = [], n3.attribute = []), e3.defaults && (n3.name = "", n3.opType = "", n3.docString = "", n3.domain = ""), t4.input && t4.input.length) {
              n3.input = [];
              for (var r3 = 0; r3 < t4.input.length; ++r3)
                n3.input[r3] = t4.input[r3];
            }
            if (t4.output && t4.output.length)
              for (n3.output = [], r3 = 0; r3 < t4.output.length; ++r3)
                n3.output[r3] = t4.output[r3];
            if (t4.name != null && t4.hasOwnProperty("name") && (n3.name = t4.name), t4.opType != null && t4.hasOwnProperty("opType") && (n3.opType = t4.opType), t4.attribute && t4.attribute.length)
              for (n3.attribute = [], r3 = 0; r3 < t4.attribute.length; ++r3)
                n3.attribute[r3] = l2.onnx.AttributeProto.toObject(t4.attribute[r3], e3);
            return t4.docString != null && t4.hasOwnProperty("docString") && (n3.docString = t4.docString), t4.domain != null && t4.hasOwnProperty("domain") && (n3.domain = t4.domain), n3;
          }, t3.prototype.toJSON = function() {
            return this.constructor.toObject(this, a2.util.toJSONOptions);
          }, t3;
        }(), o2.ModelProto = function() {
          function t3(t4) {
            if (this.opsetImport = [], this.metadataProps = [], t4)
              for (var e3 = Object.keys(t4), n3 = 0; n3 < e3.length; ++n3)
                t4[e3[n3]] != null && (this[e3[n3]] = t4[e3[n3]]);
          }
          return t3.prototype.irVersion = c2.Long ? c2.Long.fromBits(0, 0, false) : 0, t3.prototype.opsetImport = c2.emptyArray, t3.prototype.producerName = "", t3.prototype.producerVersion = "", t3.prototype.domain = "", t3.prototype.modelVersion = c2.Long ? c2.Long.fromBits(0, 0, false) : 0, t3.prototype.docString = "", t3.prototype.graph = null, t3.prototype.metadataProps = c2.emptyArray, t3.create = function(e3) {
            return new t3(e3);
          }, t3.encode = function(t4, e3) {
            if (e3 || (e3 = u2.create()), t4.irVersion != null && t4.hasOwnProperty("irVersion") && e3.uint32(8).int64(t4.irVersion), t4.producerName != null && t4.hasOwnProperty("producerName") && e3.uint32(18).string(t4.producerName), t4.producerVersion != null && t4.hasOwnProperty("producerVersion") && e3.uint32(26).string(t4.producerVersion), t4.domain != null && t4.hasOwnProperty("domain") && e3.uint32(34).string(t4.domain), t4.modelVersion != null && t4.hasOwnProperty("modelVersion") && e3.uint32(40).int64(t4.modelVersion), t4.docString != null && t4.hasOwnProperty("docString") && e3.uint32(50).string(t4.docString), t4.graph != null && t4.hasOwnProperty("graph") && l2.onnx.GraphProto.encode(t4.graph, e3.uint32(58).fork()).ldelim(), t4.opsetImport != null && t4.opsetImport.length)
              for (var n3 = 0; n3 < t4.opsetImport.length; ++n3)
                l2.onnx.OperatorSetIdProto.encode(t4.opsetImport[n3], e3.uint32(66).fork()).ldelim();
            if (t4.metadataProps != null && t4.metadataProps.length)
              for (n3 = 0; n3 < t4.metadataProps.length; ++n3)
                l2.onnx.StringStringEntryProto.encode(t4.metadataProps[n3], e3.uint32(114).fork()).ldelim();
            return e3;
          }, t3.encodeDelimited = function(t4, e3) {
            return this.encode(t4, e3).ldelim();
          }, t3.decode = function(t4, e3) {
            t4 instanceof s2 || (t4 = s2.create(t4));
            for (var n3 = e3 === void 0 ? t4.len : t4.pos + e3, r3 = new l2.onnx.ModelProto(); t4.pos < n3; ) {
              var i3 = t4.uint32();
              switch (i3 >>> 3) {
                case 1:
                  r3.irVersion = t4.int64();
                  break;
                case 8:
                  r3.opsetImport && r3.opsetImport.length || (r3.opsetImport = []), r3.opsetImport.push(l2.onnx.OperatorSetIdProto.decode(t4, t4.uint32()));
                  break;
                case 2:
                  r3.producerName = t4.string();
                  break;
                case 3:
                  r3.producerVersion = t4.string();
                  break;
                case 4:
                  r3.domain = t4.string();
                  break;
                case 5:
                  r3.modelVersion = t4.int64();
                  break;
                case 6:
                  r3.docString = t4.string();
                  break;
                case 7:
                  r3.graph = l2.onnx.GraphProto.decode(t4, t4.uint32());
                  break;
                case 14:
                  r3.metadataProps && r3.metadataProps.length || (r3.metadataProps = []), r3.metadataProps.push(l2.onnx.StringStringEntryProto.decode(t4, t4.uint32()));
                  break;
                default:
                  t4.skipType(7 & i3);
              }
            }
            return r3;
          }, t3.decodeDelimited = function(t4) {
            return t4 instanceof s2 || (t4 = new s2(t4)), this.decode(t4, t4.uint32());
          }, t3.verify = function(t4) {
            if (typeof t4 != "object" || t4 === null)
              return "object expected";
            if (t4.irVersion != null && t4.hasOwnProperty("irVersion") && !(c2.isInteger(t4.irVersion) || t4.irVersion && c2.isInteger(t4.irVersion.low) && c2.isInteger(t4.irVersion.high)))
              return "irVersion: integer|Long expected";
            if (t4.opsetImport != null && t4.hasOwnProperty("opsetImport")) {
              if (!Array.isArray(t4.opsetImport))
                return "opsetImport: array expected";
              for (var e3 = 0; e3 < t4.opsetImport.length; ++e3)
                if (n3 = l2.onnx.OperatorSetIdProto.verify(t4.opsetImport[e3]))
                  return "opsetImport." + n3;
            }
            if (t4.producerName != null && t4.hasOwnProperty("producerName") && !c2.isString(t4.producerName))
              return "producerName: string expected";
            if (t4.producerVersion != null && t4.hasOwnProperty("producerVersion") && !c2.isString(t4.producerVersion))
              return "producerVersion: string expected";
            if (t4.domain != null && t4.hasOwnProperty("domain") && !c2.isString(t4.domain))
              return "domain: string expected";
            if (t4.modelVersion != null && t4.hasOwnProperty("modelVersion") && !(c2.isInteger(t4.modelVersion) || t4.modelVersion && c2.isInteger(t4.modelVersion.low) && c2.isInteger(t4.modelVersion.high)))
              return "modelVersion: integer|Long expected";
            if (t4.docString != null && t4.hasOwnProperty("docString") && !c2.isString(t4.docString))
              return "docString: string expected";
            if (t4.graph != null && t4.hasOwnProperty("graph") && (n3 = l2.onnx.GraphProto.verify(t4.graph)))
              return "graph." + n3;
            if (t4.metadataProps != null && t4.hasOwnProperty("metadataProps")) {
              if (!Array.isArray(t4.metadataProps))
                return "metadataProps: array expected";
              for (e3 = 0; e3 < t4.metadataProps.length; ++e3) {
                var n3;
                if (n3 = l2.onnx.StringStringEntryProto.verify(t4.metadataProps[e3]))
                  return "metadataProps." + n3;
              }
            }
            return null;
          }, t3.fromObject = function(t4) {
            if (t4 instanceof l2.onnx.ModelProto)
              return t4;
            var e3 = new l2.onnx.ModelProto();
            if (t4.irVersion != null && (c2.Long ? (e3.irVersion = c2.Long.fromValue(t4.irVersion)).unsigned = false : typeof t4.irVersion == "string" ? e3.irVersion = parseInt(t4.irVersion, 10) : typeof t4.irVersion == "number" ? e3.irVersion = t4.irVersion : typeof t4.irVersion == "object" && (e3.irVersion = new c2.LongBits(t4.irVersion.low >>> 0, t4.irVersion.high >>> 0).toNumber())), t4.opsetImport) {
              if (!Array.isArray(t4.opsetImport))
                throw TypeError(".onnx.ModelProto.opsetImport: array expected");
              e3.opsetImport = [];
              for (var n3 = 0; n3 < t4.opsetImport.length; ++n3) {
                if (typeof t4.opsetImport[n3] != "object")
                  throw TypeError(".onnx.ModelProto.opsetImport: object expected");
                e3.opsetImport[n3] = l2.onnx.OperatorSetIdProto.fromObject(t4.opsetImport[n3]);
              }
            }
            if (t4.producerName != null && (e3.producerName = String(t4.producerName)), t4.producerVersion != null && (e3.producerVersion = String(t4.producerVersion)), t4.domain != null && (e3.domain = String(t4.domain)), t4.modelVersion != null && (c2.Long ? (e3.modelVersion = c2.Long.fromValue(t4.modelVersion)).unsigned = false : typeof t4.modelVersion == "string" ? e3.modelVersion = parseInt(t4.modelVersion, 10) : typeof t4.modelVersion == "number" ? e3.modelVersion = t4.modelVersion : typeof t4.modelVersion == "object" && (e3.modelVersion = new c2.LongBits(t4.modelVersion.low >>> 0, t4.modelVersion.high >>> 0).toNumber())), t4.docString != null && (e3.docString = String(t4.docString)), t4.graph != null) {
              if (typeof t4.graph != "object")
                throw TypeError(".onnx.ModelProto.graph: object expected");
              e3.graph = l2.onnx.GraphProto.fromObject(t4.graph);
            }
            if (t4.metadataProps) {
              if (!Array.isArray(t4.metadataProps))
                throw TypeError(".onnx.ModelProto.metadataProps: array expected");
              for (e3.metadataProps = [], n3 = 0; n3 < t4.metadataProps.length; ++n3) {
                if (typeof t4.metadataProps[n3] != "object")
                  throw TypeError(".onnx.ModelProto.metadataProps: object expected");
                e3.metadataProps[n3] = l2.onnx.StringStringEntryProto.fromObject(t4.metadataProps[n3]);
              }
            }
            return e3;
          }, t3.toObject = function(t4, e3) {
            e3 || (e3 = {});
            var n3 = {};
            if ((e3.arrays || e3.defaults) && (n3.opsetImport = [], n3.metadataProps = []), e3.defaults) {
              if (c2.Long) {
                var r3 = new c2.Long(0, 0, false);
                n3.irVersion = e3.longs === String ? r3.toString() : e3.longs === Number ? r3.toNumber() : r3;
              } else
                n3.irVersion = e3.longs === String ? "0" : 0;
              n3.producerName = "", n3.producerVersion = "", n3.domain = "", c2.Long ? (r3 = new c2.Long(0, 0, false), n3.modelVersion = e3.longs === String ? r3.toString() : e3.longs === Number ? r3.toNumber() : r3) : n3.modelVersion = e3.longs === String ? "0" : 0, n3.docString = "", n3.graph = null;
            }
            if (t4.irVersion != null && t4.hasOwnProperty("irVersion") && (typeof t4.irVersion == "number" ? n3.irVersion = e3.longs === String ? String(t4.irVersion) : t4.irVersion : n3.irVersion = e3.longs === String ? c2.Long.prototype.toString.call(t4.irVersion) : e3.longs === Number ? new c2.LongBits(t4.irVersion.low >>> 0, t4.irVersion.high >>> 0).toNumber() : t4.irVersion), t4.producerName != null && t4.hasOwnProperty("producerName") && (n3.producerName = t4.producerName), t4.producerVersion != null && t4.hasOwnProperty("producerVersion") && (n3.producerVersion = t4.producerVersion), t4.domain != null && t4.hasOwnProperty("domain") && (n3.domain = t4.domain), t4.modelVersion != null && t4.hasOwnProperty("modelVersion") && (typeof t4.modelVersion == "number" ? n3.modelVersion = e3.longs === String ? String(t4.modelVersion) : t4.modelVersion : n3.modelVersion = e3.longs === String ? c2.Long.prototype.toString.call(t4.modelVersion) : e3.longs === Number ? new c2.LongBits(t4.modelVersion.low >>> 0, t4.modelVersion.high >>> 0).toNumber() : t4.modelVersion), t4.docString != null && t4.hasOwnProperty("docString") && (n3.docString = t4.docString), t4.graph != null && t4.hasOwnProperty("graph") && (n3.graph = l2.onnx.GraphProto.toObject(t4.graph, e3)), t4.opsetImport && t4.opsetImport.length) {
              n3.opsetImport = [];
              for (var i3 = 0; i3 < t4.opsetImport.length; ++i3)
                n3.opsetImport[i3] = l2.onnx.OperatorSetIdProto.toObject(t4.opsetImport[i3], e3);
            }
            if (t4.metadataProps && t4.metadataProps.length)
              for (n3.metadataProps = [], i3 = 0; i3 < t4.metadataProps.length; ++i3)
                n3.metadataProps[i3] = l2.onnx.StringStringEntryProto.toObject(t4.metadataProps[i3], e3);
            return n3;
          }, t3.prototype.toJSON = function() {
            return this.constructor.toObject(this, a2.util.toJSONOptions);
          }, t3;
        }(), o2.StringStringEntryProto = function() {
          function t3(t4) {
            if (t4)
              for (var e3 = Object.keys(t4), n3 = 0; n3 < e3.length; ++n3)
                t4[e3[n3]] != null && (this[e3[n3]] = t4[e3[n3]]);
          }
          return t3.prototype.key = "", t3.prototype.value = "", t3.create = function(e3) {
            return new t3(e3);
          }, t3.encode = function(t4, e3) {
            return e3 || (e3 = u2.create()), t4.key != null && t4.hasOwnProperty("key") && e3.uint32(10).string(t4.key), t4.value != null && t4.hasOwnProperty("value") && e3.uint32(18).string(t4.value), e3;
          }, t3.encodeDelimited = function(t4, e3) {
            return this.encode(t4, e3).ldelim();
          }, t3.decode = function(t4, e3) {
            t4 instanceof s2 || (t4 = s2.create(t4));
            for (var n3 = e3 === void 0 ? t4.len : t4.pos + e3, r3 = new l2.onnx.StringStringEntryProto(); t4.pos < n3; ) {
              var i3 = t4.uint32();
              switch (i3 >>> 3) {
                case 1:
                  r3.key = t4.string();
                  break;
                case 2:
                  r3.value = t4.string();
                  break;
                default:
                  t4.skipType(7 & i3);
              }
            }
            return r3;
          }, t3.decodeDelimited = function(t4) {
            return t4 instanceof s2 || (t4 = new s2(t4)), this.decode(t4, t4.uint32());
          }, t3.verify = function(t4) {
            return typeof t4 != "object" || t4 === null ? "object expected" : t4.key != null && t4.hasOwnProperty("key") && !c2.isString(t4.key) ? "key: string expected" : t4.value != null && t4.hasOwnProperty("value") && !c2.isString(t4.value) ? "value: string expected" : null;
          }, t3.fromObject = function(t4) {
            if (t4 instanceof l2.onnx.StringStringEntryProto)
              return t4;
            var e3 = new l2.onnx.StringStringEntryProto();
            return t4.key != null && (e3.key = String(t4.key)), t4.value != null && (e3.value = String(t4.value)), e3;
          }, t3.toObject = function(t4, e3) {
            e3 || (e3 = {});
            var n3 = {};
            return e3.defaults && (n3.key = "", n3.value = ""), t4.key != null && t4.hasOwnProperty("key") && (n3.key = t4.key), t4.value != null && t4.hasOwnProperty("value") && (n3.value = t4.value), n3;
          }, t3.prototype.toJSON = function() {
            return this.constructor.toObject(this, a2.util.toJSONOptions);
          }, t3;
        }(), o2.TensorAnnotation = function() {
          function t3(t4) {
            if (this.quantParameterTensorNames = [], t4)
              for (var e3 = Object.keys(t4), n3 = 0; n3 < e3.length; ++n3)
                t4[e3[n3]] != null && (this[e3[n3]] = t4[e3[n3]]);
          }
          return t3.prototype.tensorName = "", t3.prototype.quantParameterTensorNames = c2.emptyArray, t3.create = function(e3) {
            return new t3(e3);
          }, t3.encode = function(t4, e3) {
            if (e3 || (e3 = u2.create()), t4.tensorName != null && t4.hasOwnProperty("tensorName") && e3.uint32(10).string(t4.tensorName), t4.quantParameterTensorNames != null && t4.quantParameterTensorNames.length)
              for (var n3 = 0; n3 < t4.quantParameterTensorNames.length; ++n3)
                l2.onnx.StringStringEntryProto.encode(t4.quantParameterTensorNames[n3], e3.uint32(18).fork()).ldelim();
            return e3;
          }, t3.encodeDelimited = function(t4, e3) {
            return this.encode(t4, e3).ldelim();
          }, t3.decode = function(t4, e3) {
            t4 instanceof s2 || (t4 = s2.create(t4));
            for (var n3 = e3 === void 0 ? t4.len : t4.pos + e3, r3 = new l2.onnx.TensorAnnotation(); t4.pos < n3; ) {
              var i3 = t4.uint32();
              switch (i3 >>> 3) {
                case 1:
                  r3.tensorName = t4.string();
                  break;
                case 2:
                  r3.quantParameterTensorNames && r3.quantParameterTensorNames.length || (r3.quantParameterTensorNames = []), r3.quantParameterTensorNames.push(l2.onnx.StringStringEntryProto.decode(t4, t4.uint32()));
                  break;
                default:
                  t4.skipType(7 & i3);
              }
            }
            return r3;
          }, t3.decodeDelimited = function(t4) {
            return t4 instanceof s2 || (t4 = new s2(t4)), this.decode(t4, t4.uint32());
          }, t3.verify = function(t4) {
            if (typeof t4 != "object" || t4 === null)
              return "object expected";
            if (t4.tensorName != null && t4.hasOwnProperty("tensorName") && !c2.isString(t4.tensorName))
              return "tensorName: string expected";
            if (t4.quantParameterTensorNames != null && t4.hasOwnProperty("quantParameterTensorNames")) {
              if (!Array.isArray(t4.quantParameterTensorNames))
                return "quantParameterTensorNames: array expected";
              for (var e3 = 0; e3 < t4.quantParameterTensorNames.length; ++e3) {
                var n3 = l2.onnx.StringStringEntryProto.verify(t4.quantParameterTensorNames[e3]);
                if (n3)
                  return "quantParameterTensorNames." + n3;
              }
            }
            return null;
          }, t3.fromObject = function(t4) {
            if (t4 instanceof l2.onnx.TensorAnnotation)
              return t4;
            var e3 = new l2.onnx.TensorAnnotation();
            if (t4.tensorName != null && (e3.tensorName = String(t4.tensorName)), t4.quantParameterTensorNames) {
              if (!Array.isArray(t4.quantParameterTensorNames))
                throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: array expected");
              e3.quantParameterTensorNames = [];
              for (var n3 = 0; n3 < t4.quantParameterTensorNames.length; ++n3) {
                if (typeof t4.quantParameterTensorNames[n3] != "object")
                  throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: object expected");
                e3.quantParameterTensorNames[n3] = l2.onnx.StringStringEntryProto.fromObject(t4.quantParameterTensorNames[n3]);
              }
            }
            return e3;
          }, t3.toObject = function(t4, e3) {
            e3 || (e3 = {});
            var n3 = {};
            if ((e3.arrays || e3.defaults) && (n3.quantParameterTensorNames = []), e3.defaults && (n3.tensorName = ""), t4.tensorName != null && t4.hasOwnProperty("tensorName") && (n3.tensorName = t4.tensorName), t4.quantParameterTensorNames && t4.quantParameterTensorNames.length) {
              n3.quantParameterTensorNames = [];
              for (var r3 = 0; r3 < t4.quantParameterTensorNames.length; ++r3)
                n3.quantParameterTensorNames[r3] = l2.onnx.StringStringEntryProto.toObject(t4.quantParameterTensorNames[r3], e3);
            }
            return n3;
          }, t3.prototype.toJSON = function() {
            return this.constructor.toObject(this, a2.util.toJSONOptions);
          }, t3;
        }(), o2.GraphProto = function() {
          function t3(t4) {
            if (this.node = [], this.initializer = [], this.input = [], this.output = [], this.valueInfo = [], this.quantizationAnnotation = [], t4)
              for (var e3 = Object.keys(t4), n3 = 0; n3 < e3.length; ++n3)
                t4[e3[n3]] != null && (this[e3[n3]] = t4[e3[n3]]);
          }
          return t3.prototype.node = c2.emptyArray, t3.prototype.name = "", t3.prototype.initializer = c2.emptyArray, t3.prototype.docString = "", t3.prototype.input = c2.emptyArray, t3.prototype.output = c2.emptyArray, t3.prototype.valueInfo = c2.emptyArray, t3.prototype.quantizationAnnotation = c2.emptyArray, t3.create = function(e3) {
            return new t3(e3);
          }, t3.encode = function(t4, e3) {
            if (e3 || (e3 = u2.create()), t4.node != null && t4.node.length)
              for (var n3 = 0; n3 < t4.node.length; ++n3)
                l2.onnx.NodeProto.encode(t4.node[n3], e3.uint32(10).fork()).ldelim();
            if (t4.name != null && t4.hasOwnProperty("name") && e3.uint32(18).string(t4.name), t4.initializer != null && t4.initializer.length)
              for (n3 = 0; n3 < t4.initializer.length; ++n3)
                l2.onnx.TensorProto.encode(t4.initializer[n3], e3.uint32(42).fork()).ldelim();
            if (t4.docString != null && t4.hasOwnProperty("docString") && e3.uint32(82).string(t4.docString), t4.input != null && t4.input.length)
              for (n3 = 0; n3 < t4.input.length; ++n3)
                l2.onnx.ValueInfoProto.encode(t4.input[n3], e3.uint32(90).fork()).ldelim();
            if (t4.output != null && t4.output.length)
              for (n3 = 0; n3 < t4.output.length; ++n3)
                l2.onnx.ValueInfoProto.encode(t4.output[n3], e3.uint32(98).fork()).ldelim();
            if (t4.valueInfo != null && t4.valueInfo.length)
              for (n3 = 0; n3 < t4.valueInfo.length; ++n3)
                l2.onnx.ValueInfoProto.encode(t4.valueInfo[n3], e3.uint32(106).fork()).ldelim();
            if (t4.quantizationAnnotation != null && t4.quantizationAnnotation.length)
              for (n3 = 0; n3 < t4.quantizationAnnotation.length; ++n3)
                l2.onnx.TensorAnnotation.encode(t4.quantizationAnnotation[n3], e3.uint32(114).fork()).ldelim();
            return e3;
          }, t3.encodeDelimited = function(t4, e3) {
            return this.encode(t4, e3).ldelim();
          }, t3.decode = function(t4, e3) {
            t4 instanceof s2 || (t4 = s2.create(t4));
            for (var n3 = e3 === void 0 ? t4.len : t4.pos + e3, r3 = new l2.onnx.GraphProto(); t4.pos < n3; ) {
              var i3 = t4.uint32();
              switch (i3 >>> 3) {
                case 1:
                  r3.node && r3.node.length || (r3.node = []), r3.node.push(l2.onnx.NodeProto.decode(t4, t4.uint32()));
                  break;
                case 2:
                  r3.name = t4.string();
                  break;
                case 5:
                  r3.initializer && r3.initializer.length || (r3.initializer = []), r3.initializer.push(l2.onnx.TensorProto.decode(t4, t4.uint32()));
                  break;
                case 10:
                  r3.docString = t4.string();
                  break;
                case 11:
                  r3.input && r3.input.length || (r3.input = []), r3.input.push(l2.onnx.ValueInfoProto.decode(t4, t4.uint32()));
                  break;
                case 12:
                  r3.output && r3.output.length || (r3.output = []), r3.output.push(l2.onnx.ValueInfoProto.decode(t4, t4.uint32()));
                  break;
                case 13:
                  r3.valueInfo && r3.valueInfo.length || (r3.valueInfo = []), r3.valueInfo.push(l2.onnx.ValueInfoProto.decode(t4, t4.uint32()));
                  break;
                case 14:
                  r3.quantizationAnnotation && r3.quantizationAnnotation.length || (r3.quantizationAnnotation = []), r3.quantizationAnnotation.push(l2.onnx.TensorAnnotation.decode(t4, t4.uint32()));
                  break;
                default:
                  t4.skipType(7 & i3);
              }
            }
            return r3;
          }, t3.decodeDelimited = function(t4) {
            return t4 instanceof s2 || (t4 = new s2(t4)), this.decode(t4, t4.uint32());
          }, t3.verify = function(t4) {
            if (typeof t4 != "object" || t4 === null)
              return "object expected";
            if (t4.node != null && t4.hasOwnProperty("node")) {
              if (!Array.isArray(t4.node))
                return "node: array expected";
              for (var e3 = 0; e3 < t4.node.length; ++e3)
                if (n3 = l2.onnx.NodeProto.verify(t4.node[e3]))
                  return "node." + n3;
            }
            if (t4.name != null && t4.hasOwnProperty("name") && !c2.isString(t4.name))
              return "name: string expected";
            if (t4.initializer != null && t4.hasOwnProperty("initializer")) {
              if (!Array.isArray(t4.initializer))
                return "initializer: array expected";
              for (e3 = 0; e3 < t4.initializer.length; ++e3)
                if (n3 = l2.onnx.TensorProto.verify(t4.initializer[e3]))
                  return "initializer." + n3;
            }
            if (t4.docString != null && t4.hasOwnProperty("docString") && !c2.isString(t4.docString))
              return "docString: string expected";
            if (t4.input != null && t4.hasOwnProperty("input")) {
              if (!Array.isArray(t4.input))
                return "input: array expected";
              for (e3 = 0; e3 < t4.input.length; ++e3)
                if (n3 = l2.onnx.ValueInfoProto.verify(t4.input[e3]))
                  return "input." + n3;
            }
            if (t4.output != null && t4.hasOwnProperty("output")) {
              if (!Array.isArray(t4.output))
                return "output: array expected";
              for (e3 = 0; e3 < t4.output.length; ++e3)
                if (n3 = l2.onnx.ValueInfoProto.verify(t4.output[e3]))
                  return "output." + n3;
            }
            if (t4.valueInfo != null && t4.hasOwnProperty("valueInfo")) {
              if (!Array.isArray(t4.valueInfo))
                return "valueInfo: array expected";
              for (e3 = 0; e3 < t4.valueInfo.length; ++e3)
                if (n3 = l2.onnx.ValueInfoProto.verify(t4.valueInfo[e3]))
                  return "valueInfo." + n3;
            }
            if (t4.quantizationAnnotation != null && t4.hasOwnProperty("quantizationAnnotation")) {
              if (!Array.isArray(t4.quantizationAnnotation))
                return "quantizationAnnotation: array expected";
              for (e3 = 0; e3 < t4.quantizationAnnotation.length; ++e3) {
                var n3;
                if (n3 = l2.onnx.TensorAnnotation.verify(t4.quantizationAnnotation[e3]))
                  return "quantizationAnnotation." + n3;
              }
            }
            return null;
          }, t3.fromObject = function(t4) {
            if (t4 instanceof l2.onnx.GraphProto)
              return t4;
            var e3 = new l2.onnx.GraphProto();
            if (t4.node) {
              if (!Array.isArray(t4.node))
                throw TypeError(".onnx.GraphProto.node: array expected");
              e3.node = [];
              for (var n3 = 0; n3 < t4.node.length; ++n3) {
                if (typeof t4.node[n3] != "object")
                  throw TypeError(".onnx.GraphProto.node: object expected");
                e3.node[n3] = l2.onnx.NodeProto.fromObject(t4.node[n3]);
              }
            }
            if (t4.name != null && (e3.name = String(t4.name)), t4.initializer) {
              if (!Array.isArray(t4.initializer))
                throw TypeError(".onnx.GraphProto.initializer: array expected");
              for (e3.initializer = [], n3 = 0; n3 < t4.initializer.length; ++n3) {
                if (typeof t4.initializer[n3] != "object")
                  throw TypeError(".onnx.GraphProto.initializer: object expected");
                e3.initializer[n3] = l2.onnx.TensorProto.fromObject(t4.initializer[n3]);
              }
            }
            if (t4.docString != null && (e3.docString = String(t4.docString)), t4.input) {
              if (!Array.isArray(t4.input))
                throw TypeError(".onnx.GraphProto.input: array expected");
              for (e3.input = [], n3 = 0; n3 < t4.input.length; ++n3) {
                if (typeof t4.input[n3] != "object")
                  throw TypeError(".onnx.GraphProto.input: object expected");
                e3.input[n3] = l2.onnx.ValueInfoProto.fromObject(t4.input[n3]);
              }
            }
            if (t4.output) {
              if (!Array.isArray(t4.output))
                throw TypeError(".onnx.GraphProto.output: array expected");
              for (e3.output = [], n3 = 0; n3 < t4.output.length; ++n3) {
                if (typeof t4.output[n3] != "object")
                  throw TypeError(".onnx.GraphProto.output: object expected");
                e3.output[n3] = l2.onnx.ValueInfoProto.fromObject(t4.output[n3]);
              }
            }
            if (t4.valueInfo) {
              if (!Array.isArray(t4.valueInfo))
                throw TypeError(".onnx.GraphProto.valueInfo: array expected");
              for (e3.valueInfo = [], n3 = 0; n3 < t4.valueInfo.length; ++n3) {
                if (typeof t4.valueInfo[n3] != "object")
                  throw TypeError(".onnx.GraphProto.valueInfo: object expected");
                e3.valueInfo[n3] = l2.onnx.ValueInfoProto.fromObject(t4.valueInfo[n3]);
              }
            }
            if (t4.quantizationAnnotation) {
              if (!Array.isArray(t4.quantizationAnnotation))
                throw TypeError(".onnx.GraphProto.quantizationAnnotation: array expected");
              for (e3.quantizationAnnotation = [], n3 = 0; n3 < t4.quantizationAnnotation.length; ++n3) {
                if (typeof t4.quantizationAnnotation[n3] != "object")
                  throw TypeError(".onnx.GraphProto.quantizationAnnotation: object expected");
                e3.quantizationAnnotation[n3] = l2.onnx.TensorAnnotation.fromObject(t4.quantizationAnnotation[n3]);
              }
            }
            return e3;
          }, t3.toObject = function(t4, e3) {
            e3 || (e3 = {});
            var n3 = {};
            if ((e3.arrays || e3.defaults) && (n3.node = [], n3.initializer = [], n3.input = [], n3.output = [], n3.valueInfo = [], n3.quantizationAnnotation = []), e3.defaults && (n3.name = "", n3.docString = ""), t4.node && t4.node.length) {
              n3.node = [];
              for (var r3 = 0; r3 < t4.node.length; ++r3)
                n3.node[r3] = l2.onnx.NodeProto.toObject(t4.node[r3], e3);
            }
            if (t4.name != null && t4.hasOwnProperty("name") && (n3.name = t4.name), t4.initializer && t4.initializer.length)
              for (n3.initializer = [], r3 = 0; r3 < t4.initializer.length; ++r3)
                n3.initializer[r3] = l2.onnx.TensorProto.toObject(t4.initializer[r3], e3);
            if (t4.docString != null && t4.hasOwnProperty("docString") && (n3.docString = t4.docString), t4.input && t4.input.length)
              for (n3.input = [], r3 = 0; r3 < t4.input.length; ++r3)
                n3.input[r3] = l2.onnx.ValueInfoProto.toObject(t4.input[r3], e3);
            if (t4.output && t4.output.length)
              for (n3.output = [], r3 = 0; r3 < t4.output.length; ++r3)
                n3.output[r3] = l2.onnx.ValueInfoProto.toObject(t4.output[r3], e3);
            if (t4.valueInfo && t4.valueInfo.length)
              for (n3.valueInfo = [], r3 = 0; r3 < t4.valueInfo.length; ++r3)
                n3.valueInfo[r3] = l2.onnx.ValueInfoProto.toObject(t4.valueInfo[r3], e3);
            if (t4.quantizationAnnotation && t4.quantizationAnnotation.length)
              for (n3.quantizationAnnotation = [], r3 = 0; r3 < t4.quantizationAnnotation.length; ++r3)
                n3.quantizationAnnotation[r3] = l2.onnx.TensorAnnotation.toObject(t4.quantizationAnnotation[r3], e3);
            return n3;
          }, t3.prototype.toJSON = function() {
            return this.constructor.toObject(this, a2.util.toJSONOptions);
          }, t3;
        }(), o2.TensorProto = function() {
          function t3(t4) {
            if (this.dims = [], this.floatData = [], this.int32Data = [], this.stringData = [], this.int64Data = [], this.externalData = [], this.doubleData = [], this.uint64Data = [], t4)
              for (var e3 = Object.keys(t4), n3 = 0; n3 < e3.length; ++n3)
                t4[e3[n3]] != null && (this[e3[n3]] = t4[e3[n3]]);
          }
          return t3.prototype.dims = c2.emptyArray, t3.prototype.dataType = 0, t3.prototype.segment = null, t3.prototype.floatData = c2.emptyArray, t3.prototype.int32Data = c2.emptyArray, t3.prototype.stringData = c2.emptyArray, t3.prototype.int64Data = c2.emptyArray, t3.prototype.name = "", t3.prototype.docString = "", t3.prototype.rawData = c2.newBuffer([]), t3.prototype.externalData = c2.emptyArray, t3.prototype.dataLocation = 0, t3.prototype.doubleData = c2.emptyArray, t3.prototype.uint64Data = c2.emptyArray, t3.create = function(e3) {
            return new t3(e3);
          }, t3.encode = function(t4, e3) {
            if (e3 || (e3 = u2.create()), t4.dims != null && t4.dims.length) {
              e3.uint32(10).fork();
              for (var n3 = 0; n3 < t4.dims.length; ++n3)
                e3.int64(t4.dims[n3]);
              e3.ldelim();
            }
            if (t4.dataType != null && t4.hasOwnProperty("dataType") && e3.uint32(16).int32(t4.dataType), t4.segment != null && t4.hasOwnProperty("segment") && l2.onnx.TensorProto.Segment.encode(t4.segment, e3.uint32(26).fork()).ldelim(), t4.floatData != null && t4.floatData.length) {
              for (e3.uint32(34).fork(), n3 = 0; n3 < t4.floatData.length; ++n3)
                e3.float(t4.floatData[n3]);
              e3.ldelim();
            }
            if (t4.int32Data != null && t4.int32Data.length) {
              for (e3.uint32(42).fork(), n3 = 0; n3 < t4.int32Data.length; ++n3)
                e3.int32(t4.int32Data[n3]);
              e3.ldelim();
            }
            if (t4.stringData != null && t4.stringData.length)
              for (n3 = 0; n3 < t4.stringData.length; ++n3)
                e3.uint32(50).bytes(t4.stringData[n3]);
            if (t4.int64Data != null && t4.int64Data.length) {
              for (e3.uint32(58).fork(), n3 = 0; n3 < t4.int64Data.length; ++n3)
                e3.int64(t4.int64Data[n3]);
              e3.ldelim();
            }
            if (t4.name != null && t4.hasOwnProperty("name") && e3.uint32(66).string(t4.name), t4.rawData != null && t4.hasOwnProperty("rawData") && e3.uint32(74).bytes(t4.rawData), t4.doubleData != null && t4.doubleData.length) {
              for (e3.uint32(82).fork(), n3 = 0; n3 < t4.doubleData.length; ++n3)
                e3.double(t4.doubleData[n3]);
              e3.ldelim();
            }
            if (t4.uint64Data != null && t4.uint64Data.length) {
              for (e3.uint32(90).fork(), n3 = 0; n3 < t4.uint64Data.length; ++n3)
                e3.uint64(t4.uint64Data[n3]);
              e3.ldelim();
            }
            if (t4.docString != null && t4.hasOwnProperty("docString") && e3.uint32(98).string(t4.docString), t4.externalData != null && t4.externalData.length)
              for (n3 = 0; n3 < t4.externalData.length; ++n3)
                l2.onnx.StringStringEntryProto.encode(t4.externalData[n3], e3.uint32(106).fork()).ldelim();
            return t4.dataLocation != null && t4.hasOwnProperty("dataLocation") && e3.uint32(112).int32(t4.dataLocation), e3;
          }, t3.encodeDelimited = function(t4, e3) {
            return this.encode(t4, e3).ldelim();
          }, t3.decode = function(t4, e3) {
            t4 instanceof s2 || (t4 = s2.create(t4));
            for (var n3 = e3 === void 0 ? t4.len : t4.pos + e3, r3 = new l2.onnx.TensorProto(); t4.pos < n3; ) {
              var i3 = t4.uint32();
              switch (i3 >>> 3) {
                case 1:
                  if (r3.dims && r3.dims.length || (r3.dims = []), (7 & i3) == 2)
                    for (var o3 = t4.uint32() + t4.pos; t4.pos < o3; )
                      r3.dims.push(t4.int64());
                  else
                    r3.dims.push(t4.int64());
                  break;
                case 2:
                  r3.dataType = t4.int32();
                  break;
                case 3:
                  r3.segment = l2.onnx.TensorProto.Segment.decode(t4, t4.uint32());
                  break;
                case 4:
                  if (r3.floatData && r3.floatData.length || (r3.floatData = []), (7 & i3) == 2)
                    for (o3 = t4.uint32() + t4.pos; t4.pos < o3; )
                      r3.floatData.push(t4.float());
                  else
                    r3.floatData.push(t4.float());
                  break;
                case 5:
                  if (r3.int32Data && r3.int32Data.length || (r3.int32Data = []), (7 & i3) == 2)
                    for (o3 = t4.uint32() + t4.pos; t4.pos < o3; )
                      r3.int32Data.push(t4.int32());
                  else
                    r3.int32Data.push(t4.int32());
                  break;
                case 6:
                  r3.stringData && r3.stringData.length || (r3.stringData = []), r3.stringData.push(t4.bytes());
                  break;
                case 7:
                  if (r3.int64Data && r3.int64Data.length || (r3.int64Data = []), (7 & i3) == 2)
                    for (o3 = t4.uint32() + t4.pos; t4.pos < o3; )
                      r3.int64Data.push(t4.int64());
                  else
                    r3.int64Data.push(t4.int64());
                  break;
                case 8:
                  r3.name = t4.string();
                  break;
                case 12:
                  r3.docString = t4.string();
                  break;
                case 9:
                  r3.rawData = t4.bytes();
                  break;
                case 13:
                  r3.externalData && r3.externalData.length || (r3.externalData = []), r3.externalData.push(l2.onnx.StringStringEntryProto.decode(t4, t4.uint32()));
                  break;
                case 14:
                  r3.dataLocation = t4.int32();
                  break;
                case 10:
                  if (r3.doubleData && r3.doubleData.length || (r3.doubleData = []), (7 & i3) == 2)
                    for (o3 = t4.uint32() + t4.pos; t4.pos < o3; )
                      r3.doubleData.push(t4.double());
                  else
                    r3.doubleData.push(t4.double());
                  break;
                case 11:
                  if (r3.uint64Data && r3.uint64Data.length || (r3.uint64Data = []), (7 & i3) == 2)
                    for (o3 = t4.uint32() + t4.pos; t4.pos < o3; )
                      r3.uint64Data.push(t4.uint64());
                  else
                    r3.uint64Data.push(t4.uint64());
                  break;
                default:
                  t4.skipType(7 & i3);
              }
            }
            return r3;
          }, t3.decodeDelimited = function(t4) {
            return t4 instanceof s2 || (t4 = new s2(t4)), this.decode(t4, t4.uint32());
          }, t3.verify = function(t4) {
            if (typeof t4 != "object" || t4 === null)
              return "object expected";
            if (t4.dims != null && t4.hasOwnProperty("dims")) {
              if (!Array.isArray(t4.dims))
                return "dims: array expected";
              for (var e3 = 0; e3 < t4.dims.length; ++e3)
                if (!(c2.isInteger(t4.dims[e3]) || t4.dims[e3] && c2.isInteger(t4.dims[e3].low) && c2.isInteger(t4.dims[e3].high)))
                  return "dims: integer|Long[] expected";
            }
            if (t4.dataType != null && t4.hasOwnProperty("dataType") && !c2.isInteger(t4.dataType))
              return "dataType: integer expected";
            if (t4.segment != null && t4.hasOwnProperty("segment") && (n3 = l2.onnx.TensorProto.Segment.verify(t4.segment)))
              return "segment." + n3;
            if (t4.floatData != null && t4.hasOwnProperty("floatData")) {
              if (!Array.isArray(t4.floatData))
                return "floatData: array expected";
              for (e3 = 0; e3 < t4.floatData.length; ++e3)
                if (typeof t4.floatData[e3] != "number")
                  return "floatData: number[] expected";
            }
            if (t4.int32Data != null && t4.hasOwnProperty("int32Data")) {
              if (!Array.isArray(t4.int32Data))
                return "int32Data: array expected";
              for (e3 = 0; e3 < t4.int32Data.length; ++e3)
                if (!c2.isInteger(t4.int32Data[e3]))
                  return "int32Data: integer[] expected";
            }
            if (t4.stringData != null && t4.hasOwnProperty("stringData")) {
              if (!Array.isArray(t4.stringData))
                return "stringData: array expected";
              for (e3 = 0; e3 < t4.stringData.length; ++e3)
                if (!(t4.stringData[e3] && typeof t4.stringData[e3].length == "number" || c2.isString(t4.stringData[e3])))
                  return "stringData: buffer[] expected";
            }
            if (t4.int64Data != null && t4.hasOwnProperty("int64Data")) {
              if (!Array.isArray(t4.int64Data))
                return "int64Data: array expected";
              for (e3 = 0; e3 < t4.int64Data.length; ++e3)
                if (!(c2.isInteger(t4.int64Data[e3]) || t4.int64Data[e3] && c2.isInteger(t4.int64Data[e3].low) && c2.isInteger(t4.int64Data[e3].high)))
                  return "int64Data: integer|Long[] expected";
            }
            if (t4.name != null && t4.hasOwnProperty("name") && !c2.isString(t4.name))
              return "name: string expected";
            if (t4.docString != null && t4.hasOwnProperty("docString") && !c2.isString(t4.docString))
              return "docString: string expected";
            if (t4.rawData != null && t4.hasOwnProperty("rawData") && !(t4.rawData && typeof t4.rawData.length == "number" || c2.isString(t4.rawData)))
              return "rawData: buffer expected";
            if (t4.externalData != null && t4.hasOwnProperty("externalData")) {
              if (!Array.isArray(t4.externalData))
                return "externalData: array expected";
              for (e3 = 0; e3 < t4.externalData.length; ++e3) {
                var n3;
                if (n3 = l2.onnx.StringStringEntryProto.verify(t4.externalData[e3]))
                  return "externalData." + n3;
              }
            }
            if (t4.dataLocation != null && t4.hasOwnProperty("dataLocation"))
              switch (t4.dataLocation) {
                default:
                  return "dataLocation: enum value expected";
                case 0:
                case 1:
              }
            if (t4.doubleData != null && t4.hasOwnProperty("doubleData")) {
              if (!Array.isArray(t4.doubleData))
                return "doubleData: array expected";
              for (e3 = 0; e3 < t4.doubleData.length; ++e3)
                if (typeof t4.doubleData[e3] != "number")
                  return "doubleData: number[] expected";
            }
            if (t4.uint64Data != null && t4.hasOwnProperty("uint64Data")) {
              if (!Array.isArray(t4.uint64Data))
                return "uint64Data: array expected";
              for (e3 = 0; e3 < t4.uint64Data.length; ++e3)
                if (!(c2.isInteger(t4.uint64Data[e3]) || t4.uint64Data[e3] && c2.isInteger(t4.uint64Data[e3].low) && c2.isInteger(t4.uint64Data[e3].high)))
                  return "uint64Data: integer|Long[] expected";
            }
            return null;
          }, t3.fromObject = function(t4) {
            if (t4 instanceof l2.onnx.TensorProto)
              return t4;
            var e3 = new l2.onnx.TensorProto();
            if (t4.dims) {
              if (!Array.isArray(t4.dims))
                throw TypeError(".onnx.TensorProto.dims: array expected");
              e3.dims = [];
              for (var n3 = 0; n3 < t4.dims.length; ++n3)
                c2.Long ? (e3.dims[n3] = c2.Long.fromValue(t4.dims[n3])).unsigned = false : typeof t4.dims[n3] == "string" ? e3.dims[n3] = parseInt(t4.dims[n3], 10) : typeof t4.dims[n3] == "number" ? e3.dims[n3] = t4.dims[n3] : typeof t4.dims[n3] == "object" && (e3.dims[n3] = new c2.LongBits(t4.dims[n3].low >>> 0, t4.dims[n3].high >>> 0).toNumber());
            }
            if (t4.dataType != null && (e3.dataType = 0 | t4.dataType), t4.segment != null) {
              if (typeof t4.segment != "object")
                throw TypeError(".onnx.TensorProto.segment: object expected");
              e3.segment = l2.onnx.TensorProto.Segment.fromObject(t4.segment);
            }
            if (t4.floatData) {
              if (!Array.isArray(t4.floatData))
                throw TypeError(".onnx.TensorProto.floatData: array expected");
              for (e3.floatData = [], n3 = 0; n3 < t4.floatData.length; ++n3)
                e3.floatData[n3] = Number(t4.floatData[n3]);
            }
            if (t4.int32Data) {
              if (!Array.isArray(t4.int32Data))
                throw TypeError(".onnx.TensorProto.int32Data: array expected");
              for (e3.int32Data = [], n3 = 0; n3 < t4.int32Data.length; ++n3)
                e3.int32Data[n3] = 0 | t4.int32Data[n3];
            }
            if (t4.stringData) {
              if (!Array.isArray(t4.stringData))
                throw TypeError(".onnx.TensorProto.stringData: array expected");
              for (e3.stringData = [], n3 = 0; n3 < t4.stringData.length; ++n3)
                typeof t4.stringData[n3] == "string" ? c2.base64.decode(t4.stringData[n3], e3.stringData[n3] = c2.newBuffer(c2.base64.length(t4.stringData[n3])), 0) : t4.stringData[n3].length && (e3.stringData[n3] = t4.stringData[n3]);
            }
            if (t4.int64Data) {
              if (!Array.isArray(t4.int64Data))
                throw TypeError(".onnx.TensorProto.int64Data: array expected");
              for (e3.int64Data = [], n3 = 0; n3 < t4.int64Data.length; ++n3)
                c2.Long ? (e3.int64Data[n3] = c2.Long.fromValue(t4.int64Data[n3])).unsigned = false : typeof t4.int64Data[n3] == "string" ? e3.int64Data[n3] = parseInt(t4.int64Data[n3], 10) : typeof t4.int64Data[n3] == "number" ? e3.int64Data[n3] = t4.int64Data[n3] : typeof t4.int64Data[n3] == "object" && (e3.int64Data[n3] = new c2.LongBits(t4.int64Data[n3].low >>> 0, t4.int64Data[n3].high >>> 0).toNumber());
            }
            if (t4.name != null && (e3.name = String(t4.name)), t4.docString != null && (e3.docString = String(t4.docString)), t4.rawData != null && (typeof t4.rawData == "string" ? c2.base64.decode(t4.rawData, e3.rawData = c2.newBuffer(c2.base64.length(t4.rawData)), 0) : t4.rawData.length && (e3.rawData = t4.rawData)), t4.externalData) {
              if (!Array.isArray(t4.externalData))
                throw TypeError(".onnx.TensorProto.externalData: array expected");
              for (e3.externalData = [], n3 = 0; n3 < t4.externalData.length; ++n3) {
                if (typeof t4.externalData[n3] != "object")
                  throw TypeError(".onnx.TensorProto.externalData: object expected");
                e3.externalData[n3] = l2.onnx.StringStringEntryProto.fromObject(t4.externalData[n3]);
              }
            }
            switch (t4.dataLocation) {
              case "DEFAULT":
              case 0:
                e3.dataLocation = 0;
                break;
              case "EXTERNAL":
              case 1:
                e3.dataLocation = 1;
            }
            if (t4.doubleData) {
              if (!Array.isArray(t4.doubleData))
                throw TypeError(".onnx.TensorProto.doubleData: array expected");
              for (e3.doubleData = [], n3 = 0; n3 < t4.doubleData.length; ++n3)
                e3.doubleData[n3] = Number(t4.doubleData[n3]);
            }
            if (t4.uint64Data) {
              if (!Array.isArray(t4.uint64Data))
                throw TypeError(".onnx.TensorProto.uint64Data: array expected");
              for (e3.uint64Data = [], n3 = 0; n3 < t4.uint64Data.length; ++n3)
                c2.Long ? (e3.uint64Data[n3] = c2.Long.fromValue(t4.uint64Data[n3])).unsigned = true : typeof t4.uint64Data[n3] == "string" ? e3.uint64Data[n3] = parseInt(t4.uint64Data[n3], 10) : typeof t4.uint64Data[n3] == "number" ? e3.uint64Data[n3] = t4.uint64Data[n3] : typeof t4.uint64Data[n3] == "object" && (e3.uint64Data[n3] = new c2.LongBits(t4.uint64Data[n3].low >>> 0, t4.uint64Data[n3].high >>> 0).toNumber(true));
            }
            return e3;
          }, t3.toObject = function(t4, e3) {
            e3 || (e3 = {});
            var n3 = {};
            if ((e3.arrays || e3.defaults) && (n3.dims = [], n3.floatData = [], n3.int32Data = [], n3.stringData = [], n3.int64Data = [], n3.doubleData = [], n3.uint64Data = [], n3.externalData = []), e3.defaults && (n3.dataType = 0, n3.segment = null, n3.name = "", e3.bytes === String ? n3.rawData = "" : (n3.rawData = [], e3.bytes !== Array && (n3.rawData = c2.newBuffer(n3.rawData))), n3.docString = "", n3.dataLocation = e3.enums === String ? "DEFAULT" : 0), t4.dims && t4.dims.length) {
              n3.dims = [];
              for (var r3 = 0; r3 < t4.dims.length; ++r3)
                typeof t4.dims[r3] == "number" ? n3.dims[r3] = e3.longs === String ? String(t4.dims[r3]) : t4.dims[r3] : n3.dims[r3] = e3.longs === String ? c2.Long.prototype.toString.call(t4.dims[r3]) : e3.longs === Number ? new c2.LongBits(t4.dims[r3].low >>> 0, t4.dims[r3].high >>> 0).toNumber() : t4.dims[r3];
            }
            if (t4.dataType != null && t4.hasOwnProperty("dataType") && (n3.dataType = t4.dataType), t4.segment != null && t4.hasOwnProperty("segment") && (n3.segment = l2.onnx.TensorProto.Segment.toObject(t4.segment, e3)), t4.floatData && t4.floatData.length)
              for (n3.floatData = [], r3 = 0; r3 < t4.floatData.length; ++r3)
                n3.floatData[r3] = e3.json && !isFinite(t4.floatData[r3]) ? String(t4.floatData[r3]) : t4.floatData[r3];
            if (t4.int32Data && t4.int32Data.length)
              for (n3.int32Data = [], r3 = 0; r3 < t4.int32Data.length; ++r3)
                n3.int32Data[r3] = t4.int32Data[r3];
            if (t4.stringData && t4.stringData.length)
              for (n3.stringData = [], r3 = 0; r3 < t4.stringData.length; ++r3)
                n3.stringData[r3] = e3.bytes === String ? c2.base64.encode(t4.stringData[r3], 0, t4.stringData[r3].length) : e3.bytes === Array ? Array.prototype.slice.call(t4.stringData[r3]) : t4.stringData[r3];
            if (t4.int64Data && t4.int64Data.length)
              for (n3.int64Data = [], r3 = 0; r3 < t4.int64Data.length; ++r3)
                typeof t4.int64Data[r3] == "number" ? n3.int64Data[r3] = e3.longs === String ? String(t4.int64Data[r3]) : t4.int64Data[r3] : n3.int64Data[r3] = e3.longs === String ? c2.Long.prototype.toString.call(t4.int64Data[r3]) : e3.longs === Number ? new c2.LongBits(t4.int64Data[r3].low >>> 0, t4.int64Data[r3].high >>> 0).toNumber() : t4.int64Data[r3];
            if (t4.name != null && t4.hasOwnProperty("name") && (n3.name = t4.name), t4.rawData != null && t4.hasOwnProperty("rawData") && (n3.rawData = e3.bytes === String ? c2.base64.encode(t4.rawData, 0, t4.rawData.length) : e3.bytes === Array ? Array.prototype.slice.call(t4.rawData) : t4.rawData), t4.doubleData && t4.doubleData.length)
              for (n3.doubleData = [], r3 = 0; r3 < t4.doubleData.length; ++r3)
                n3.doubleData[r3] = e3.json && !isFinite(t4.doubleData[r3]) ? String(t4.doubleData[r3]) : t4.doubleData[r3];
            if (t4.uint64Data && t4.uint64Data.length)
              for (n3.uint64Data = [], r3 = 0; r3 < t4.uint64Data.length; ++r3)
                typeof t4.uint64Data[r3] == "number" ? n3.uint64Data[r3] = e3.longs === String ? String(t4.uint64Data[r3]) : t4.uint64Data[r3] : n3.uint64Data[r3] = e3.longs === String ? c2.Long.prototype.toString.call(t4.uint64Data[r3]) : e3.longs === Number ? new c2.LongBits(t4.uint64Data[r3].low >>> 0, t4.uint64Data[r3].high >>> 0).toNumber(true) : t4.uint64Data[r3];
            if (t4.docString != null && t4.hasOwnProperty("docString") && (n3.docString = t4.docString), t4.externalData && t4.externalData.length)
              for (n3.externalData = [], r3 = 0; r3 < t4.externalData.length; ++r3)
                n3.externalData[r3] = l2.onnx.StringStringEntryProto.toObject(t4.externalData[r3], e3);
            return t4.dataLocation != null && t4.hasOwnProperty("dataLocation") && (n3.dataLocation = e3.enums === String ? l2.onnx.TensorProto.DataLocation[t4.dataLocation] : t4.dataLocation), n3;
          }, t3.prototype.toJSON = function() {
            return this.constructor.toObject(this, a2.util.toJSONOptions);
          }, t3.DataType = function() {
            var t4 = {}, e3 = Object.create(t4);
            return e3[t4[0] = "UNDEFINED"] = 0, e3[t4[1] = "FLOAT"] = 1, e3[t4[2] = "UINT8"] = 2, e3[t4[3] = "INT8"] = 3, e3[t4[4] = "UINT16"] = 4, e3[t4[5] = "INT16"] = 5, e3[t4[6] = "INT32"] = 6, e3[t4[7] = "INT64"] = 7, e3[t4[8] = "STRING"] = 8, e3[t4[9] = "BOOL"] = 9, e3[t4[10] = "FLOAT16"] = 10, e3[t4[11] = "DOUBLE"] = 11, e3[t4[12] = "UINT32"] = 12, e3[t4[13] = "UINT64"] = 13, e3[t4[14] = "COMPLEX64"] = 14, e3[t4[15] = "COMPLEX128"] = 15, e3[t4[16] = "BFLOAT16"] = 16, e3;
          }(), t3.Segment = function() {
            function t4(t5) {
              if (t5)
                for (var e3 = Object.keys(t5), n3 = 0; n3 < e3.length; ++n3)
                  t5[e3[n3]] != null && (this[e3[n3]] = t5[e3[n3]]);
            }
            return t4.prototype.begin = c2.Long ? c2.Long.fromBits(0, 0, false) : 0, t4.prototype.end = c2.Long ? c2.Long.fromBits(0, 0, false) : 0, t4.create = function(e3) {
              return new t4(e3);
            }, t4.encode = function(t5, e3) {
              return e3 || (e3 = u2.create()), t5.begin != null && t5.hasOwnProperty("begin") && e3.uint32(8).int64(t5.begin), t5.end != null && t5.hasOwnProperty("end") && e3.uint32(16).int64(t5.end), e3;
            }, t4.encodeDelimited = function(t5, e3) {
              return this.encode(t5, e3).ldelim();
            }, t4.decode = function(t5, e3) {
              t5 instanceof s2 || (t5 = s2.create(t5));
              for (var n3 = e3 === void 0 ? t5.len : t5.pos + e3, r3 = new l2.onnx.TensorProto.Segment(); t5.pos < n3; ) {
                var i3 = t5.uint32();
                switch (i3 >>> 3) {
                  case 1:
                    r3.begin = t5.int64();
                    break;
                  case 2:
                    r3.end = t5.int64();
                    break;
                  default:
                    t5.skipType(7 & i3);
                }
              }
              return r3;
            }, t4.decodeDelimited = function(t5) {
              return t5 instanceof s2 || (t5 = new s2(t5)), this.decode(t5, t5.uint32());
            }, t4.verify = function(t5) {
              return typeof t5 != "object" || t5 === null ? "object expected" : t5.begin != null && t5.hasOwnProperty("begin") && !(c2.isInteger(t5.begin) || t5.begin && c2.isInteger(t5.begin.low) && c2.isInteger(t5.begin.high)) ? "begin: integer|Long expected" : t5.end != null && t5.hasOwnProperty("end") && !(c2.isInteger(t5.end) || t5.end && c2.isInteger(t5.end.low) && c2.isInteger(t5.end.high)) ? "end: integer|Long expected" : null;
            }, t4.fromObject = function(t5) {
              if (t5 instanceof l2.onnx.TensorProto.Segment)
                return t5;
              var e3 = new l2.onnx.TensorProto.Segment();
              return t5.begin != null && (c2.Long ? (e3.begin = c2.Long.fromValue(t5.begin)).unsigned = false : typeof t5.begin == "string" ? e3.begin = parseInt(t5.begin, 10) : typeof t5.begin == "number" ? e3.begin = t5.begin : typeof t5.begin == "object" && (e3.begin = new c2.LongBits(t5.begin.low >>> 0, t5.begin.high >>> 0).toNumber())), t5.end != null && (c2.Long ? (e3.end = c2.Long.fromValue(t5.end)).unsigned = false : typeof t5.end == "string" ? e3.end = parseInt(t5.end, 10) : typeof t5.end == "number" ? e3.end = t5.end : typeof t5.end == "object" && (e3.end = new c2.LongBits(t5.end.low >>> 0, t5.end.high >>> 0).toNumber())), e3;
            }, t4.toObject = function(t5, e3) {
              e3 || (e3 = {});
              var n3 = {};
              if (e3.defaults) {
                if (c2.Long) {
                  var r3 = new c2.Long(0, 0, false);
                  n3.begin = e3.longs === String ? r3.toString() : e3.longs === Number ? r3.toNumber() : r3;
                } else
                  n3.begin = e3.longs === String ? "0" : 0;
                c2.Long ? (r3 = new c2.Long(0, 0, false), n3.end = e3.longs === String ? r3.toString() : e3.longs === Number ? r3.toNumber() : r3) : n3.end = e3.longs === String ? "0" : 0;
              }
              return t5.begin != null && t5.hasOwnProperty("begin") && (typeof t5.begin == "number" ? n3.begin = e3.longs === String ? String(t5.begin) : t5.begin : n3.begin = e3.longs === String ? c2.Long.prototype.toString.call(t5.begin) : e3.longs === Number ? new c2.LongBits(t5.begin.low >>> 0, t5.begin.high >>> 0).toNumber() : t5.begin), t5.end != null && t5.hasOwnProperty("end") && (typeof t5.end == "number" ? n3.end = e3.longs === String ? String(t5.end) : t5.end : n3.end = e3.longs === String ? c2.Long.prototype.toString.call(t5.end) : e3.longs === Number ? new c2.LongBits(t5.end.low >>> 0, t5.end.high >>> 0).toNumber() : t5.end), n3;
            }, t4.prototype.toJSON = function() {
              return this.constructor.toObject(this, a2.util.toJSONOptions);
            }, t4;
          }(), t3.DataLocation = function() {
            var t4 = {}, e3 = Object.create(t4);
            return e3[t4[0] = "DEFAULT"] = 0, e3[t4[1] = "EXTERNAL"] = 1, e3;
          }(), t3;
        }(), o2.TensorShapeProto = function() {
          function t3(t4) {
            if (this.dim = [], t4)
              for (var e3 = Object.keys(t4), n3 = 0; n3 < e3.length; ++n3)
                t4[e3[n3]] != null && (this[e3[n3]] = t4[e3[n3]]);
          }
          return t3.prototype.dim = c2.emptyArray, t3.create = function(e3) {
            return new t3(e3);
          }, t3.encode = function(t4, e3) {
            if (e3 || (e3 = u2.create()), t4.dim != null && t4.dim.length)
              for (var n3 = 0; n3 < t4.dim.length; ++n3)
                l2.onnx.TensorShapeProto.Dimension.encode(t4.dim[n3], e3.uint32(10).fork()).ldelim();
            return e3;
          }, t3.encodeDelimited = function(t4, e3) {
            return this.encode(t4, e3).ldelim();
          }, t3.decode = function(t4, e3) {
            t4 instanceof s2 || (t4 = s2.create(t4));
            for (var n3 = e3 === void 0 ? t4.len : t4.pos + e3, r3 = new l2.onnx.TensorShapeProto(); t4.pos < n3; ) {
              var i3 = t4.uint32();
              i3 >>> 3 == 1 ? (r3.dim && r3.dim.length || (r3.dim = []), r3.dim.push(l2.onnx.TensorShapeProto.Dimension.decode(t4, t4.uint32()))) : t4.skipType(7 & i3);
            }
            return r3;
          }, t3.decodeDelimited = function(t4) {
            return t4 instanceof s2 || (t4 = new s2(t4)), this.decode(t4, t4.uint32());
          }, t3.verify = function(t4) {
            if (typeof t4 != "object" || t4 === null)
              return "object expected";
            if (t4.dim != null && t4.hasOwnProperty("dim")) {
              if (!Array.isArray(t4.dim))
                return "dim: array expected";
              for (var e3 = 0; e3 < t4.dim.length; ++e3) {
                var n3 = l2.onnx.TensorShapeProto.Dimension.verify(t4.dim[e3]);
                if (n3)
                  return "dim." + n3;
              }
            }
            return null;
          }, t3.fromObject = function(t4) {
            if (t4 instanceof l2.onnx.TensorShapeProto)
              return t4;
            var e3 = new l2.onnx.TensorShapeProto();
            if (t4.dim) {
              if (!Array.isArray(t4.dim))
                throw TypeError(".onnx.TensorShapeProto.dim: array expected");
              e3.dim = [];
              for (var n3 = 0; n3 < t4.dim.length; ++n3) {
                if (typeof t4.dim[n3] != "object")
                  throw TypeError(".onnx.TensorShapeProto.dim: object expected");
                e3.dim[n3] = l2.onnx.TensorShapeProto.Dimension.fromObject(t4.dim[n3]);
              }
            }
            return e3;
          }, t3.toObject = function(t4, e3) {
            e3 || (e3 = {});
            var n3 = {};
            if ((e3.arrays || e3.defaults) && (n3.dim = []), t4.dim && t4.dim.length) {
              n3.dim = [];
              for (var r3 = 0; r3 < t4.dim.length; ++r3)
                n3.dim[r3] = l2.onnx.TensorShapeProto.Dimension.toObject(t4.dim[r3], e3);
            }
            return n3;
          }, t3.prototype.toJSON = function() {
            return this.constructor.toObject(this, a2.util.toJSONOptions);
          }, t3.Dimension = function() {
            function t4(t5) {
              if (t5)
                for (var e4 = Object.keys(t5), n3 = 0; n3 < e4.length; ++n3)
                  t5[e4[n3]] != null && (this[e4[n3]] = t5[e4[n3]]);
            }
            var e3;
            return t4.prototype.dimValue = c2.Long ? c2.Long.fromBits(0, 0, false) : 0, t4.prototype.dimParam = "", t4.prototype.denotation = "", Object.defineProperty(t4.prototype, "value", {get: c2.oneOfGetter(e3 = ["dimValue", "dimParam"]), set: c2.oneOfSetter(e3)}), t4.create = function(e4) {
              return new t4(e4);
            }, t4.encode = function(t5, e4) {
              return e4 || (e4 = u2.create()), t5.dimValue != null && t5.hasOwnProperty("dimValue") && e4.uint32(8).int64(t5.dimValue), t5.dimParam != null && t5.hasOwnProperty("dimParam") && e4.uint32(18).string(t5.dimParam), t5.denotation != null && t5.hasOwnProperty("denotation") && e4.uint32(26).string(t5.denotation), e4;
            }, t4.encodeDelimited = function(t5, e4) {
              return this.encode(t5, e4).ldelim();
            }, t4.decode = function(t5, e4) {
              t5 instanceof s2 || (t5 = s2.create(t5));
              for (var n3 = e4 === void 0 ? t5.len : t5.pos + e4, r3 = new l2.onnx.TensorShapeProto.Dimension(); t5.pos < n3; ) {
                var i3 = t5.uint32();
                switch (i3 >>> 3) {
                  case 1:
                    r3.dimValue = t5.int64();
                    break;
                  case 2:
                    r3.dimParam = t5.string();
                    break;
                  case 3:
                    r3.denotation = t5.string();
                    break;
                  default:
                    t5.skipType(7 & i3);
                }
              }
              return r3;
            }, t4.decodeDelimited = function(t5) {
              return t5 instanceof s2 || (t5 = new s2(t5)), this.decode(t5, t5.uint32());
            }, t4.verify = function(t5) {
              if (typeof t5 != "object" || t5 === null)
                return "object expected";
              var e4 = {};
              if (t5.dimValue != null && t5.hasOwnProperty("dimValue") && (e4.value = 1, !(c2.isInteger(t5.dimValue) || t5.dimValue && c2.isInteger(t5.dimValue.low) && c2.isInteger(t5.dimValue.high))))
                return "dimValue: integer|Long expected";
              if (t5.dimParam != null && t5.hasOwnProperty("dimParam")) {
                if (e4.value === 1)
                  return "value: multiple values";
                if (e4.value = 1, !c2.isString(t5.dimParam))
                  return "dimParam: string expected";
              }
              return t5.denotation != null && t5.hasOwnProperty("denotation") && !c2.isString(t5.denotation) ? "denotation: string expected" : null;
            }, t4.fromObject = function(t5) {
              if (t5 instanceof l2.onnx.TensorShapeProto.Dimension)
                return t5;
              var e4 = new l2.onnx.TensorShapeProto.Dimension();
              return t5.dimValue != null && (c2.Long ? (e4.dimValue = c2.Long.fromValue(t5.dimValue)).unsigned = false : typeof t5.dimValue == "string" ? e4.dimValue = parseInt(t5.dimValue, 10) : typeof t5.dimValue == "number" ? e4.dimValue = t5.dimValue : typeof t5.dimValue == "object" && (e4.dimValue = new c2.LongBits(t5.dimValue.low >>> 0, t5.dimValue.high >>> 0).toNumber())), t5.dimParam != null && (e4.dimParam = String(t5.dimParam)), t5.denotation != null && (e4.denotation = String(t5.denotation)), e4;
            }, t4.toObject = function(t5, e4) {
              e4 || (e4 = {});
              var n3 = {};
              return e4.defaults && (n3.denotation = ""), t5.dimValue != null && t5.hasOwnProperty("dimValue") && (typeof t5.dimValue == "number" ? n3.dimValue = e4.longs === String ? String(t5.dimValue) : t5.dimValue : n3.dimValue = e4.longs === String ? c2.Long.prototype.toString.call(t5.dimValue) : e4.longs === Number ? new c2.LongBits(t5.dimValue.low >>> 0, t5.dimValue.high >>> 0).toNumber() : t5.dimValue, e4.oneofs && (n3.value = "dimValue")), t5.dimParam != null && t5.hasOwnProperty("dimParam") && (n3.dimParam = t5.dimParam, e4.oneofs && (n3.value = "dimParam")), t5.denotation != null && t5.hasOwnProperty("denotation") && (n3.denotation = t5.denotation), n3;
            }, t4.prototype.toJSON = function() {
              return this.constructor.toObject(this, a2.util.toJSONOptions);
            }, t4;
          }(), t3;
        }(), o2.TypeProto = function() {
          function t3(t4) {
            if (t4)
              for (var e4 = Object.keys(t4), n3 = 0; n3 < e4.length; ++n3)
                t4[e4[n3]] != null && (this[e4[n3]] = t4[e4[n3]]);
          }
          var e3;
          return t3.prototype.tensorType = null, t3.prototype.denotation = "", Object.defineProperty(t3.prototype, "value", {get: c2.oneOfGetter(e3 = ["tensorType"]), set: c2.oneOfSetter(e3)}), t3.create = function(e4) {
            return new t3(e4);
          }, t3.encode = function(t4, e4) {
            return e4 || (e4 = u2.create()), t4.tensorType != null && t4.hasOwnProperty("tensorType") && l2.onnx.TypeProto.Tensor.encode(t4.tensorType, e4.uint32(10).fork()).ldelim(), t4.denotation != null && t4.hasOwnProperty("denotation") && e4.uint32(50).string(t4.denotation), e4;
          }, t3.encodeDelimited = function(t4, e4) {
            return this.encode(t4, e4).ldelim();
          }, t3.decode = function(t4, e4) {
            t4 instanceof s2 || (t4 = s2.create(t4));
            for (var n3 = e4 === void 0 ? t4.len : t4.pos + e4, r3 = new l2.onnx.TypeProto(); t4.pos < n3; ) {
              var i3 = t4.uint32();
              switch (i3 >>> 3) {
                case 1:
                  r3.tensorType = l2.onnx.TypeProto.Tensor.decode(t4, t4.uint32());
                  break;
                case 6:
                  r3.denotation = t4.string();
                  break;
                default:
                  t4.skipType(7 & i3);
              }
            }
            return r3;
          }, t3.decodeDelimited = function(t4) {
            return t4 instanceof s2 || (t4 = new s2(t4)), this.decode(t4, t4.uint32());
          }, t3.verify = function(t4) {
            if (typeof t4 != "object" || t4 === null)
              return "object expected";
            if (t4.tensorType != null && t4.hasOwnProperty("tensorType")) {
              var e4 = l2.onnx.TypeProto.Tensor.verify(t4.tensorType);
              if (e4)
                return "tensorType." + e4;
            }
            return t4.denotation != null && t4.hasOwnProperty("denotation") && !c2.isString(t4.denotation) ? "denotation: string expected" : null;
          }, t3.fromObject = function(t4) {
            if (t4 instanceof l2.onnx.TypeProto)
              return t4;
            var e4 = new l2.onnx.TypeProto();
            if (t4.tensorType != null) {
              if (typeof t4.tensorType != "object")
                throw TypeError(".onnx.TypeProto.tensorType: object expected");
              e4.tensorType = l2.onnx.TypeProto.Tensor.fromObject(t4.tensorType);
            }
            return t4.denotation != null && (e4.denotation = String(t4.denotation)), e4;
          }, t3.toObject = function(t4, e4) {
            e4 || (e4 = {});
            var n3 = {};
            return e4.defaults && (n3.denotation = ""), t4.tensorType != null && t4.hasOwnProperty("tensorType") && (n3.tensorType = l2.onnx.TypeProto.Tensor.toObject(t4.tensorType, e4), e4.oneofs && (n3.value = "tensorType")), t4.denotation != null && t4.hasOwnProperty("denotation") && (n3.denotation = t4.denotation), n3;
          }, t3.prototype.toJSON = function() {
            return this.constructor.toObject(this, a2.util.toJSONOptions);
          }, t3.Tensor = function() {
            function t4(t5) {
              if (t5)
                for (var e4 = Object.keys(t5), n3 = 0; n3 < e4.length; ++n3)
                  t5[e4[n3]] != null && (this[e4[n3]] = t5[e4[n3]]);
            }
            return t4.prototype.elemType = 0, t4.prototype.shape = null, t4.create = function(e4) {
              return new t4(e4);
            }, t4.encode = function(t5, e4) {
              return e4 || (e4 = u2.create()), t5.elemType != null && t5.hasOwnProperty("elemType") && e4.uint32(8).int32(t5.elemType), t5.shape != null && t5.hasOwnProperty("shape") && l2.onnx.TensorShapeProto.encode(t5.shape, e4.uint32(18).fork()).ldelim(), e4;
            }, t4.encodeDelimited = function(t5, e4) {
              return this.encode(t5, e4).ldelim();
            }, t4.decode = function(t5, e4) {
              t5 instanceof s2 || (t5 = s2.create(t5));
              for (var n3 = e4 === void 0 ? t5.len : t5.pos + e4, r3 = new l2.onnx.TypeProto.Tensor(); t5.pos < n3; ) {
                var i3 = t5.uint32();
                switch (i3 >>> 3) {
                  case 1:
                    r3.elemType = t5.int32();
                    break;
                  case 2:
                    r3.shape = l2.onnx.TensorShapeProto.decode(t5, t5.uint32());
                    break;
                  default:
                    t5.skipType(7 & i3);
                }
              }
              return r3;
            }, t4.decodeDelimited = function(t5) {
              return t5 instanceof s2 || (t5 = new s2(t5)), this.decode(t5, t5.uint32());
            }, t4.verify = function(t5) {
              if (typeof t5 != "object" || t5 === null)
                return "object expected";
              if (t5.elemType != null && t5.hasOwnProperty("elemType") && !c2.isInteger(t5.elemType))
                return "elemType: integer expected";
              if (t5.shape != null && t5.hasOwnProperty("shape")) {
                var e4 = l2.onnx.TensorShapeProto.verify(t5.shape);
                if (e4)
                  return "shape." + e4;
              }
              return null;
            }, t4.fromObject = function(t5) {
              if (t5 instanceof l2.onnx.TypeProto.Tensor)
                return t5;
              var e4 = new l2.onnx.TypeProto.Tensor();
              if (t5.elemType != null && (e4.elemType = 0 | t5.elemType), t5.shape != null) {
                if (typeof t5.shape != "object")
                  throw TypeError(".onnx.TypeProto.Tensor.shape: object expected");
                e4.shape = l2.onnx.TensorShapeProto.fromObject(t5.shape);
              }
              return e4;
            }, t4.toObject = function(t5, e4) {
              e4 || (e4 = {});
              var n3 = {};
              return e4.defaults && (n3.elemType = 0, n3.shape = null), t5.elemType != null && t5.hasOwnProperty("elemType") && (n3.elemType = t5.elemType), t5.shape != null && t5.hasOwnProperty("shape") && (n3.shape = l2.onnx.TensorShapeProto.toObject(t5.shape, e4)), n3;
            }, t4.prototype.toJSON = function() {
              return this.constructor.toObject(this, a2.util.toJSONOptions);
            }, t4;
          }(), t3;
        }(), o2.OperatorSetIdProto = function() {
          function t3(t4) {
            if (t4)
              for (var e3 = Object.keys(t4), n3 = 0; n3 < e3.length; ++n3)
                t4[e3[n3]] != null && (this[e3[n3]] = t4[e3[n3]]);
          }
          return t3.prototype.domain = "", t3.prototype.version = c2.Long ? c2.Long.fromBits(0, 0, false) : 0, t3.create = function(e3) {
            return new t3(e3);
          }, t3.encode = function(t4, e3) {
            return e3 || (e3 = u2.create()), t4.domain != null && t4.hasOwnProperty("domain") && e3.uint32(10).string(t4.domain), t4.version != null && t4.hasOwnProperty("version") && e3.uint32(16).int64(t4.version), e3;
          }, t3.encodeDelimited = function(t4, e3) {
            return this.encode(t4, e3).ldelim();
          }, t3.decode = function(t4, e3) {
            t4 instanceof s2 || (t4 = s2.create(t4));
            for (var n3 = e3 === void 0 ? t4.len : t4.pos + e3, r3 = new l2.onnx.OperatorSetIdProto(); t4.pos < n3; ) {
              var i3 = t4.uint32();
              switch (i3 >>> 3) {
                case 1:
                  r3.domain = t4.string();
                  break;
                case 2:
                  r3.version = t4.int64();
                  break;
                default:
                  t4.skipType(7 & i3);
              }
            }
            return r3;
          }, t3.decodeDelimited = function(t4) {
            return t4 instanceof s2 || (t4 = new s2(t4)), this.decode(t4, t4.uint32());
          }, t3.verify = function(t4) {
            return typeof t4 != "object" || t4 === null ? "object expected" : t4.domain != null && t4.hasOwnProperty("domain") && !c2.isString(t4.domain) ? "domain: string expected" : t4.version != null && t4.hasOwnProperty("version") && !(c2.isInteger(t4.version) || t4.version && c2.isInteger(t4.version.low) && c2.isInteger(t4.version.high)) ? "version: integer|Long expected" : null;
          }, t3.fromObject = function(t4) {
            if (t4 instanceof l2.onnx.OperatorSetIdProto)
              return t4;
            var e3 = new l2.onnx.OperatorSetIdProto();
            return t4.domain != null && (e3.domain = String(t4.domain)), t4.version != null && (c2.Long ? (e3.version = c2.Long.fromValue(t4.version)).unsigned = false : typeof t4.version == "string" ? e3.version = parseInt(t4.version, 10) : typeof t4.version == "number" ? e3.version = t4.version : typeof t4.version == "object" && (e3.version = new c2.LongBits(t4.version.low >>> 0, t4.version.high >>> 0).toNumber())), e3;
          }, t3.toObject = function(t4, e3) {
            e3 || (e3 = {});
            var n3 = {};
            if (e3.defaults)
              if (n3.domain = "", c2.Long) {
                var r3 = new c2.Long(0, 0, false);
                n3.version = e3.longs === String ? r3.toString() : e3.longs === Number ? r3.toNumber() : r3;
              } else
                n3.version = e3.longs === String ? "0" : 0;
            return t4.domain != null && t4.hasOwnProperty("domain") && (n3.domain = t4.domain), t4.version != null && t4.hasOwnProperty("version") && (typeof t4.version == "number" ? n3.version = e3.longs === String ? String(t4.version) : t4.version : n3.version = e3.longs === String ? c2.Long.prototype.toString.call(t4.version) : e3.longs === Number ? new c2.LongBits(t4.version.low >>> 0, t4.version.high >>> 0).toNumber() : t4.version), n3;
          }, t3.prototype.toJSON = function() {
            return this.constructor.toObject(this, a2.util.toJSONOptions);
          }, t3;
        }(), o2), t2.exports = l2;
      }, 2100: (t2, e2, n2) => {
        "use strict";
        t2.exports = n2(9482);
      }, 9482: (t2, e2, n2) => {
        "use strict";
        var r2 = e2;
        function i2() {
          r2.util._configure(), r2.Writer._configure(r2.BufferWriter), r2.Reader._configure(r2.BufferReader);
        }
        r2.build = "minimal", r2.Writer = n2(1173), r2.BufferWriter = n2(3155), r2.Reader = n2(1408), r2.BufferReader = n2(593), r2.util = n2(9693), r2.rpc = n2(5994), r2.roots = n2(5054), r2.configure = i2, i2();
      }, 1408: (t2, e2, n2) => {
        "use strict";
        t2.exports = u2;
        var r2, i2 = n2(9693), o2 = i2.LongBits, a2 = i2.utf8;
        function s2(t3, e3) {
          return RangeError("index out of range: " + t3.pos + " + " + (e3 || 1) + " > " + t3.len);
        }
        function u2(t3) {
          this.buf = t3, this.pos = 0, this.len = t3.length;
        }
        var c2, l2 = typeof Uint8Array != "undefined" ? function(t3) {
          if (t3 instanceof Uint8Array || Array.isArray(t3))
            return new u2(t3);
          throw Error("illegal buffer");
        } : function(t3) {
          if (Array.isArray(t3))
            return new u2(t3);
          throw Error("illegal buffer");
        }, p = function() {
          return i2.Buffer ? function(t3) {
            return (u2.create = function(t4) {
              return i2.Buffer.isBuffer(t4) ? new r2(t4) : l2(t4);
            })(t3);
          } : l2;
        };
        function f() {
          var t3 = new o2(0, 0), e3 = 0;
          if (!(this.len - this.pos > 4)) {
            for (; e3 < 3; ++e3) {
              if (this.pos >= this.len)
                throw s2(this);
              if (t3.lo = (t3.lo | (127 & this.buf[this.pos]) << 7 * e3) >>> 0, this.buf[this.pos++] < 128)
                return t3;
            }
            return t3.lo = (t3.lo | (127 & this.buf[this.pos++]) << 7 * e3) >>> 0, t3;
          }
          for (; e3 < 4; ++e3)
            if (t3.lo = (t3.lo | (127 & this.buf[this.pos]) << 7 * e3) >>> 0, this.buf[this.pos++] < 128)
              return t3;
          if (t3.lo = (t3.lo | (127 & this.buf[this.pos]) << 28) >>> 0, t3.hi = (t3.hi | (127 & this.buf[this.pos]) >> 4) >>> 0, this.buf[this.pos++] < 128)
            return t3;
          if (e3 = 0, this.len - this.pos > 4) {
            for (; e3 < 5; ++e3)
              if (t3.hi = (t3.hi | (127 & this.buf[this.pos]) << 7 * e3 + 3) >>> 0, this.buf[this.pos++] < 128)
                return t3;
          } else
            for (; e3 < 5; ++e3) {
              if (this.pos >= this.len)
                throw s2(this);
              if (t3.hi = (t3.hi | (127 & this.buf[this.pos]) << 7 * e3 + 3) >>> 0, this.buf[this.pos++] < 128)
                return t3;
            }
          throw Error("invalid varint encoding");
        }
        function d2(t3, e3) {
          return (t3[e3 - 4] | t3[e3 - 3] << 8 | t3[e3 - 2] << 16 | t3[e3 - 1] << 24) >>> 0;
        }
        function h2() {
          if (this.pos + 8 > this.len)
            throw s2(this, 8);
          return new o2(d2(this.buf, this.pos += 4), d2(this.buf, this.pos += 4));
        }
        u2.create = p(), u2.prototype._slice = i2.Array.prototype.subarray || i2.Array.prototype.slice, u2.prototype.uint32 = (c2 = 4294967295, function() {
          if (c2 = (127 & this.buf[this.pos]) >>> 0, this.buf[this.pos++] < 128)
            return c2;
          if (c2 = (c2 | (127 & this.buf[this.pos]) << 7) >>> 0, this.buf[this.pos++] < 128)
            return c2;
          if (c2 = (c2 | (127 & this.buf[this.pos]) << 14) >>> 0, this.buf[this.pos++] < 128)
            return c2;
          if (c2 = (c2 | (127 & this.buf[this.pos]) << 21) >>> 0, this.buf[this.pos++] < 128)
            return c2;
          if (c2 = (c2 | (15 & this.buf[this.pos]) << 28) >>> 0, this.buf[this.pos++] < 128)
            return c2;
          if ((this.pos += 5) > this.len)
            throw this.pos = this.len, s2(this, 10);
          return c2;
        }), u2.prototype.int32 = function() {
          return 0 | this.uint32();
        }, u2.prototype.sint32 = function() {
          var t3 = this.uint32();
          return t3 >>> 1 ^ -(1 & t3) | 0;
        }, u2.prototype.bool = function() {
          return this.uint32() !== 0;
        }, u2.prototype.fixed32 = function() {
          if (this.pos + 4 > this.len)
            throw s2(this, 4);
          return d2(this.buf, this.pos += 4);
        }, u2.prototype.sfixed32 = function() {
          if (this.pos + 4 > this.len)
            throw s2(this, 4);
          return 0 | d2(this.buf, this.pos += 4);
        }, u2.prototype.float = function() {
          if (this.pos + 4 > this.len)
            throw s2(this, 4);
          var t3 = i2.float.readFloatLE(this.buf, this.pos);
          return this.pos += 4, t3;
        }, u2.prototype.double = function() {
          if (this.pos + 8 > this.len)
            throw s2(this, 4);
          var t3 = i2.float.readDoubleLE(this.buf, this.pos);
          return this.pos += 8, t3;
        }, u2.prototype.bytes = function() {
          var t3 = this.uint32(), e3 = this.pos, n3 = this.pos + t3;
          if (n3 > this.len)
            throw s2(this, t3);
          return this.pos += t3, Array.isArray(this.buf) ? this.buf.slice(e3, n3) : e3 === n3 ? new this.buf.constructor(0) : this._slice.call(this.buf, e3, n3);
        }, u2.prototype.string = function() {
          var t3 = this.bytes();
          return a2.read(t3, 0, t3.length);
        }, u2.prototype.skip = function(t3) {
          if (typeof t3 == "number") {
            if (this.pos + t3 > this.len)
              throw s2(this, t3);
            this.pos += t3;
          } else
            do {
              if (this.pos >= this.len)
                throw s2(this);
            } while (128 & this.buf[this.pos++]);
          return this;
        }, u2.prototype.skipType = function(t3) {
          switch (t3) {
            case 0:
              this.skip();
              break;
            case 1:
              this.skip(8);
              break;
            case 2:
              this.skip(this.uint32());
              break;
            case 3:
              for (; (t3 = 7 & this.uint32()) != 4; )
                this.skipType(t3);
              break;
            case 5:
              this.skip(4);
              break;
            default:
              throw Error("invalid wire type " + t3 + " at offset " + this.pos);
          }
          return this;
        }, u2._configure = function(t3) {
          r2 = t3, u2.create = p(), r2._configure();
          var e3 = i2.Long ? "toLong" : "toNumber";
          i2.merge(u2.prototype, {int64: function() {
            return f.call(this)[e3](false);
          }, uint64: function() {
            return f.call(this)[e3](true);
          }, sint64: function() {
            return f.call(this).zzDecode()[e3](false);
          }, fixed64: function() {
            return h2.call(this)[e3](true);
          }, sfixed64: function() {
            return h2.call(this)[e3](false);
          }});
        };
      }, 593: (t2, e2, n2) => {
        "use strict";
        t2.exports = o2;
        var r2 = n2(1408);
        (o2.prototype = Object.create(r2.prototype)).constructor = o2;
        var i2 = n2(9693);
        function o2(t3) {
          r2.call(this, t3);
        }
        o2._configure = function() {
          i2.Buffer && (o2.prototype._slice = i2.Buffer.prototype.slice);
        }, o2.prototype.string = function() {
          var t3 = this.uint32();
          return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + t3, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + t3, this.len));
        }, o2._configure();
      }, 5054: (t2) => {
        "use strict";
        t2.exports = {};
      }, 5994: (t2, e2, n2) => {
        "use strict";
        e2.Service = n2(7948);
      }, 7948: (t2, e2, n2) => {
        "use strict";
        t2.exports = i2;
        var r2 = n2(9693);
        function i2(t3, e3, n3) {
          if (typeof t3 != "function")
            throw TypeError("rpcImpl must be a function");
          r2.EventEmitter.call(this), this.rpcImpl = t3, this.requestDelimited = Boolean(e3), this.responseDelimited = Boolean(n3);
        }
        (i2.prototype = Object.create(r2.EventEmitter.prototype)).constructor = i2, i2.prototype.rpcCall = function t3(e3, n3, i3, o2, a2) {
          if (!o2)
            throw TypeError("request must be specified");
          var s2 = this;
          if (!a2)
            return r2.asPromise(t3, s2, e3, n3, i3, o2);
          if (s2.rpcImpl)
            try {
              return s2.rpcImpl(e3, n3[s2.requestDelimited ? "encodeDelimited" : "encode"](o2).finish(), function(t4, n4) {
                if (t4)
                  return s2.emit("error", t4, e3), a2(t4);
                if (n4 !== null) {
                  if (!(n4 instanceof i3))
                    try {
                      n4 = i3[s2.responseDelimited ? "decodeDelimited" : "decode"](n4);
                    } catch (t5) {
                      return s2.emit("error", t5, e3), a2(t5);
                    }
                  return s2.emit("data", n4, e3), a2(null, n4);
                }
                s2.end(true);
              });
            } catch (t4) {
              return s2.emit("error", t4, e3), void setTimeout(function() {
                a2(t4);
              }, 0);
            }
          else
            setTimeout(function() {
              a2(Error("already ended"));
            }, 0);
        }, i2.prototype.end = function(t3) {
          return this.rpcImpl && (t3 || this.rpcImpl(null, null, null), this.rpcImpl = null, this.emit("end").off()), this;
        };
      }, 1945: (t2, e2, n2) => {
        "use strict";
        t2.exports = i2;
        var r2 = n2(9693);
        function i2(t3, e3) {
          this.lo = t3 >>> 0, this.hi = e3 >>> 0;
        }
        var o2 = i2.zero = new i2(0, 0);
        o2.toNumber = function() {
          return 0;
        }, o2.zzEncode = o2.zzDecode = function() {
          return this;
        }, o2.length = function() {
          return 1;
        };
        var a2 = i2.zeroHash = "\0\0\0\0\0\0\0\0";
        i2.fromNumber = function(t3) {
          if (t3 === 0)
            return o2;
          var e3 = t3 < 0;
          e3 && (t3 = -t3);
          var n3 = t3 >>> 0, r3 = (t3 - n3) / 4294967296 >>> 0;
          return e3 && (r3 = ~r3 >>> 0, n3 = ~n3 >>> 0, ++n3 > 4294967295 && (n3 = 0, ++r3 > 4294967295 && (r3 = 0))), new i2(n3, r3);
        }, i2.from = function(t3) {
          if (typeof t3 == "number")
            return i2.fromNumber(t3);
          if (r2.isString(t3)) {
            if (!r2.Long)
              return i2.fromNumber(parseInt(t3, 10));
            t3 = r2.Long.fromString(t3);
          }
          return t3.low || t3.high ? new i2(t3.low >>> 0, t3.high >>> 0) : o2;
        }, i2.prototype.toNumber = function(t3) {
          if (!t3 && this.hi >>> 31) {
            var e3 = 1 + ~this.lo >>> 0, n3 = ~this.hi >>> 0;
            return e3 || (n3 = n3 + 1 >>> 0), -(e3 + 4294967296 * n3);
          }
          return this.lo + 4294967296 * this.hi;
        }, i2.prototype.toLong = function(t3) {
          return r2.Long ? new r2.Long(0 | this.lo, 0 | this.hi, Boolean(t3)) : {low: 0 | this.lo, high: 0 | this.hi, unsigned: Boolean(t3)};
        };
        var s2 = String.prototype.charCodeAt;
        i2.fromHash = function(t3) {
          return t3 === a2 ? o2 : new i2((s2.call(t3, 0) | s2.call(t3, 1) << 8 | s2.call(t3, 2) << 16 | s2.call(t3, 3) << 24) >>> 0, (s2.call(t3, 4) | s2.call(t3, 5) << 8 | s2.call(t3, 6) << 16 | s2.call(t3, 7) << 24) >>> 0);
        }, i2.prototype.toHash = function() {
          return String.fromCharCode(255 & this.lo, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, 255 & this.hi, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
        }, i2.prototype.zzEncode = function() {
          var t3 = this.hi >> 31;
          return this.hi = ((this.hi << 1 | this.lo >>> 31) ^ t3) >>> 0, this.lo = (this.lo << 1 ^ t3) >>> 0, this;
        }, i2.prototype.zzDecode = function() {
          var t3 = -(1 & this.lo);
          return this.lo = ((this.lo >>> 1 | this.hi << 31) ^ t3) >>> 0, this.hi = (this.hi >>> 1 ^ t3) >>> 0, this;
        }, i2.prototype.length = function() {
          var t3 = this.lo, e3 = (this.lo >>> 28 | this.hi << 4) >>> 0, n3 = this.hi >>> 24;
          return n3 === 0 ? e3 === 0 ? t3 < 16384 ? t3 < 128 ? 1 : 2 : t3 < 2097152 ? 3 : 4 : e3 < 16384 ? e3 < 128 ? 5 : 6 : e3 < 2097152 ? 7 : 8 : n3 < 128 ? 9 : 10;
        };
      }, 9693: function(t2, e2, n2) {
        "use strict";
        var r2 = e2;
        function i2(t3, e3, n3) {
          for (var r3 = Object.keys(e3), i3 = 0; i3 < r3.length; ++i3)
            t3[r3[i3]] !== void 0 && n3 || (t3[r3[i3]] = e3[r3[i3]]);
          return t3;
        }
        function o2(t3) {
          function e3(t4, n3) {
            if (!(this instanceof e3))
              return new e3(t4, n3);
            Object.defineProperty(this, "message", {get: function() {
              return t4;
            }}), Error.captureStackTrace ? Error.captureStackTrace(this, e3) : Object.defineProperty(this, "stack", {value: new Error().stack || ""}), n3 && i2(this, n3);
          }
          return (e3.prototype = Object.create(Error.prototype)).constructor = e3, Object.defineProperty(e3.prototype, "name", {get: function() {
            return t3;
          }}), e3.prototype.toString = function() {
            return this.name + ": " + this.message;
          }, e3;
        }
        r2.asPromise = n2(4537), r2.base64 = n2(7419), r2.EventEmitter = n2(9211), r2.float = n2(945), r2.inquire = n2(7199), r2.utf8 = n2(4997), r2.pool = n2(6662), r2.LongBits = n2(1945), r2.isNode = Boolean(n2.g !== void 0 && n2.g && n2.g.process && n2.g.process.versions && n2.g.process.versions.node), r2.global = r2.isNode && n2.g || typeof window != "undefined" && window || typeof self != "undefined" && self || this, r2.emptyArray = Object.freeze ? Object.freeze([]) : [], r2.emptyObject = Object.freeze ? Object.freeze({}) : {}, r2.isInteger = Number.isInteger || function(t3) {
          return typeof t3 == "number" && isFinite(t3) && Math.floor(t3) === t3;
        }, r2.isString = function(t3) {
          return typeof t3 == "string" || t3 instanceof String;
        }, r2.isObject = function(t3) {
          return t3 && typeof t3 == "object";
        }, r2.isset = r2.isSet = function(t3, e3) {
          var n3 = t3[e3];
          return !(n3 == null || !t3.hasOwnProperty(e3)) && (typeof n3 != "object" || (Array.isArray(n3) ? n3.length : Object.keys(n3).length) > 0);
        }, r2.Buffer = function() {
          try {
            var t3 = r2.inquire("buffer").Buffer;
            return t3.prototype.utf8Write ? t3 : null;
          } catch (t4) {
            return null;
          }
        }(), r2._Buffer_from = null, r2._Buffer_allocUnsafe = null, r2.newBuffer = function(t3) {
          return typeof t3 == "number" ? r2.Buffer ? r2._Buffer_allocUnsafe(t3) : new r2.Array(t3) : r2.Buffer ? r2._Buffer_from(t3) : typeof Uint8Array == "undefined" ? t3 : new Uint8Array(t3);
        }, r2.Array = typeof Uint8Array != "undefined" ? Uint8Array : Array, r2.Long = r2.global.dcodeIO && r2.global.dcodeIO.Long || r2.global.Long || r2.inquire("long"), r2.key2Re = /^true|false|0|1$/, r2.key32Re = /^-?(?:0|[1-9][0-9]*)$/, r2.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/, r2.longToHash = function(t3) {
          return t3 ? r2.LongBits.from(t3).toHash() : r2.LongBits.zeroHash;
        }, r2.longFromHash = function(t3, e3) {
          var n3 = r2.LongBits.fromHash(t3);
          return r2.Long ? r2.Long.fromBits(n3.lo, n3.hi, e3) : n3.toNumber(Boolean(e3));
        }, r2.merge = i2, r2.lcFirst = function(t3) {
          return t3.charAt(0).toLowerCase() + t3.substring(1);
        }, r2.newError = o2, r2.ProtocolError = o2("ProtocolError"), r2.oneOfGetter = function(t3) {
          for (var e3 = {}, n3 = 0; n3 < t3.length; ++n3)
            e3[t3[n3]] = 1;
          return function() {
            for (var t4 = Object.keys(this), n4 = t4.length - 1; n4 > -1; --n4)
              if (e3[t4[n4]] === 1 && this[t4[n4]] !== void 0 && this[t4[n4]] !== null)
                return t4[n4];
          };
        }, r2.oneOfSetter = function(t3) {
          return function(e3) {
            for (var n3 = 0; n3 < t3.length; ++n3)
              t3[n3] !== e3 && delete this[t3[n3]];
          };
        }, r2.toJSONOptions = {longs: String, enums: String, bytes: String, json: true}, r2._configure = function() {
          var t3 = r2.Buffer;
          t3 ? (r2._Buffer_from = t3.from !== Uint8Array.from && t3.from || function(e3, n3) {
            return new t3(e3, n3);
          }, r2._Buffer_allocUnsafe = t3.allocUnsafe || function(e3) {
            return new t3(e3);
          }) : r2._Buffer_from = r2._Buffer_allocUnsafe = null;
        };
      }, 1173: (t2, e2, n2) => {
        "use strict";
        t2.exports = p;
        var r2, i2 = n2(9693), o2 = i2.LongBits, a2 = i2.base64, s2 = i2.utf8;
        function u2(t3, e3, n3) {
          this.fn = t3, this.len = e3, this.next = void 0, this.val = n3;
        }
        function c2() {
        }
        function l2(t3) {
          this.head = t3.head, this.tail = t3.tail, this.len = t3.len, this.next = t3.states;
        }
        function p() {
          this.len = 0, this.head = new u2(c2, 0, 0), this.tail = this.head, this.states = null;
        }
        var f = function() {
          return i2.Buffer ? function() {
            return (p.create = function() {
              return new r2();
            })();
          } : function() {
            return new p();
          };
        };
        function d2(t3, e3, n3) {
          e3[n3] = 255 & t3;
        }
        function h2(t3, e3) {
          this.len = t3, this.next = void 0, this.val = e3;
        }
        function g2(t3, e3, n3) {
          for (; t3.hi; )
            e3[n3++] = 127 & t3.lo | 128, t3.lo = (t3.lo >>> 7 | t3.hi << 25) >>> 0, t3.hi >>>= 7;
          for (; t3.lo > 127; )
            e3[n3++] = 127 & t3.lo | 128, t3.lo = t3.lo >>> 7;
          e3[n3++] = t3.lo;
        }
        function b2(t3, e3, n3) {
          e3[n3] = 255 & t3, e3[n3 + 1] = t3 >>> 8 & 255, e3[n3 + 2] = t3 >>> 16 & 255, e3[n3 + 3] = t3 >>> 24;
        }
        p.create = f(), p.alloc = function(t3) {
          return new i2.Array(t3);
        }, i2.Array !== Array && (p.alloc = i2.pool(p.alloc, i2.Array.prototype.subarray)), p.prototype._push = function(t3, e3, n3) {
          return this.tail = this.tail.next = new u2(t3, e3, n3), this.len += e3, this;
        }, h2.prototype = Object.create(u2.prototype), h2.prototype.fn = function(t3, e3, n3) {
          for (; t3 > 127; )
            e3[n3++] = 127 & t3 | 128, t3 >>>= 7;
          e3[n3] = t3;
        }, p.prototype.uint32 = function(t3) {
          return this.len += (this.tail = this.tail.next = new h2((t3 >>>= 0) < 128 ? 1 : t3 < 16384 ? 2 : t3 < 2097152 ? 3 : t3 < 268435456 ? 4 : 5, t3)).len, this;
        }, p.prototype.int32 = function(t3) {
          return t3 < 0 ? this._push(g2, 10, o2.fromNumber(t3)) : this.uint32(t3);
        }, p.prototype.sint32 = function(t3) {
          return this.uint32((t3 << 1 ^ t3 >> 31) >>> 0);
        }, p.prototype.uint64 = function(t3) {
          var e3 = o2.from(t3);
          return this._push(g2, e3.length(), e3);
        }, p.prototype.int64 = p.prototype.uint64, p.prototype.sint64 = function(t3) {
          var e3 = o2.from(t3).zzEncode();
          return this._push(g2, e3.length(), e3);
        }, p.prototype.bool = function(t3) {
          return this._push(d2, 1, t3 ? 1 : 0);
        }, p.prototype.fixed32 = function(t3) {
          return this._push(b2, 4, t3 >>> 0);
        }, p.prototype.sfixed32 = p.prototype.fixed32, p.prototype.fixed64 = function(t3) {
          var e3 = o2.from(t3);
          return this._push(b2, 4, e3.lo)._push(b2, 4, e3.hi);
        }, p.prototype.sfixed64 = p.prototype.fixed64, p.prototype.float = function(t3) {
          return this._push(i2.float.writeFloatLE, 4, t3);
        }, p.prototype.double = function(t3) {
          return this._push(i2.float.writeDoubleLE, 8, t3);
        };
        var m = i2.Array.prototype.set ? function(t3, e3, n3) {
          e3.set(t3, n3);
        } : function(t3, e3, n3) {
          for (var r3 = 0; r3 < t3.length; ++r3)
            e3[n3 + r3] = t3[r3];
        };
        p.prototype.bytes = function(t3) {
          var e3 = t3.length >>> 0;
          if (!e3)
            return this._push(d2, 1, 0);
          if (i2.isString(t3)) {
            var n3 = p.alloc(e3 = a2.length(t3));
            a2.decode(t3, n3, 0), t3 = n3;
          }
          return this.uint32(e3)._push(m, e3, t3);
        }, p.prototype.string = function(t3) {
          var e3 = s2.length(t3);
          return e3 ? this.uint32(e3)._push(s2.write, e3, t3) : this._push(d2, 1, 0);
        }, p.prototype.fork = function() {
          return this.states = new l2(this), this.head = this.tail = new u2(c2, 0, 0), this.len = 0, this;
        }, p.prototype.reset = function() {
          return this.states ? (this.head = this.states.head, this.tail = this.states.tail, this.len = this.states.len, this.states = this.states.next) : (this.head = this.tail = new u2(c2, 0, 0), this.len = 0), this;
        }, p.prototype.ldelim = function() {
          var t3 = this.head, e3 = this.tail, n3 = this.len;
          return this.reset().uint32(n3), n3 && (this.tail.next = t3.next, this.tail = e3, this.len += n3), this;
        }, p.prototype.finish = function() {
          for (var t3 = this.head.next, e3 = this.constructor.alloc(this.len), n3 = 0; t3; )
            t3.fn(t3.val, e3, n3), n3 += t3.len, t3 = t3.next;
          return e3;
        }, p._configure = function(t3) {
          r2 = t3, p.create = f(), r2._configure();
        };
      }, 3155: (t2, e2, n2) => {
        "use strict";
        t2.exports = o2;
        var r2 = n2(1173);
        (o2.prototype = Object.create(r2.prototype)).constructor = o2;
        var i2 = n2(9693);
        function o2() {
          r2.call(this);
        }
        function a2(t3, e3, n3) {
          t3.length < 40 ? i2.utf8.write(t3, e3, n3) : e3.utf8Write ? e3.utf8Write(t3, n3) : e3.write(t3, n3);
        }
        o2._configure = function() {
          o2.alloc = i2._Buffer_allocUnsafe, o2.writeBytesBuffer = i2.Buffer && i2.Buffer.prototype instanceof Uint8Array && i2.Buffer.prototype.set.name === "set" ? function(t3, e3, n3) {
            e3.set(t3, n3);
          } : function(t3, e3, n3) {
            if (t3.copy)
              t3.copy(e3, n3, 0, t3.length);
            else
              for (var r3 = 0; r3 < t3.length; )
                e3[n3++] = t3[r3++];
          };
        }, o2.prototype.bytes = function(t3) {
          i2.isString(t3) && (t3 = i2._Buffer_from(t3, "base64"));
          var e3 = t3.length >>> 0;
          return this.uint32(e3), e3 && this._push(o2.writeBytesBuffer, e3, t3), this;
        }, o2.prototype.string = function(t3) {
          var e3 = i2.Buffer.byteLength(t3);
          return this.uint32(e3), e3 && this._push(a2, e3, t3), this;
        }, o2._configure();
      }, 7714: (t2, e2, n2) => {
        "use strict";
        e2.R = void 0;
        const r2 = n2(6919), i2 = n2(7448);
        e2.R = new class {
          async init() {
          }
          async createSessionHandler(t3, e3) {
            const n3 = new r2.Session(e3);
            return await n3.loadModel(t3), new i2.OnnxjsSessionHandler(n3);
          }
        }();
      }, 4200: (t2, e2, n2) => {
        "use strict";
        e2.c8 = e2.rX = void 0;
        const r2 = n2(1670), i2 = n2(5381), o2 = n2(2157), a2 = n2(2306);
        e2.rX = () => {
          if ((typeof r2.env.wasm.initTimeout != "number" || r2.env.wasm.initTimeout < 0) && (r2.env.wasm.initTimeout = 0), typeof r2.env.wasm.simd != "boolean" && (r2.env.wasm.simd = true), typeof r2.env.wasm.proxy != "boolean" && (r2.env.wasm.proxy = false), typeof r2.env.wasm.numThreads != "number" || !Number.isInteger(r2.env.wasm.numThreads) || r2.env.wasm.numThreads <= 0) {
            const t3 = typeof navigator == "undefined" ? (0, i2.cpus)().length : navigator.hardwareConcurrency;
            r2.env.wasm.numThreads = Math.min(4, Math.ceil((t3 || 1) / 2));
          }
        }, e2.c8 = new class {
          async init() {
            (0, e2.rX)(), await (0, o2.initWasm)();
          }
          async createSessionHandler(t3, e3) {
            const n3 = new a2.OnnxruntimeWebAssemblySessionHandler();
            return await n3.loadModel(t3, e3), Promise.resolve(n3);
          }
        }();
      }, 6018: function(t2, e2, n2) {
        "use strict";
        var r2 = this && this.__createBinding || (Object.create ? function(t3, e3, n3, r3) {
          r3 === void 0 && (r3 = n3);
          var i3 = Object.getOwnPropertyDescriptor(e3, n3);
          i3 && !("get" in i3 ? !e3.__esModule : i3.writable || i3.configurable) || (i3 = {enumerable: true, get: function() {
            return e3[n3];
          }}), Object.defineProperty(t3, r3, i3);
        } : function(t3, e3, n3, r3) {
          r3 === void 0 && (r3 = n3), t3[r3] = e3[n3];
        }), i2 = this && this.__exportStar || function(t3, e3) {
          for (var n3 in t3)
            n3 === "default" || Object.prototype.hasOwnProperty.call(e3, n3) || r2(e3, t3, n3);
        };
        Object.defineProperty(e2, "__esModule", {value: true}), i2(n2(1670), e2);
        const o2 = n2(1670);
        {
          const t3 = n2(7714).R;
          (0, o2.registerBackend)("webgl", t3, -10);
        }
        {
          const t3 = n2(4200).c8;
          (0, o2.registerBackend)("cpu", t3, 10), (0, o2.registerBackend)("wasm", t3, 10), (0, o2.registerBackend)("xnnpack", t3, 9);
        }
      }, 246: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.createAttributeWithCacheKey = void 0;
        class n2 {
          constructor(t3) {
            Object.assign(this, t3);
          }
          get cacheKey() {
            return this._cacheKey || (this._cacheKey = Object.getOwnPropertyNames(this).sort().map((t3) => `${this[t3]}`).join(";")), this._cacheKey;
          }
        }
        e2.createAttributeWithCacheKey = (t3) => new n2(t3);
      }, 7778: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.Attribute = void 0;
        const r2 = n2(1446), i2 = n2(9395), o2 = n2(9162), a2 = n2(2517);
        var s2 = i2.onnxruntime.experimental.fbs;
        class u2 {
          constructor(t3) {
            if (this._attributes = new Map(), t3 != null) {
              for (const e3 of t3)
                e3 instanceof r2.onnx.AttributeProto ? this._attributes.set(e3.name, [u2.getValue(e3), u2.getType(e3)]) : e3 instanceof s2.Attribute && this._attributes.set(e3.name(), [u2.getValue(e3), u2.getType(e3)]);
              if (this._attributes.size < t3.length)
                throw new Error("duplicated attribute names");
            }
          }
          set(t3, e3, n3) {
            this._attributes.set(t3, [n3, e3]);
          }
          delete(t3) {
            this._attributes.delete(t3);
          }
          getFloat(t3, e3) {
            return this.get(t3, "float", e3);
          }
          getInt(t3, e3) {
            return this.get(t3, "int", e3);
          }
          getString(t3, e3) {
            return this.get(t3, "string", e3);
          }
          getTensor(t3, e3) {
            return this.get(t3, "tensor", e3);
          }
          getFloats(t3, e3) {
            return this.get(t3, "floats", e3);
          }
          getInts(t3, e3) {
            return this.get(t3, "ints", e3);
          }
          getStrings(t3, e3) {
            return this.get(t3, "strings", e3);
          }
          getTensors(t3, e3) {
            return this.get(t3, "tensors", e3);
          }
          get(t3, e3, n3) {
            const r3 = this._attributes.get(t3);
            if (r3 === void 0) {
              if (n3 !== void 0)
                return n3;
              throw new Error(`required attribute not found: ${t3}`);
            }
            if (r3[1] !== e3)
              throw new Error(`type mismatch: expected ${e3} but got ${r3[1]}`);
            return r3[0];
          }
          static getType(t3) {
            const e3 = t3 instanceof r2.onnx.AttributeProto ? t3.type : t3.type();
            switch (e3) {
              case r2.onnx.AttributeProto.AttributeType.FLOAT:
                return "float";
              case r2.onnx.AttributeProto.AttributeType.INT:
                return "int";
              case r2.onnx.AttributeProto.AttributeType.STRING:
                return "string";
              case r2.onnx.AttributeProto.AttributeType.TENSOR:
                return "tensor";
              case r2.onnx.AttributeProto.AttributeType.FLOATS:
                return "floats";
              case r2.onnx.AttributeProto.AttributeType.INTS:
                return "ints";
              case r2.onnx.AttributeProto.AttributeType.STRINGS:
                return "strings";
              case r2.onnx.AttributeProto.AttributeType.TENSORS:
                return "tensors";
              default:
                throw new Error(`attribute type is not supported yet: ${r2.onnx.AttributeProto.AttributeType[e3]}`);
            }
          }
          static getValue(t3) {
            const e3 = t3 instanceof r2.onnx.AttributeProto ? t3.type : t3.type();
            if (e3 === r2.onnx.AttributeProto.AttributeType.GRAPH || e3 === r2.onnx.AttributeProto.AttributeType.GRAPHS)
              throw new Error("graph attribute is not supported yet");
            const n3 = this.getValueNoCheck(t3);
            if (e3 === r2.onnx.AttributeProto.AttributeType.INT && a2.LongUtil.isLong(n3))
              return a2.LongUtil.longToNumber(n3);
            if (e3 === r2.onnx.AttributeProto.AttributeType.INTS) {
              const t4 = n3, e4 = new Array(t4.length);
              for (let n4 = 0; n4 < t4.length; n4++) {
                const r3 = t4[n4];
                e4[n4] = a2.LongUtil.longToNumber(r3);
              }
              return e4;
            }
            if (e3 === r2.onnx.AttributeProto.AttributeType.TENSOR)
              return t3 instanceof r2.onnx.AttributeProto ? o2.Tensor.fromProto(n3) : o2.Tensor.fromOrtTensor(n3);
            if (e3 === r2.onnx.AttributeProto.AttributeType.TENSORS) {
              if (t3 instanceof r2.onnx.AttributeProto)
                return n3.map((t4) => o2.Tensor.fromProto(t4));
              if (t3 instanceof s2.Attribute)
                return n3.map((t4) => o2.Tensor.fromOrtTensor(t4));
            }
            if (e3 === r2.onnx.AttributeProto.AttributeType.STRING && t3 instanceof r2.onnx.AttributeProto) {
              const t4 = n3;
              return (0, a2.decodeUtf8String)(t4);
            }
            return e3 === r2.onnx.AttributeProto.AttributeType.STRINGS && t3 instanceof r2.onnx.AttributeProto ? n3.map(a2.decodeUtf8String) : n3;
          }
          static getValueNoCheck(t3) {
            return t3 instanceof r2.onnx.AttributeProto ? this.getValueNoCheckFromOnnxFormat(t3) : this.getValueNoCheckFromOrtFormat(t3);
          }
          static getValueNoCheckFromOnnxFormat(t3) {
            switch (t3.type) {
              case r2.onnx.AttributeProto.AttributeType.FLOAT:
                return t3.f;
              case r2.onnx.AttributeProto.AttributeType.INT:
                return t3.i;
              case r2.onnx.AttributeProto.AttributeType.STRING:
                return t3.s;
              case r2.onnx.AttributeProto.AttributeType.TENSOR:
                return t3.t;
              case r2.onnx.AttributeProto.AttributeType.GRAPH:
                return t3.g;
              case r2.onnx.AttributeProto.AttributeType.FLOATS:
                return t3.floats;
              case r2.onnx.AttributeProto.AttributeType.INTS:
                return t3.ints;
              case r2.onnx.AttributeProto.AttributeType.STRINGS:
                return t3.strings;
              case r2.onnx.AttributeProto.AttributeType.TENSORS:
                return t3.tensors;
              case r2.onnx.AttributeProto.AttributeType.GRAPHS:
                return t3.graphs;
              default:
                throw new Error(`unsupported attribute type: ${r2.onnx.AttributeProto.AttributeType[t3.type]}`);
            }
          }
          static getValueNoCheckFromOrtFormat(t3) {
            switch (t3.type()) {
              case s2.AttributeType.FLOAT:
                return t3.f();
              case s2.AttributeType.INT:
                return t3.i();
              case s2.AttributeType.STRING:
                return t3.s();
              case s2.AttributeType.TENSOR:
                return t3.t();
              case s2.AttributeType.GRAPH:
                return t3.g();
              case s2.AttributeType.FLOATS:
                return t3.floatsArray();
              case s2.AttributeType.INTS: {
                const e3 = [];
                for (let n3 = 0; n3 < t3.intsLength(); n3++)
                  e3.push(t3.ints(n3));
                return e3;
              }
              case s2.AttributeType.STRINGS: {
                const e3 = [];
                for (let n3 = 0; n3 < t3.stringsLength(); n3++)
                  e3.push(t3.strings(n3));
                return e3;
              }
              case s2.AttributeType.TENSORS: {
                const e3 = [];
                for (let n3 = 0; n3 < t3.tensorsLength(); n3++)
                  e3.push(t3.tensors(n3));
                return e3;
              }
              default:
                throw new Error(`unsupported attribute type: ${s2.AttributeType[t3.type()]}`);
            }
          }
        }
        e2.Attribute = u2;
      }, 7091: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.resolveBackend = e2.backend = void 0;
        const r2 = n2(5038), i2 = new Map();
        async function o2(t3) {
          const n3 = e2.backend;
          if (n3[t3] !== void 0 && function(t4) {
            const e3 = t4;
            return "initialize" in e3 && typeof e3.initialize == "function" && "createSessionHandler" in e3 && typeof e3.createSessionHandler == "function" && "dispose" in e3 && typeof e3.dispose == "function";
          }(n3[t3])) {
            const e3 = n3[t3];
            let r3 = e3.initialize();
            if (typeof r3 == "object" && "then" in r3 && (r3 = await r3), r3)
              return i2.set(t3, e3), e3;
          }
        }
        e2.backend = {webgl: new r2.WebGLBackend()}, e2.resolveBackend = async function t3(e3) {
          if (!e3)
            return t3(["webgl"]);
          {
            const t4 = typeof e3 == "string" ? [e3] : e3;
            for (const e4 of t4) {
              const t5 = i2.get(e4);
              if (t5)
                return t5;
              const n3 = await o2(e4);
              if (n3)
                return n3;
            }
          }
          throw new Error("no available backend to use");
        };
      }, 5038: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.WebGLBackend = void 0;
        const r2 = n2(1670), i2 = n2(6231), o2 = n2(6416), a2 = n2(7305);
        e2.WebGLBackend = class {
          get contextId() {
            return r2.env.webgl.contextId;
          }
          set contextId(t3) {
            r2.env.webgl.contextId = t3;
          }
          get matmulMaxBatchSize() {
            return r2.env.webgl.matmulMaxBatchSize;
          }
          set matmulMaxBatchSize(t3) {
            r2.env.webgl.matmulMaxBatchSize = t3;
          }
          get textureCacheMode() {
            return r2.env.webgl.textureCacheMode;
          }
          set textureCacheMode(t3) {
            r2.env.webgl.textureCacheMode = t3;
          }
          get pack() {
            return r2.env.webgl.pack;
          }
          set pack(t3) {
            r2.env.webgl.pack = t3;
          }
          get async() {
            return r2.env.webgl.async;
          }
          set async(t3) {
            r2.env.webgl.async = t3;
          }
          initialize() {
            try {
              return this.glContext = (0, a2.createWebGLContext)(this.contextId), typeof this.matmulMaxBatchSize != "number" && (this.matmulMaxBatchSize = 16), typeof this.textureCacheMode != "string" && (this.textureCacheMode = "full"), typeof this.pack != "boolean" && (this.pack = false), typeof this.async != "boolean" && (this.async = false), i2.Logger.setWithEnv(r2.env), i2.Logger.verbose("WebGLBackend", `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${this.async}.`), true;
            } catch (t3) {
              return i2.Logger.warning("WebGLBackend", `Unable to initialize WebGLBackend. ${t3}`), false;
            }
          }
          createSessionHandler(t3) {
            return new o2.WebGLSessionHandler(this, t3);
          }
          dispose() {
            this.glContext.dispose();
          }
        };
      }, 5107: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.CoordsGlslLib = void 0;
        const r2 = n2(2517), i2 = n2(8520), o2 = n2(5060), a2 = n2(7859), s2 = n2(9390);
        class u2 extends i2.GlslLib {
          constructor(t3) {
            super(t3);
          }
          getFunctions() {
            return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.offsetToCoords()), this.coordsToOffset()), this.toVec()), this.valueFrom()), this.getCommonUtilFuncs()), this.getInputsSamplingSnippets()), this.getOutputSamplingSnippet());
          }
          getCustomTypes() {
            return {};
          }
          offsetToCoords() {
            return {offsetToCoords: new i2.GlslLibRoutine("\n      vec2 offsetToCoords(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      ")};
          }
          coordsToOffset() {
            return {coordsToOffset: new i2.GlslLibRoutine("\n      int coordsToOffset(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      ")};
          }
          getOutputSamplingSnippet() {
            const t3 = this.context.outputTextureLayout;
            return t3.isPacked ? this.getPackedOutputSamplingSnippet(t3) : this.getUnpackedOutputSamplingSnippet(t3);
          }
          getPackedOutputSamplingSnippet(t3) {
            const e3 = t3.unpackedShape, n3 = [t3.width, t3.height], r3 = {}, a3 = "getOutputCoords";
            switch (e3.length) {
              case 0:
                r3[a3] = this.getOutputScalarCoords();
                break;
              case 1:
                r3[a3] = this.getOutputPacked1DCoords(e3, n3);
                break;
              case 2:
                r3[a3] = this.getOutputPacked2DCoords(e3, n3);
                break;
              case 3:
                r3[a3] = this.getOutputPacked3DCoords(e3, n3);
                break;
              default:
                r3[a3] = this.getOutputPackedNDCoords(e3, n3);
            }
            const s3 = `
      void setOutput(vec4 val) {
        ${(0, o2.getGlsl)(this.context.glContext.version).output} = val;
      }
    `;
            return r3.floatTextureSetRGBA = new i2.GlslLibRoutine(s3), r3;
          }
          getUnpackedOutputSamplingSnippet(t3) {
            const e3 = t3.unpackedShape, n3 = [t3.width, t3.height], r3 = {}, a3 = "getOutputCoords";
            switch (e3.length) {
              case 0:
                r3[a3] = this.getOutputScalarCoords();
                break;
              case 1:
                r3[a3] = this.getOutputUnpacked1DCoords(e3, n3);
                break;
              case 2:
                r3[a3] = this.getOutputUnpacked2DCoords(e3, n3);
                break;
              case 3:
                r3[a3] = this.getOutputUnpacked3DCoords(e3, n3);
                break;
              case 4:
                r3[a3] = this.getOutputUnpacked4DCoords(e3, n3);
                break;
              case 5:
                r3[a3] = this.getOutputUnpacked5DCoords(e3, n3);
                break;
              case 6:
                r3[a3] = this.getOutputUnpacked6DCoords(e3, n3);
                break;
              default:
                throw new Error(`Unsupported output dimensionality: ${e3.length}`);
            }
            const s3 = `
        void setOutput(float val) {
          ${(0, o2.getGlsl)(this.context.glContext.version).output} = vec4(val, 0, 0, 0);
        }
    `;
            return r3.floatTextureSetR = new i2.GlslLibRoutine(s3), r3;
          }
          getOutputScalarCoords() {
            return new i2.GlslLibRoutine("\n      int getOutputCoords() {\n        return 0;\n      }\n    ");
          }
          getOutputPacked1DCoords(t3, e3) {
            const n3 = e3;
            let r3 = "";
            return n3[0] === 1 ? (r3 = `
          int getOutputCoords() {
            return 2 * int(TexCoords.y * ${n3[1]}.0);
          }
        `, new i2.GlslLibRoutine(r3)) : n3[1] === 1 ? (r3 = `
          int getOutputCoords() {
            return 2 * int(TexCoords.x * ${n3[0]}.0);
          }
        `, new i2.GlslLibRoutine(r3)) : (r3 = `
        int getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                 vec2(${n3[0]}, ${n3[1]}));
          return 2 * (resTexRC.y * ${n3[0]} + resTexRC.x);
        }
      `, new i2.GlslLibRoutine(r3));
          }
          getOutputPacked2DCoords(t3, e3) {
            let n3 = "";
            if (r2.ArrayUtil.arraysEqual(t3, e3))
              return n3 = `
        ivec2 getOutputCoords() {
          return 2 * ivec2(TexCoords.xy * vec2(${e3[0]}, ${e3[1]}));
        }
      `, new i2.GlslLibRoutine(n3);
            const o3 = e3, a3 = Math.ceil(t3[1] / 2);
            return n3 = `
        ivec2 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${o3[0]}, ${o3[1]}));

          int index = resTexRC.y * ${o3[0]} + resTexRC.x;

          // reverse r and c order for packed texture
          int r = imod(index, ${a3}) * 2;
          int c = 2 * (index / ${a3});

          return ivec2(r, c);
        }
      `, new i2.GlslLibRoutine(n3);
          }
          getOutputPacked3DCoords(t3, e3) {
            const n3 = [e3[0], e3[1]], r3 = Math.ceil(t3[2] / 2), o3 = r3 * Math.ceil(t3[1] / 2), a3 = `
        ivec3 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${n3[0]}, ${n3[1]}));
          int index = resTexRC.y * ${n3[0]} + resTexRC.x;

          int b = index / ${o3};
          index -= b * ${o3};

          // reverse r and c order for packed texture
          int r = imod(index, ${r3}) * 2;
          int c = 2 * (index / ${r3});

          return ivec3(b, r, c);
        }
      `;
            return new i2.GlslLibRoutine(a3);
          }
          getOutputPackedNDCoords(t3, e3) {
            const n3 = [e3[0], e3[1]], r3 = Math.ceil(t3[t3.length - 1] / 2), o3 = r3 * Math.ceil(t3[t3.length - 2] / 2);
            let a3 = o3, s3 = "", u3 = "b, r, c";
            for (let e4 = 2; e4 < t3.length - 1; e4++)
              a3 *= t3[t3.length - e4 - 1], s3 = `
      int b${e4} = index / ${a3};
      index -= b${e4} * ${a3};
    ` + s3, u3 = `b${e4}, ` + u3;
            const c2 = `
      ivec${t3.length} getOutputCoords() {
        ivec2 resTexRC = ivec2(TexCoords.xy *
                              vec2(${n3[0]}, ${n3[1]}));
        int index = resTexRC.y * ${n3[0]} + resTexRC.x;

        ${s3}

        int b = index / ${o3};
        index -= b * ${o3};

        // reverse r and c order for packed texture
        int r = imod(index, ${r3}) * 2;
        int c = 2 * (index / ${r3});

        return ivec${t3.length}(${u3});
      }
    `;
            return new i2.GlslLibRoutine(c2);
          }
          getOutputUnpacked1DCoords(t3, e3) {
            const n3 = `
        int getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${e3[0]}, ${e3[1]}));
          return resTexRC.y * ${e3[0]} + resTexRC.x;
        }
      `;
            return new i2.GlslLibRoutine(n3);
          }
          getOutputUnpacked2DCoords(t3, e3) {
            const n3 = `
        ivec2 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${e3[0]}, ${e3[1]}));
          int index = resTexRC.y * ${e3[0]} + resTexRC.x;
          int r = index / ${t3[1]};
          int c = index - r * ${t3[1]};
          return ivec2(r, c);
        }
      `;
            return new i2.GlslLibRoutine(n3);
          }
          getOutputUnpacked3DCoords(t3, e3) {
            let n3 = "";
            const r3 = t3.length;
            let o3 = null;
            r3 < 2 && (o3 = []), o3 = new Array(r3 - 1), o3[r3 - 2] = t3[r3 - 1];
            for (let e4 = r3 - 3; e4 >= 0; --e4)
              o3[e4] = o3[e4 + 1] * t3[e4 + 1];
            const a3 = ["r", "c", "d"], s3 = o3.map((t4, e4) => `int ${a3[e4]} = index / ${t4}; ${e4 === o3.length - 1 ? `int ${a3[e4 + 1]} = index - ${a3[e4]} * ${t4}` : `index -= ${a3[e4]} * ${t4}`};`).join("");
            return n3 = `
        ivec3 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${e3[0]}, ${e3[1]}));
          int index = resTexRC.y * ${e3[0]} + resTexRC.x;
          ${s3}
          return ivec3(r, c, d);
        }
      `, new i2.GlslLibRoutine(n3);
          }
          getOutputUnpacked4DCoords(t3, e3) {
            let n3 = "";
            const r3 = t3.length;
            let o3 = null;
            r3 < 2 && (o3 = []), o3 = new Array(r3 - 1), o3[r3 - 2] = t3[r3 - 1];
            for (let e4 = r3 - 3; e4 >= 0; --e4)
              o3[e4] = o3[e4 + 1] * t3[e4 + 1];
            const a3 = ["r", "c", "d", "d2"], s3 = o3.map((t4, e4) => `int ${a3[e4]} = index / ${t4}; ${e4 === o3.length - 1 ? `int ${a3[e4 + 1]} = index - ${a3[e4]} * ${t4}` : `index -= ${a3[e4]} * ${t4}`};`).join("");
            return n3 = `
      ivec4 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${e3[0]}, ${e3[1]}));
          int index = resTexRC.y * ${e3[0]} + resTexRC.x;
          ${s3}
          return ivec4(r, c, d, d2);
        }
      `, new i2.GlslLibRoutine(n3);
          }
          getOutputUnpacked5DCoords(t3, e3) {
            let n3 = "";
            const r3 = t3.length;
            let o3 = null;
            r3 < 2 && (o3 = []), o3 = new Array(r3 - 1), o3[r3 - 2] = t3[r3 - 1];
            for (let e4 = r3 - 3; e4 >= 0; --e4)
              o3[e4] = o3[e4 + 1] * t3[e4 + 1];
            const a3 = ["r", "c", "d", "d2", "d3"], s3 = o3.map((t4, e4) => `int ${a3[e4]} = index / ${t4}; ${e4 === o3.length - 1 ? `int ${a3[e4 + 1]} = index - ${a3[e4]} * ${t4}` : `index -= ${a3[e4]} * ${t4}`};`).join("");
            return n3 = `
      ivec5 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${e3[0]}, ${e3[1]}));
          int index = resTexRC.y * ${e3[0]} + resTexRC.x;
          ${s3}
          return ivec5(r, c, d, d2, d3);
        }
      `, new i2.GlslLibRoutine(n3);
          }
          getOutputUnpacked6DCoords(t3, e3) {
            let n3 = "";
            const r3 = t3.length;
            let o3 = null;
            r3 < 2 && (o3 = []), o3 = new Array(r3 - 1), o3[r3 - 2] = t3[r3 - 1];
            for (let e4 = r3 - 3; e4 >= 0; --e4)
              o3[e4] = o3[e4 + 1] * t3[e4 + 1];
            const a3 = ["r", "c", "d", "d2", "d3", "d4"], s3 = o3.map((t4, e4) => `int ${a3[e4]} = index / ${t4}; ${e4 === o3.length - 1 ? `int ${a3[e4 + 1]} = index - ${a3[e4]} * ${t4}` : `index -= ${a3[e4]} * ${t4}`};`).join("");
            return n3 = `
     ivec6 getOutputCoords() {
         ivec2 resTexRC = ivec2(TexCoords.xy *
                               vec2(${e3[0]}, ${e3[1]}));
         int index = resTexRC.y * ${e3[0]} + resTexRC.x;
         ${s3}
         return ivec6(r, c, d, d2, d3, d4);
       }
     `, new i2.GlslLibRoutine(n3);
          }
          getCommonUtilFuncs() {
            const t3 = {};
            let e3 = "uvFromFlat";
            t3[e3] = new i2.GlslLibRoutine("\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    "), e3 = "packedUVfrom1D", t3[e3] = new i2.GlslLibRoutine("\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      "), e3 = "packedUVfrom2D", t3[e3] = new i2.GlslLibRoutine("\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      "), e3 = "packedUVfrom3D", t3[e3] = new i2.GlslLibRoutine("\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      "), e3 = "sampleTexture";
            const n3 = (0, o2.getGlsl)(this.context.glContext.version);
            return t3[e3] = new i2.GlslLibRoutine(`
        float sampleTexture(sampler2D textureSampler, vec2 uv) {
            return ${n3.texture2D}(textureSampler, uv).r;
        }`), t3;
          }
          getInputsSamplingSnippets() {
            const t3 = {}, e3 = this.context.outputTextureLayout;
            return this.context.programInfo.inputNames.forEach((n3, r3) => {
              const i3 = this.context.inputTextureLayouts[r3], o3 = (0, s2.generateShaderFuncNameFromInputSamplerName)(n3);
              i3.isPacked ? t3[o3] = this.getPackedSamplerFromInput(o3, n3, i3) : t3[o3] = this.getUnpackedSamplerFromInput(o3, n3, i3);
              const a3 = (0, s2.generateShaderFuncNameFromInputSamplerNameAtOutCoords)(n3);
              i3.unpackedShape.length <= e3.unpackedShape.length && (i3.isPacked ? t3[a3] = this.getPackedSamplerAtOutputCoords(a3, i3, e3, n3) : t3[a3] = this.getUnpackedSamplerAtOutputCoords(a3, i3, e3, n3));
            }), t3;
          }
          getPackedSamplerAtOutputCoords(t3, e3, n3, o3) {
            const a3 = e3.unpackedShape, u3 = n3.unpackedShape, c2 = o3, l2 = (0, s2.generateShaderFuncNameFromInputSamplerName)(c2), p = a3.length, f = u3.length, d2 = r2.BroadcastUtil.getBroadcastDims(a3, u3), h2 = (0, s2.getCoordsDataType)(f), g2 = f - p;
            let b2;
            const m = (0, s2.getGlChannels)();
            b2 = p === 0 ? "" : f < 2 && d2.length >= 1 ? "coords = 0;" : d2.map((t4) => `coords.${m[t4 + g2]} = 0;`).join("\n");
            let y2 = "";
            y2 = f < 2 && p > 0 ? "coords" : a3.map((t4, e4) => `coords.${m[e4 + g2]}`).join(", ");
            let _2 = "return outputValue;";
            const v2 = r2.ShapeUtil.size(a3) === 1, w2 = r2.ShapeUtil.size(u3) === 1;
            if (p !== 1 || v2 || w2) {
              if (v2 && !w2)
                _2 = f === 1 ? "\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        " : "\n          return vec4(outputValue.x);\n        ";
              else if (d2.length) {
                const t4 = p - 2, e4 = p - 1;
                d2.indexOf(t4) > -1 && d2.indexOf(e4) > -1 ? _2 = "return vec4(outputValue.x);" : d2.indexOf(t4) > -1 ? _2 = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : d2.indexOf(e4) > -1 && (_2 = "return vec4(outputValue.xx, outputValue.zz);");
              }
            } else
              _2 = "\n        return vec4(outputValue.xy, outputValue.xy);\n      ";
            const x2 = `
      vec4 ${t3}() {
        ${h2} coords = getOutputCoords();
        
        int lastDim = coords.${m[f - 1]};
        coords.${m[f - 1]} = coords.${m[f - 2]};
        coords.${m[f - 2]} = lastDim;
      
        ${b2}
        vec4 outputValue = ${l2}(${y2});
        ${_2}
      }
    `;
            return new i2.GlslLibRoutine(x2, ["coordinates.getOutputCoords"]);
          }
          getUnpackedSamplerAtOutputCoords(t3, e3, n3, o3) {
            const a3 = [n3.width, n3.height], u3 = [e3.width, e3.height], c2 = e3.unpackedShape.length, l2 = n3.unpackedShape.length, p = e3.unpackedShape, f = n3.unpackedShape, d2 = (0, s2.generateShaderFuncNameFromInputSamplerName)(o3);
            if (c2 === l2 && r2.ArrayUtil.arraysEqual(u3, a3)) {
              const e4 = `
          float ${t3}() {
            return sampleTexture(${o3}, TexCoords);
          }
        `;
              return new i2.GlslLibRoutine(e4, ["coordinates.sampleTexture"]);
            }
            const h2 = (0, s2.getCoordsDataType)(l2), g2 = r2.BroadcastUtil.getBroadcastDims(p, f), b2 = l2 - c2;
            let m;
            const y2 = (0, s2.getGlChannels)();
            m = c2 === 0 ? "" : l2 < 2 && g2.length >= 1 ? "coords = 0;" : g2.map((t4) => `coords.${y2[t4 + b2]} = 0;`).join("\n");
            let _2 = "";
            _2 = l2 < 2 && c2 > 0 ? "coords" : e3.unpackedShape.map((t4, e4) => `coords.${y2[e4 + b2]}`).join(", ");
            const v2 = `
        float ${t3}() {
          ${h2} coords = getOutputCoords();
          ${m}
          return ${d2}(${_2});
        }
      `;
            return new i2.GlslLibRoutine(v2, ["coordinates.getOutputCoords"]);
          }
          getPackedSamplerFromInput(t3, e3, n3) {
            switch (n3.unpackedShape.length) {
              case 0:
                return this.getPackedSamplerScalar(t3, e3);
              case 1:
                return this.getPackedSampler1D(t3, e3, n3);
              case 2:
                return this.getPackedSampler2D(t3, e3, n3);
              case 3:
                return this.getPackedSampler3D(t3, e3, n3);
              default:
                return this.getPackedSamplerND(t3, e3, n3);
            }
          }
          getUnpackedSamplerFromInput(t3, e3, n3) {
            const r3 = n3.unpackedShape;
            switch (r3.length) {
              case 0:
                return this.getUnpackedSamplerScalar(t3, e3, n3);
              case 1:
                return this.getUnpackedSampler1D(t3, e3, n3);
              case 2:
                return this.getUnpackedSampler2D(t3, e3, n3);
              case 3:
                return this.getUnpackedSampler3D(t3, e3, n3);
              case 4:
                return this.getUnpackedSampler4D(t3, e3, n3);
              case 5:
                return this.getUnpackedSampler5D(t3, e3, n3);
              case 6:
                return this.getUnpackedSampler6D(t3, e3, n3);
              default:
                throw new Error(`Unsupported dimension ${r3.length}-D`);
            }
          }
          getPackedSamplerScalar(t3, e3) {
            const n3 = `
          vec4 ${t3}() {
            return ${(0, o2.getGlsl)(this.context.glContext.version).texture2D}(${e3}, halfCR);
          }
        `;
            return new i2.GlslLibRoutine(n3);
          }
          getPackedSampler1D(t3, e3, n3) {
            const r3 = [n3.width, n3.height], a3 = [r3[1], r3[0]], s3 = (0, o2.getGlsl)(this.context.glContext.version), u3 = `vec4 ${t3}(int index) {
      vec2 uv = packedUVfrom1D(
      ${a3[0]}, ${a3[1]}, index);
      return ${s3.texture2D}(${e3}, uv);
    }`;
            return new i2.GlslLibRoutine(u3, ["coordinates.packedUVfrom1D"]);
          }
          getPackedSampler2D(t3, e3, n3) {
            const a3 = n3.unpackedShape, s3 = [n3.width, n3.height], u3 = (0, o2.getGlsl)(this.context.glContext.version), c2 = s3[0], l2 = s3[1];
            if (s3 != null && r2.ArrayUtil.arraysEqual(a3, s3)) {
              const n4 = `vec4 ${t3}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${l2}.0, ${c2}.0);
        return ${u3.texture2D}(${e3}, uv);
      }`;
              return new i2.GlslLibRoutine(n4);
            }
            const p = s3, f = Math.ceil(a3[1] / 2), d2 = `vec4 ${t3}(int row, int col) {
      vec2 uv = packedUVfrom2D(${p[1]}, ${p[0]}, ${f}, row, col);
      return ${u3.texture2D}(${e3}, uv);
    }`;
            return new i2.GlslLibRoutine(d2, ["coordinates.packedUVfrom2D"]);
          }
          getPackedSampler3D(t3, e3, n3) {
            const r3 = n3.unpackedShape, a3 = [n3.width, n3.height], u3 = [a3[0], a3[1]], c2 = (0, o2.getGlsl)(this.context.glContext.version);
            if (r3[0] === 1) {
              const o3 = r3.slice(1), a4 = [1, 2], u4 = (0, s2.squeezeInputShape)(r3, o3), c3 = ["b", "row", "col"], l3 = JSON.parse(JSON.stringify(n3));
              l3.unpackedShape = u4;
              const p2 = this.getPackedSamplerFromInput(t3, e3, l3), f2 = `${p2.routineBody}
      vec4 ${t3}(int b, int row, int col) {
        return ${t3}(${(0, s2.getSqueezedParams)(c3, a4)});
      } `;
              return new i2.GlslLibRoutine(f2, p2.dependencies);
            }
            const l2 = u3[0], p = u3[1], f = Math.ceil(r3[2] / 2), d2 = `vec4 ${t3}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${p}, ${l2}, ${f * Math.ceil(r3[1] / 2)}, ${f}, b, row, col);
      return ${c2.texture2D}(${e3}, uv);}`;
            return new i2.GlslLibRoutine(d2, ["coordinates.packedUVfrom3D"]);
          }
          getPackedSamplerND(t3, e3, n3) {
            const r3 = n3.unpackedShape, a3 = r3.length, s3 = [n3.width, n3.height], u3 = (0, o2.getGlsl)(this.context.glContext.version), c2 = [s3[0], s3[1]], l2 = c2[1], p = c2[0], f = Math.ceil(r3[a3 - 1] / 2);
            let d2 = f * Math.ceil(r3[a3 - 2] / 2), h2 = "int b, int row, int col", g2 = `b * ${d2} + (row / 2) * ${f} + (col / 2)`;
            for (let t4 = 2; t4 < a3 - 1; t4++)
              h2 = `int b${t4}, ` + h2, d2 *= r3[a3 - t4 - 1], g2 = `b${t4} * ${d2} + ` + g2;
            const b2 = `vec4 ${t3}(${h2}) {
      int index = ${g2};
      int texR = index / ${p};
      int texC = index - texR * ${p};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}, ${l2});
      return ${u3.texture2D}(${e3}, uv);
    }`;
            return new i2.GlslLibRoutine(b2);
          }
          getUnpackedSamplerScalar(t3, e3, n3) {
            const [r3, o3] = [n3.width, n3.height];
            if (r3 === 1 && o3 === 1) {
              const n4 = `
          float ${t3}() {
            return sampleTexture(${e3}, halfCR);
          }
        `;
              return new i2.GlslLibRoutine(n4, ["coordinates.sampleTexture"]);
            }
            const a3 = `
        float ${t3}() {
          int offset_${e3} = coordsToOffset(TexCoords, ${r3}, ${o3});
          vec2 uv = uvFromFlat(${r3}, ${o3}, offset_${e3});
          return sampleTexture(${e3}, uv);
        }
      `;
            return new i2.GlslLibRoutine(a3, ["coordinates.uvFromFlat", "coordinates.sampleTexture", "coordinates.coordsToOffset"]);
          }
          getUnpackedSampler1D(t3, e3, n3) {
            const r3 = n3.width, o3 = n3.height;
            if (o3 === 1 && r3 === 1) {
              const n4 = `
        float ${t3}(int index) {
          return sampleTexture(${e3}, halfCR);
        }
      `;
              return new i2.GlslLibRoutine(n4, ["coordinates.sampleTexture"]);
            }
            if (o3 === 1) {
              const n4 = `
          float ${t3}(int index) {
            vec2 uv = vec2((float(index) + 0.5) / ${r3}.0, 0.5);
            return sampleTexture(${e3}, uv);
          }
        `;
              return new i2.GlslLibRoutine(n4, ["coordinates.sampleTexture"]);
            }
            if (r3 === 1) {
              const n4 = `
          float ${t3}(int index) {
            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${o3}.0);
            return sampleTexture(${e3}, uv);
          }
        `;
              return new i2.GlslLibRoutine(n4, ["coordinates.sampleTexture"]);
            }
            const a3 = `
        float ${t3}(int index) {
          vec2 uv = uvFromFlat(${r3}, ${o3}, index);
          return sampleTexture(${e3}, uv);
        }
      `;
            return new i2.GlslLibRoutine(a3, ["coordinates.uvFromFlat", "coordinates.sampleTexture"]);
          }
          getUnpackedSampler2D(t3, e3, n3) {
            const o3 = n3.unpackedShape, u3 = [n3.height, n3.width];
            if (u3 != null && r2.ArrayUtil.arraysEqual(o3, u3)) {
              const n4 = `
          float ${t3}(int row, int col) {
            vec2 uv = (vec2(row, col) + halfCR) / vec2(${u3[1]}.0, ${u3[0]}.0);
            return sampleTexture(${e3}, uv);
          }
        `;
              return new i2.GlslLibRoutine(n4, ["coordinates.sampleTexture"]);
            }
            const {newShape: c2, keptDims: l2} = (0, a2.squeezeShape)(o3), p = c2;
            if (p.length < o3.length) {
              const r3 = (0, s2.squeezeInputShape)(o3, p), a3 = JSON.parse(JSON.stringify(n3));
              a3.unpackedShape = r3;
              const u4 = ["col", "row"], c3 = `
          ${this.getUnpackedSamplerFromInput(t3, e3, a3).routineBody}
          float ${t3}(int row, int col) {
            return ${t3}(${(0, s2.getSqueezedParams)(u4, l2)});
          }
        `;
              return new i2.GlslLibRoutine(c3, ["coordinates.sampleTexture"]);
            }
            const f = u3[1], d2 = u3[0];
            if (d2 === 1) {
              const n4 = `
          float ${t3}(int row, int col) {
            int offset_${e3} = coordsToOffset(TexCoords, ${f}, ${d2});
            float index = dot(vec3(row, col, offset_${e3}), vec3(${o3[1]}, 1, 1));
            vec2 uv = vec2(0.5, (index + 0.5) / ${f}.0);
            return sampleTexture(${e3}, uv);
          }
        `;
              return new i2.GlslLibRoutine(n4, ["coordinates.sampleTexture", "coordinates.coordsToOffset"]);
            }
            if (f === 1) {
              const n4 = `
          float ${t3}(int row, int col) {
            int offset_${e3} = coordsToOffset(TexCoords, ${f}, ${d2});
            float index = dot(vec3(row, col, offset_${e3}), vec3(${o3[1]}, 1, 1));
            vec2 uv = vec2((index + 0.5) / ${d2}.0, 0.5);
            return sampleTexture(${e3}, uv);
          }
        `;
              return new i2.GlslLibRoutine(n4, ["coordinates.sampleTexture", "coordinates.coordsToOffset"]);
            }
            const h2 = `
        float ${t3}(int row, int col) {
          int index = col * ${o3[1]} + row;
          vec2 uv = uvFromFlat(${f}, ${d2}, index);
          return sampleTexture(${e3}, uv);
        }
      `;
            return new i2.GlslLibRoutine(h2, ["coordinates.uvFromFlat", "coordinates.sampleTexture", "coordinates.coordsToOffset"]);
          }
          getUnpackedSampler3D(t3, e3, n3) {
            const r3 = n3.unpackedShape, o3 = r3[1] * r3[2], u3 = r3[2], {newShape: c2, keptDims: l2} = (0, a2.squeezeShape)(r3), p = c2;
            if (p.length < r3.length) {
              const o4 = (0, s2.squeezeInputShape)(r3, p), a3 = ["batch", "col", "row"], u4 = JSON.parse(JSON.stringify(n3));
              u4.unpackedShape = o4;
              const c3 = this.getUnpackedSamplerFromInput(t3, e3, u4), f2 = l2.reverse(), d2 = `
          ${c3.routineBody}
          float ${t3}(int batch, int row, int col) {
            return ${t3}(${(0, s2.getSqueezedParams)(a3, f2)});
          }
        `;
              return new i2.GlslLibRoutine(d2, c3.dependencies);
            }
            const f = `
          float ${t3}(int depth, int row, int col) {
            // Explicitly use integer operations as dot() only works on floats.
            int index = depth * ${o3} + col * ${u3} + row;
            vec2 uv = uvFromFlat(${n3.width}, ${n3.height}, index);
            return sampleTexture(${e3}, uv);
          }
      `;
            return new i2.GlslLibRoutine(f, ["coordinates.uvFromFlat", "coordinates.sampleTexture", "coordinates.coordsToOffset"]);
          }
          getUnpackedSampler4D(t3, e3, n3) {
            const r3 = n3.unpackedShape, o3 = r3[3], a3 = r3[2] * o3, s3 = `
        float ${t3}(int row, int col, int depth, int depth2) {
          int index = row * ${r3[1] * a3} + col * ${a3} +
              depth2 * ${o3} + depth;
          vec2 uv = uvFromFlat(${n3.width}, ${n3.height}, index);
          return sampleTexture(${e3}, uv);
        }
      `;
            return new i2.GlslLibRoutine(s3, ["coordinates.uvFromFlat", "coordinates.sampleTexture"]);
          }
          getUnpackedSampler5D(t3, e3, n3) {
            const r3 = n3.unpackedShape, o3 = r3[4], u3 = r3[3] * o3, c2 = r3[2] * u3, l2 = r3[1] * c2, {newShape: p, keptDims: f} = (0, a2.squeezeShape)(r3);
            if (p.length < r3.length) {
              const o4 = (0, s2.squeezeInputShape)(r3, p), a3 = ["row", "col", "depth", "depth2", "depth3"], u4 = JSON.parse(JSON.stringify(n3));
              u4.unpackedShape = o4;
              const c3 = `
          ${this.getUnpackedSamplerFromInput(t3, e3, u4).routineBody}
          float ${t3}(int row, int col, int depth, int depth2, int depth3) {
            return ${t3}(${(0, s2.getSqueezedParams)(a3, f)});
          }
        `;
              return new i2.GlslLibRoutine(c3, ["coordinates.sampleTexture", "coordinates.uvFromFlat"]);
            }
            const d2 = `
        float ${t3}(int row, int col, int depth, int depth2, int depth3) {
          int index = row * ${l2} + col * ${c2} + depth * ${u3} +
          depth3 * ${o3} + depth2;
          vec2 uv = uvFromFlat(${n3.width}, ${n3.height}, index);
          return sampleTexture(${e3}, uv);
        }
      `;
            return new i2.GlslLibRoutine(d2, ["coordinates.sampleTexture", "coordinates.uvFromFlat"]);
          }
          getUnpackedSampler6D(t3, e3, n3) {
            const r3 = n3.unpackedShape, o3 = r3[5], u3 = r3[4] * o3, c2 = r3[3] * u3, l2 = r3[2] * c2, p = r3[1] * l2, {newShape: f, keptDims: d2} = (0, a2.squeezeShape)(r3);
            if (f.length < r3.length) {
              const o4 = (0, s2.squeezeInputShape)(r3, f), a3 = ["row", "col", "depth", "depth2", "depth3", "depth4"], u4 = JSON.parse(JSON.stringify(n3));
              u4.unpackedShape = o4;
              const c3 = `
            ${this.getUnpackedSamplerFromInput(t3, e3, u4).routineBody}
            float ${t3}(int row, int col, int depth,
              int depth2, int depth3, int depth4) {
              return ${t3}(${(0, s2.getSqueezedParams)(a3, d2)});
            }
          `;
              return new i2.GlslLibRoutine(c3, ["coordinates.sampleTexture", "coordinates.uvFromFlat"]);
            }
            const h2 = `
          float ${t3}(int row, int col, int depth,
            int depth2, int depth3, int depth4) {
            int index = row * ${p} + col * ${l2} + depth * ${c2} +
            depth2 * ${u3} + depth3 * ${o3} + depth4;
            vec2 uv = uvFromFlat(${n3.width}, ${n3.height}, index);
            return sampleTexture(${e3}, uv);
          }
        `;
            return new i2.GlslLibRoutine(h2, ["coordinates.uvFromFlat", "coordinates.sampleTexture", "coordinates.coordsToOffset"]);
          }
          toVec() {
            const t3 = this.context.outputTextureLayout, e3 = t3.shape.length, n3 = t3.strides, r3 = t3.width, o3 = t3.height, a3 = [];
            for (let t4 = 0; t4 < e3 - 1; ++t4)
              a3.push(`
        c[${t4}] = offset / ${n3[t4]};`), a3.push(`
        offset -= c[${t4}] * ${n3[t4]};`);
            a3.push(`
        c[${e3 - 1}] = offset;`);
            const s3 = `
      void toVec(vec2 texCoords, out int c[${e3}]) {
        int offset = coordsToOffset(texCoords, ${r3}, ${o3});
        ${a3.join("")}
      }
      void toVec(int offset, out int c[${e3}]) {
        ${a3.join("")}
      }
    `;
            return {toVec: new i2.GlslLibRoutine(s3, ["coordinates.coordsToOffset"])};
          }
          valueFrom() {
            const t3 = {};
            return this.context.programInfo.inputNames.forEach((e3, n3) => {
              const r3 = this.context.inputTextureLayouts[n3], o3 = (r3.unpackedShape.length > 0 ? r3.unpackedShape : r3.shape).length;
              let a3 = `_${e3}`;
              t3[a3] = new i2.GlslLibRoutine(this.getValueFromSingle(e3, o3, r3.width, r3.height, false), [`shapeUtils.indicesToOffset${a3}`, "coordinates.offsetToCoords", "fragcolor.getColorAsFloat"]), a3 += "_T", t3[a3] = new i2.GlslLibRoutine(this.getValueFromSingle(e3, o3, r3.width, r3.height, true), [`shapeUtils.indicesToOffset${a3}`, "coordinates.offsetToCoords", "fragcolor.getColorAsFloat"]);
            }), t3;
          }
          getValueFromSingle(t3, e3, n3, r3, i3) {
            let a3 = `_${t3}`;
            return i3 && (a3 += "_T"), `
        float ${a3}(int m[${e3}]) {
          int offset = indicesToOffset${a3}(m);
          vec2 coords = offsetToCoords(offset, ${n3}, ${r3});
          float value = getColorAsFloat(${(0, o2.getGlsl)(this.context.glContext.version).texture2D}(${t3}, coords));
          return value;
        }
        `;
          }
          getPackedValueFrom(t3, e3, n3, r3, i3) {
            let a3 = `_${t3}_Pack`;
            return i3 && (a3 += "_T"), `
        vec4 ${a3}(int m[${e3}]) {
          int offset = indicesToOffset_${t3}(m);
          vec2 coords = offsetToCoords(offset, ${n3}, ${r3});
          return ${(0, o2.getGlsl)(this.context.glContext.version).texture2D}(${t3}, coords);
        }
        `;
          }
        }
        e2.CoordsGlslLib = u2;
      }, 8520: (t2, e2) => {
        "use strict";
        var n2;
        Object.defineProperty(e2, "__esModule", {value: true}), e2.TopologicalSortGlslRoutines = e2.GlslLibRoutineNode = e2.GlslLibRoutine = e2.GlslLib = e2.GlslContext = e2.FunctionType = void 0, (n2 = e2.FunctionType || (e2.FunctionType = {}))[n2.ValueBased = 0] = "ValueBased", n2[n2.Positional = 1] = "Positional", e2.GlslContext = class {
          constructor(t3, e3, n3, r2) {
            this.glContext = t3, this.programInfo = e3, this.inputTextureLayouts = n3, this.outputTextureLayout = r2;
          }
        }, e2.GlslLib = class {
          constructor(t3) {
            this.context = t3;
          }
        }, e2.GlslLibRoutine = class {
          constructor(t3, e3) {
            this.routineBody = t3, this.dependencies = e3;
          }
        }, e2.GlslLibRoutineNode = class {
          constructor(t3, e3, n3) {
            this.name = t3, this.dependencies = n3 || [], e3 && (this.routineBody = e3);
          }
          addDependency(t3) {
            t3 && this.dependencies.push(t3);
          }
        }, e2.TopologicalSortGlslRoutines = class {
          static returnOrderedNodes(t3) {
            if (!t3 || t3.length === 0)
              return [];
            if (t3.length === 1)
              return t3;
            const e3 = new Set(), n3 = new Set(), r2 = new Array();
            return this.createOrderedNodes(t3, e3, n3, r2), r2;
          }
          static createOrderedNodes(t3, e3, n3, r2) {
            for (let i2 = 0; i2 < t3.length; ++i2)
              this.dfsTraverse(t3[i2], e3, n3, r2);
          }
          static dfsTraverse(t3, e3, n3, r2) {
            if (!t3 || n3.has(t3.name))
              return;
            if (e3.has(t3.name))
              throw new Error("Cyclic dependency detected. Can't topologically sort routines needed for shader.");
            e3.add(t3.name);
            const i2 = t3.dependencies;
            if (i2 && i2.length > 0)
              for (let t4 = 0; t4 < i2.length; ++t4)
                this.dfsTraverse(i2[t4], e3, n3, r2);
            r2.push(t3), n3.add(t3.name), e3.delete(t3.name);
          }
        };
      }, 7341: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.EncodingGlslLib = void 0;
        const r2 = n2(8520);
        class i2 extends r2.GlslLib {
          constructor(t3) {
            super(t3);
          }
          getFunctions() {
            return Object.assign(Object.assign({}, this.encodeFloat32()), this.decodeFloat32());
          }
          getCustomTypes() {
            return {};
          }
          encodeFloat32() {
            return {encode: new r2.GlslLibRoutine("highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        ")};
          }
          decodeFloat32() {
            return {decode: new r2.GlslLibRoutine("highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        ")};
          }
          encodeUint8() {
            const t3 = i2.isLittleEndian() ? "rgba.rgba=rgba.abgr;" : "";
            return {encode: new r2.GlslLibRoutine(`
      highp vec4 encode(highp float f) {
        highp float F = abs(f);
        highp float Sign = step(0.0,-f);
        highp float Exponent = floor(log2(F));
        highp float Mantissa = (exp2(- Exponent) * F);
        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));
        highp vec4 rgba;
        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));
        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);
        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));
        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));
        ${t3}
        rgba = rgba / 255.0; // values need to be normalized to [0,1]
        return rgba;
    }
        `)};
          }
          decodeUint8() {
            const t3 = i2.isLittleEndian() ? "rgba.rgba=rgba.abgr;" : "";
            return {decode: new r2.GlslLibRoutine(`
        highp float decode(highp vec4 rgba) {
          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]
          ${t3}
          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;
          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;
          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);
          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));
          return Result;
      }
        `)};
          }
          static isLittleEndian() {
            const t3 = new ArrayBuffer(4), e3 = new Uint32Array(t3), n3 = new Uint8Array(t3);
            if (e3[0] = 3735928559, n3[0] === 239)
              return true;
            if (n3[0] === 222)
              return false;
            throw new Error("unknown endianness");
          }
        }
        e2.EncodingGlslLib = i2;
      }, 9894: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.FragColorGlslLib = void 0;
        const r2 = n2(8520), i2 = n2(5060);
        class o2 extends r2.GlslLib {
          constructor(t3) {
            super(t3);
          }
          getFunctions() {
            return Object.assign(Object.assign({}, this.setFragColor()), this.getColorAsFloat());
          }
          getCustomTypes() {
            return {};
          }
          setFragColor() {
            const t3 = (0, i2.getGlsl)(this.context.glContext.version);
            return {setFragColor: new r2.GlslLibRoutine(`
        void setFragColor(float value) {
            ${t3.output} = encode(value);
        }
        `, ["encoding.encode"])};
          }
          getColorAsFloat() {
            return {getColorAsFloat: new r2.GlslLibRoutine("\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        ", ["encoding.decode"])};
          }
        }
        e2.FragColorGlslLib = o2;
      }, 2848: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.replaceInlines = void 0;
        const n2 = /@inline[\s\n\r]+(\w+)[\s\n\r]+([0-9a-zA-Z_]+)\s*\(([^)]*)\)\s*{(([^}]|[\n\r])*)}/gm;
        e2.replaceInlines = function(t3) {
          const e3 = {};
          let r2;
          for (; (r2 = n2.exec(t3)) !== null; ) {
            const t4 = r2[3].split(",").map((t5) => {
              const e4 = t5.trim().split(" ");
              return e4 && e4.length === 2 ? {type: e4[0], name: e4[1]} : null;
            }).filter((t5) => t5 !== null);
            e3[r2[2]] = {params: t4, body: r2[4]};
          }
          for (const n3 in e3) {
            const i2 = "(\\w+)?\\s+([_0-9a-zA-Z]+)\\s+=\\s+__FUNC__\\((.*)\\)\\s*;".replace("__FUNC__", n3), o2 = new RegExp(i2, "gm");
            for (; (r2 = o2.exec(t3)) !== null; ) {
              const i3 = r2[1], o3 = r2[2], a2 = r2[3].split(","), s2 = i3 ? `${i3} ${o3};` : "";
              let u2 = e3[n3].body, c2 = "";
              e3[n3].params.forEach((t4, e4) => {
                t4 && (c2 += `${t4.type} ${t4.name} = ${a2[e4]};
`);
              }), u2 = `${c2}
 ${u2}`, u2 = u2.replace("return", `${o3} = `);
              const l2 = `
      ${s2}
      {
        ${u2}
      }
      `;
              t3 = t3.replace(r2[0], l2);
            }
          }
          return t3.replace(n2, "");
        };
      }, 8879: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.GlslPreprocessor = void 0;
        const r2 = n2(8520), i2 = n2(2848), o2 = n2(5483), a2 = n2(5060);
        e2.GlslPreprocessor = class {
          constructor(t3, e3, n3, i3) {
            this.libs = {}, this.glslLibRoutineDependencyGraph = {}, this.context = new r2.GlslContext(t3, e3, n3, i3), Object.keys(o2.glslRegistry).forEach((t4) => {
              const e4 = new o2.glslRegistry[t4](this.context);
              this.libs[t4] = e4;
            });
            const a3 = this.glslLibRoutineDependencyGraph;
            for (const t4 in this.libs) {
              const e4 = this.libs[t4].getFunctions();
              for (const n4 in e4) {
                const i4 = t4 + "." + n4;
                let o3;
                a3[i4] ? (o3 = a3[i4], o3.routineBody = e4[n4].routineBody) : (o3 = new r2.GlslLibRoutineNode(i4, e4[n4].routineBody), a3[i4] = o3);
                const s2 = e4[n4].dependencies;
                if (s2)
                  for (let t5 = 0; t5 < s2.length; ++t5)
                    if (a3[s2[t5]])
                      o3.addDependency(a3[s2[t5]]);
                    else {
                      const e5 = new r2.GlslLibRoutineNode(s2[t5]);
                      a3[s2[t5]] = e5, o3.addDependency(e5);
                    }
              }
            }
          }
          preprocess() {
            const t3 = this.context.programInfo;
            let e3 = t3.shaderSource;
            return this.context.programInfo.hasMain || (e3 = `${e3}
      ${(0, a2.getDefaultFragShaderMain)(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`), e3 = (0, i2.replaceInlines)(e3), `${(0, a2.getFragShaderPreamble)(this.context.glContext.version)}
    ${this.getUniforms(t3.inputNames, t3.variables)}
    ${this.getImports(e3)}
    ${e3}`;
          }
          getImports(t3) {
            const e3 = this.selectGlslLibRoutinesToBeIncluded(t3);
            if (e3.length === 0)
              return "";
            let n3 = "";
            for (let t4 = 0; t4 < e3.length; ++t4) {
              if (!e3[t4].routineBody)
                throw new Error(`Missing body for the Glsl Library routine: ${e3[t4].name}`);
              n3 += e3[t4].routineBody + "\n";
            }
            return n3;
          }
          selectGlslLibRoutinesToBeIncluded(t3) {
            const e3 = [];
            return Object.keys(this.glslLibRoutineDependencyGraph).forEach((n3) => {
              const r3 = n3.split(".")[1];
              t3.indexOf(r3) !== -1 && e3.push(this.glslLibRoutineDependencyGraph[n3]);
            }), r2.TopologicalSortGlslRoutines.returnOrderedNodes(e3);
          }
          getUniforms(t3, e3) {
            const n3 = [];
            if (t3)
              for (const e4 of t3)
                n3.push(`uniform sampler2D ${e4};`);
            if (e3)
              for (const t4 of e3)
                n3.push(`uniform ${t4.type} ${t4.name}${t4.arrayLength ? `[${t4.arrayLength}]` : ""};`);
            return n3.join("\n");
          }
        };
      }, 5483: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.glslRegistry = void 0;
        const r2 = n2(5107), i2 = n2(7341), o2 = n2(9894), a2 = n2(2655), s2 = n2(3891);
        e2.glslRegistry = {encoding: i2.EncodingGlslLib, fragcolor: o2.FragColorGlslLib, vec: s2.VecGlslLib, shapeUtils: a2.ShapeUtilsGlslLib, coordinates: r2.CoordsGlslLib};
      }, 2655: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.ShapeUtilsGlslLib = void 0;
        const r2 = n2(8520);
        class i2 extends r2.GlslLib {
          constructor(t3) {
            super(t3);
          }
          getFunctions() {
            return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.bcastIndex()), this.bcastMatmulIndex()), this.offsetToIndices()), this.indicesToOffset()), this.incrementIndices());
          }
          getCustomTypes() {
            return {};
          }
          bcastIndex() {
            const t3 = this.context.outputTextureLayout.shape.length, e3 = {};
            return this.context.programInfo.inputNames.forEach((n3, i3) => {
              const o2 = this.context.inputTextureLayouts[i3].unpackedShape;
              if (o2.length <= t3) {
                const i4 = o2.length, a2 = t3 - i4, s2 = `bcastIndices_${n3}`;
                let u2 = "";
                for (let t4 = 0; t4 < i4; ++t4)
                  u2 += `
          realIndices[${t4}] = int( mod(float(bcastedIndices[${a2 + t4}]), ${o2[t4]}.0) );
          `;
                const c2 = `
        void ${s2} (int bcastedIndices[${t3}], out int realIndices[${i4}]) {
          ${u2}
        }
        `;
                e3[s2] = new r2.GlslLibRoutine(c2);
              }
            }), e3;
          }
          bcastMatmulIndex() {
            const t3 = this.context.outputTextureLayout.shape.length, e3 = {};
            return this.context.programInfo.inputNames.forEach((n3, i3) => {
              const o2 = this.context.inputTextureLayouts[i3].shape;
              if (!(o2.length < 2 || o2.length > t3)) {
                const i4 = o2.length, a2 = t3 - i4, s2 = `bcastMatmulIndices_${n3}`;
                let u2 = "";
                for (let t4 = 0; t4 < i4 - 2; ++t4)
                  u2 += `
          realIndices[${t4}] = int( mod(float(bcastedIndices[${a2 + t4}]), ${o2[t4]}.0) );
          `;
                const c2 = `
        void ${s2}(int bcastedIndices[${t3}], out int realIndices[${i4}]) {
          ${u2}
          realIndices[${i4 - 1}] = bcastedIndices[${t3 - 1}];
          realIndices[${i4 - 2}] = bcastedIndices[${t3 - 2}];
        }
        `;
                e3[s2] = new r2.GlslLibRoutine(c2);
              }
            }), e3;
          }
          indicesToOffset() {
            const t3 = {};
            return this.context.programInfo.inputNames.forEach((e3, n3) => {
              const o2 = this.context.inputTextureLayouts[n3].shape, a2 = this.context.inputTextureLayouts[n3].strides, s2 = o2.length;
              let u2 = `indicesToOffset_${e3}`;
              t3[u2] = new r2.GlslLibRoutine(i2.indexToOffsetSingle(u2, s2, a2)), u2 = `indicesToOffset_${e3}_T`, t3[u2] = new r2.GlslLibRoutine(i2.indexToOffsetSingle(u2, s2, a2.slice().reverse()));
            }), t3;
          }
          static indexToOffsetSingle(t3, e3, n3) {
            let r3 = "";
            for (let t4 = e3 - 1; t4 >= 0; --t4)
              r3 += `
        offset += indices[${t4}] * ${n3[t4]};
        `;
            return `
      int ${t3}(int indices[${e3}]) {
        int offset = 0;
        ${r3}
        return offset;
      }
      `;
          }
          offsetToIndices() {
            const t3 = {};
            return this.context.programInfo.inputNames.forEach((e3, n3) => {
              const o2 = this.context.inputTextureLayouts[n3].shape, a2 = this.context.inputTextureLayouts[n3].strides, s2 = o2.length;
              let u2 = `offsetToIndices_${e3}`;
              t3[u2] = new r2.GlslLibRoutine(i2.offsetToIndicesSingle(u2, s2, a2)), u2 = `offsetToIndices_${e3}_T`, t3[u2] = new r2.GlslLibRoutine(i2.offsetToIndicesSingle(u2, s2, a2.slice().reverse()));
            }), t3;
          }
          static offsetToIndicesSingle(t3, e3, n3) {
            const r3 = [];
            for (let t4 = 0; t4 < e3 - 1; ++t4)
              r3.push(`
      indices[${t4}] = offset / ${n3[t4]};`), r3.push(`
        offset -= indices[${t4}] * ${n3[t4]};`);
            return r3.push(`
      indices[${e3 - 1}] = offset;`), `
      void ${t3}(int offset, out int indices[${e3}]) {
        ${r3.join("")}
      }
      `;
          }
          incrementIndices() {
            const t3 = {};
            return this.context.programInfo.inputNames.forEach((e3, n3) => {
              const i3 = this.context.inputTextureLayouts[n3].shape, o2 = i3.length, a2 = `incrementIndices_${e3}`;
              let s2 = "";
              for (let t4 = 0; t4 < o2; ++t4)
                s2 += `
        shape[${t4}] = ${i3[t4]};`;
              const u2 = `
        void ${a2}(int axis, out int indices[${o2}]) {
          int shape[${o2}];
          ${s2};
          for(int i = ${o2} -1 ; i >= 0; --i) {
            if(i > axis) continue;
            indices[i] += 1;
            if(indices[i] < shape[i]) {
              break;
            }
            indices[i] = 0;
          }
        }
        `;
              t3[a2] = new r2.GlslLibRoutine(u2);
            }), t3;
          }
        }
        e2.ShapeUtilsGlslLib = i2;
      }, 5060: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.getDefaultFragShaderMain = e2.getFragShaderPreamble = e2.getVertexShaderSource = e2.getGlsl = void 0;
        const n2 = {version: "", attribute: "attribute", varyingVertex: "varying", varyingFrag: "varying", texture2D: "texture2D", output: "gl_FragColor", outputDeclaration: ""}, r2 = {version: "#version 300 es", attribute: "in", varyingVertex: "out", varyingFrag: "in", texture2D: "texture", output: "outputColor", outputDeclaration: "out vec4 outputColor;"};
        function i2(t3) {
          return t3 === 1 ? n2 : r2;
        }
        e2.getGlsl = i2, e2.getVertexShaderSource = function(t3) {
          const e3 = i2(t3);
          return `${e3.version}
      precision highp float;
      ${e3.attribute} vec3 position;
      ${e3.attribute} vec2 textureCoord;

      ${e3.varyingVertex} vec2 TexCoords;

      void main()
      {
          gl_Position = vec4(position, 1.0);
          TexCoords = textureCoord;
      }`;
        }, e2.getFragShaderPreamble = function(t3) {
          const e3 = i2(t3);
          return `${e3.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${e3.varyingFrag} vec2 TexCoords;
    ${e3.outputDeclaration}
    const vec2 halfCR = vec2(0.5, 0.5);

    // Custom vector types to handle higher dimenalities.
    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    `;
        }, e2.getDefaultFragShaderMain = function(t3, e3) {
          return `
  void main() {
    int indices[${e3}];
    toVec(TexCoords, indices);
    vec4 result = vec4(process(indices));
    ${i2(t3).output} = result;
  }
  `;
        };
      }, 3891: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.VecGlslLib = void 0;
        const r2 = n2(8520);
        class i2 extends r2.GlslLib {
          constructor(t3) {
            super(t3);
          }
          getCustomTypes() {
            return {};
          }
          getFunctions() {
            return Object.assign(Object.assign(Object.assign(Object.assign({}, this.binaryVecFunctions()), this.copyVec()), this.setVecItem()), this.getVecItem());
          }
          binaryVecFunctions() {
            const t3 = this.context.outputTextureLayout.shape.length, e3 = {add: "+=", sub: "-=", mul: "*=", div: "/="}, n3 = {};
            for (const i3 in e3) {
              const o2 = `${i3}Vec`;
              let a2 = "";
              for (let n4 = 0; n4 < t3; ++n4)
                a2 += `
          dest[${n4}] ${e3[i3]} src[${n4}];
          `;
              const s2 = `
        void ${o2}(int src[${t3}], out int dest[${t3}]) {
          ${a2}
        }
        `;
              n3[o2] = new r2.GlslLibRoutine(s2);
            }
            return n3;
          }
          copyVec() {
            const t3 = this.context.outputTextureLayout.shape.length;
            let e3 = "";
            for (let n4 = 0; n4 < t3; ++n4)
              e3 += `
        dest[${n4}] = src[${n4}];
        `;
            const n3 = `
      void copyVec(int src[${t3}], out int dest[${t3}]) {
        ${e3}
      }
      `;
            return {copyVec: new r2.GlslLibRoutine(n3)};
          }
          setVecItem() {
            const t3 = this.context.outputTextureLayout.shape.length;
            let e3 = `
        if(index < 0)
            index =${t3} + index;
        if (index == 0)
            m[0] = value;
        `;
            for (let n4 = 1; n4 < t3 - 1; ++n4)
              e3 += `
        else if (index == ${n4})
            m[${n4}] = value;
            `;
            e3 += `
        else
            m[${t3 - 1}] = value;
        `;
            const n3 = `
      void setVecItem(out int m[${t3}], int index, int value) {
        ${e3}
      }
        `;
            return {setVecItem: new r2.GlslLibRoutine(n3)};
          }
          getVecItem() {
            const t3 = this.context.outputTextureLayout.shape.length;
            let e3 = `
        if(index < 0)
            index = ${t3} + index;
        if (index == 0)
            return m[0];
      `;
            for (let n4 = 1; n4 < t3 - 1; ++n4)
              e3 += `
        else if (index == ${n4})
            return m[${n4}];
      `;
            e3 += `
        else
            return m[${t3 - 1}];
        `;
            const n3 = `
      int getVecItem(int m[${t3}], int index) {
        ${e3}
      }
    `;
            return {getVecItem: new r2.GlslLibRoutine(n3)};
          }
        }
        e2.VecGlslLib = i2;
      }, 8316: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.WebGLInferenceHandler = void 0;
        const r2 = n2(6231), i2 = n2(9162), o2 = n2(2517), a2 = n2(2403), s2 = n2(7019), u2 = n2(8710), c2 = n2(5611), l2 = n2(4057), p = n2(2039);
        e2.WebGLInferenceHandler = class {
          constructor(t3) {
            this.session = t3, this.packedTextureDataCache = new Map(), this.unpackedTextureDataCache = new Map();
          }
          calculateTextureWidthAndHeight(t3, e3) {
            return (0, l2.calculateTextureWidthAndHeight)(this.session.layoutStrategy, t3, e3);
          }
          executeProgram(t3, e3) {
            if (e3.length < t3.inputNames.length)
              throw new Error(`Input size mustn't be less than ${t3.inputNames.length}.`);
            if (t3.inputNames.length !== t3.inputTypes.length)
              throw new Error("input names size does not match input types");
            const n3 = [];
            for (let r4 = 0; r4 < t3.inputNames.length; ++r4)
              n3[r4] = this.getOrCreateTextureData(e3[r4], t3.inputTypes[r4]);
            const r3 = ((t4, e4) => {
              const n4 = e4.map((t5) => `${t5.unpackedShape.join(",")};${t5.width}x${t5.height}`).join("_");
              let r4 = t4.name;
              return t4.cacheHint && (r4 += "[" + t4.cacheHint + "]"), r4 += ":" + n4, r4;
            })(t3, n3);
            let i3 = this.session.programManager.getArtifact(r3);
            const o3 = i3 ? i3.programInfo : typeof t3.get == "function" ? t3.get() : t3, a3 = (0, l2.createTextureLayoutFromTextureType)(this.session.layoutStrategy, o3.output.dims, o3.output.textureType), s3 = this.createTextureData(a3, o3.output.type);
            return i3 || (i3 = this.session.programManager.build(o3, n3, s3), this.session.programManager.setArtifact(r3, i3)), this.runProgram(i3, n3, s3), s3;
          }
          run(t3, e3) {
            return this.executeProgram(t3, e3).tensor;
          }
          runProgram(t3, e3, n3) {
            for (let n4 = 0; n4 < e3.length; ++n4)
              if (!!e3[n4].isPacked != (t3.programInfo.inputTypes[n4] === p.TextureType.packed))
                throw new Error(`input[${n4}] property packed inconsistent`);
            if (!!n3.isPacked != (t3.programInfo.output.textureType === p.TextureType.packed))
              throw new Error("output property packed inconsistent");
            this.session.programManager.run(t3, e3, n3);
          }
          getOrCreateTextureData(t3, e3) {
            let n3 = this.getTextureData(t3.dataId, e3 === p.TextureType.packed);
            if (!n3 && (n3 = this.getTextureData(t3.dataId, e3 !== p.TextureType.packed), n3))
              return e3 === p.TextureType.packed ? this.pack(n3) : this.unpack(n3);
            if (!n3) {
              const r3 = (0, l2.createTextureLayoutFromTextureType)(this.session.layoutStrategy, t3.dims, e3);
              if (e3 === p.TextureType.packedLastDimension) {
                const n4 = 1, r4 = 4, i3 = t3.dims;
                if (i3.length === 4) {
                  const o3 = [i3[0], Math.ceil(i3[1] * i3[2] * i3[3] / r4)], a3 = (0, l2.createTextureLayoutFromTextureType)(this.session.layoutStrategy, o3, e3);
                  let s3 = t3.numberData;
                  if (i3[1] * i3[2] * i3[3] % r4 != 0) {
                    const e4 = i3[0], o4 = i3[1] * i3[2] * i3[3], a4 = Math.ceil(o4 * n4 / r4) * r4;
                    s3 = new Float32Array(e4 * a4);
                    for (let r5 = 0; r5 < e4; ++r5) {
                      const e5 = r5 * o4, i4 = r5 * a4 + r5 % n4 * o4;
                      s3.set(t3.numberData.subarray(e5, e5 + o4), i4);
                    }
                  }
                  return this.createTextureData(a3, t3.type, s3, t3, 1);
                }
              }
              if (e3 === p.TextureType.packed) {
                const e4 = (0, l2.createTextureLayoutFromShape)(this.session.layoutStrategy, t3.dims, 1, [], {reverseWH: true}), r4 = this.createTextureData(e4, t3.type, t3.numberData, t3, 1);
                n3 = this.pack(r4);
              } else
                n3 = this.createTextureData(r3, t3.type, t3.numberData, t3, 1);
            }
            return n3;
          }
          createTextureDataFromLayoutBindTensor(t3, e3, n3, r3) {
            return this.createTextureData(t3, e3, n3, r3, 1);
          }
          createTextureData(t3, e3, n3, i3, o3) {
            r2.Logger.verbose("InferenceHandler", `Creating TextureData: layout:[${JSON.stringify(t3)}]`);
            const a3 = this.session.textureManager.createTextureFromLayout(e3, t3, n3, o3);
            return this.createTextureDataFromTexture(t3, e3, a3, i3);
          }
          reshapeUnpacked(t3, e3) {
            const n3 = this.getOrCreateTextureData(t3, p.TextureType.unpacked), r3 = {channels: n3.channels, height: n3.height, width: n3.width, shape: e3.length !== 0 ? e3 : [1], strides: o2.ShapeUtil.computeStrides(e3), unpackedShape: e3};
            return this.createTextureDataFromTexture(r3, t3.type, n3.texture).tensor;
          }
          reshapePacked(t3, e3) {
            const n3 = this.getOrCreateTextureData(t3, p.TextureType.packed);
            if ((0, s2.isReshapeCheap)(t3.dims, e3)) {
              const r4 = {channels: n3.channels, height: n3.height, width: n3.width, shape: e3.length !== 0 ? e3 : [1], strides: o2.ShapeUtil.computeStrides(e3), unpackedShape: e3, isPacked: true};
              return this.createTextureDataFromTexture(r4, t3.type, n3.texture).tensor;
            }
            const r3 = (0, s2.processDims3D)(t3.dims), i3 = (0, s2.processDims3D)(e3), a3 = this.reshapePacked(t3, r3), u3 = this.run((0, s2.createPackedReshape3DProgramInfoLoader)(this, a3, i3), [a3]);
            return this.reshapePacked(u3, e3);
          }
          cast(t3, e3) {
            const n3 = this.getOrCreateTextureData(t3, p.TextureType.unpacked);
            return this.createTextureDataFromTexture(n3, e3, n3.texture).tensor;
          }
          createTextureDataFromTexture(t3, e3, n3, r3, o3) {
            const a3 = Object.assign(Object.assign({}, t3), {tensor: r3 || new i2.Tensor(t3.unpackedShape, e3, (t4) => this.readTexture(a3), async (t4) => this.readTextureAsync(a3), void 0, o3), texture: n3});
            return this.setTextureData(a3.tensor.dataId, a3, t3.isPacked), a3;
          }
          getTextureData(t3, e3 = false) {
            return this.session.isInitializer(t3) ? this.session.getTextureData(t3, e3) : e3 ? this.packedTextureDataCache.get(t3) : this.unpackedTextureDataCache.get(t3);
          }
          setTextureData(t3, e3, n3 = false) {
            this.session.isInitializer(t3) ? this.session.setTextureData(t3, e3, n3) : (n3 ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(t3, e3);
          }
          isTextureLayoutCached(t3, e3 = false) {
            return !!this.getTextureData(t3.dataId, e3);
          }
          dispose() {
            this.session.textureManager.clearActiveTextures(), this.packedTextureDataCache.forEach((t3) => this.session.textureManager.releaseTexture(t3)), this.packedTextureDataCache = new Map(), this.unpackedTextureDataCache.forEach((t3) => this.session.textureManager.releaseTexture(t3)), this.unpackedTextureDataCache = new Map();
          }
          readTexture(t3) {
            return t3.isPacked ? this.readTexture(this.unpack(t3)) : this.session.backend.glContext.isFloat32DownloadSupported ? this.session.textureManager.readTexture(t3, t3.tensor.type, t3.channels) : this.session.textureManager.readUint8TextureAsFloat((0, u2.encodeAsUint8)(this, t3));
          }
          async readTextureAsync(t3) {
            return t3.isPacked ? this.readTextureAsync(this.unpack(t3)) : this.session.backend.glContext.isFloat32DownloadSupported ? this.session.textureManager.readTextureAsync(t3, t3.tensor.type, t3.channels) : this.session.textureManager.readUint8TextureAsFloat((0, u2.encodeAsUint8)(this, t3));
          }
          pack(t3) {
            return this.executeProgram((0, a2.createPackProgramInfoLoader)(this, t3.tensor), [t3.tensor]);
          }
          unpack(t3) {
            return this.executeProgram((0, c2.createUnpackProgramInfoLoader)(this, t3.tensor), [t3.tensor]);
          }
        };
      }, 1640: function(t2, e2, n2) {
        "use strict";
        var r2 = this && this.__createBinding || (Object.create ? function(t3, e3, n3, r3) {
          r3 === void 0 && (r3 = n3);
          var i3 = Object.getOwnPropertyDescriptor(e3, n3);
          i3 && !("get" in i3 ? !e3.__esModule : i3.writable || i3.configurable) || (i3 = {enumerable: true, get: function() {
            return e3[n3];
          }}), Object.defineProperty(t3, r3, i3);
        } : function(t3, e3, n3, r3) {
          r3 === void 0 && (r3 = n3), t3[r3] = e3[n3];
        }), i2 = this && this.__setModuleDefault || (Object.create ? function(t3, e3) {
          Object.defineProperty(t3, "default", {enumerable: true, value: e3});
        } : function(t3, e3) {
          t3.default = e3;
        }), o2 = this && this.__importStar || function(t3) {
          if (t3 && t3.__esModule)
            return t3;
          var e3 = {};
          if (t3 != null)
            for (var n3 in t3)
              n3 !== "default" && Object.prototype.hasOwnProperty.call(t3, n3) && r2(e3, t3, n3);
          return i2(e3, t3), e3;
        };
        Object.defineProperty(e2, "__esModule", {value: true}), e2.WEBGL_OP_RESOLVE_RULES = void 0;
        const a2 = n2(2898), s2 = o2(n2(7839)), u2 = n2(4196), c2 = n2(2069), l2 = n2(8138), p = n2(9663), f = n2(5193), d2 = n2(7992), h2 = n2(1253), g2 = n2(4776), b2 = n2(6572), m = n2(3346), y2 = n2(5623), _2 = n2(2870), v2 = n2(2143), w2 = n2(4939), x2 = n2(718), T2 = n2(2268), S2 = n2(8117), O = n2(2278), A2 = n2(5524), E2 = n2(5975), I2 = n2(3933), P2 = n2(6558), D2 = n2(5723), $2 = n2(3738), k2 = o2(n2(4909)), C = n2(8428), F2 = n2(9793);
        e2.WEBGL_OP_RESOLVE_RULES = [["Abs", "", "6+", k2.abs], ["Acos", "", "7+", k2.acos], ["Add", "", "7+", s2.add], ["And", "", "7+", s2.and], ["Asin", "", "7+", k2.asin], ["Atan", "", "7+", k2.atan], ["AveragePool", "", "7+", v2.averagePool, v2.parseAveragePoolAttributes], ["BatchNormalization", "", "7+", a2.batchNormalization, a2.parseBatchNormalizationAttributes], ["Cast", "", "6+", u2.cast, u2.parseCastAttributes], ["Ceil", "", "6+", k2.ceil], ["Clip", "", "6-10", k2.clip, k2.parseClipAttributes], ["Clip", "", "11+", k2.clipV11], ["Concat", "", "4+", c2.concat, c2.parseConcatAttributes], ["Conv", "", "1+", l2.conv, l2.parseConvAttributes], ["ConvTranspose", "", "1+", p.convTranspose, p.parseConvTransposeAttributes], ["Cos", "", "7+", k2.cos], ["Div", "", "7+", s2.div], ["Dropout", "", "7+", k2.identity], ["DepthToSpace", "", "1+", f.depthToSpace, f.parseDepthToSpaceAttributes], ["Equal", "", "7+", s2.equal], ["Elu", "", "6+", k2.elu, k2.parseEluAttributes], ["Exp", "", "6+", k2.exp], ["Flatten", "", "1+", d2.flatten, d2.parseFlattenAttributes], ["Floor", "", "6+", k2.floor], ["FusedConv", "com.microsoft", "1+", l2.conv, l2.parseConvAttributes], ["Gather", "", "1+", h2.gather, h2.parseGatherAttributes], ["Gemm", "", "7-10", g2.gemm, g2.parseGemmAttributesV7], ["Gemm", "", "11+", g2.gemm, g2.parseGemmAttributesV11], ["GlobalAveragePool", "", "1+", v2.globalAveragePool, v2.parseGlobalAveragePoolAttributes], ["GlobalMaxPool", "", "1+", v2.globalMaxPool], ["Greater", "", "7+", s2.greater], ["Identity", "", "1+", k2.identity], ["ImageScaler", "", "1+", b2.imageScaler, b2.parseImageScalerAttributes], ["InstanceNormalization", "", "6+", m.instanceNormalization, m.parseInstanceNormalizationAttributes], ["LeakyRelu", "", "6+", k2.leakyRelu, k2.parseLeakyReluAttributes], ["Less", "", "7+", s2.less], ["Log", "", "6+", k2.log], ["MatMul", "", "1+", y2.matMul, y2.parseMatMulAttributes], ["MaxPool", "", "1+", v2.maxPool, v2.parseMaxPoolAttributes], ["Mul", "", "7+", s2.mul], ["Neg", "", "6+", k2.neg], ["Not", "", "1+", k2.not], ["Or", "", "7+", s2.or], ["Pad", "", "2-10", _2.padV2, _2.parsePadAttributesV2], ["Pad", "", "11+", _2.padV11, _2.parsePadAttributesV11], ["Pow", "", "7+", s2.pow], ["PRelu", "", "7+", s2.pRelu], ["ReduceLogSum", "", "1+", w2.reduceLogSum, w2.parseReduceAttributes], ["ReduceMax", "", "1+", w2.reduceMax, w2.parseReduceAttributes], ["ReduceMean", "", "1+", w2.reduceMean, w2.parseReduceAttributes], ["ReduceMin", "", "1+", w2.reduceMin, w2.parseReduceAttributes], ["ReduceProd", "", "1+", w2.reduceProd, w2.parseReduceAttributes], ["ReduceSum", "", "1-12", w2.reduceSum, w2.parseReduceAttributes], ["ReduceSumSquare", "", "1+", w2.reduceLogSumSquare, w2.parseReduceAttributes], ["Relu", "", "6+", k2.relu], ["Reshape", "", "5+", x2.reshape], ["Resize", "", "10", T2.resize, T2.parseResizeAttributesV10], ["Resize", "", "11+", T2.resize, T2.parseResizeAttributesV11], ["Shape", "", "1+", S2.shape], ["Sigmoid", "", "6+", k2.sigmoid], ["Sin", "", "7+", k2.sin], ["Slice", "", "10+", O.sliceV10], ["Slice", "", "1-9", O.slice, O.parseSliceAttributes], ["Softmax", "", "1-12", A2.softmax, A2.parseSoftmaxAttributes], ["Softmax", "", "13+", A2.softmaxV13, A2.parseSoftmaxAttributesV13], ["Split", "", "2-12", E2.split, E2.parseSplitAttributes], ["Sqrt", "", "6+", k2.sqrt], ["Squeeze", "", "1-12", I2.squeeze, I2.parseSqueezeAttributes], ["Squeeze", "", "13+", I2.squeezeV13], ["Sub", "", "7+", s2.sub], ["Sum", "", "6+", P2.sum], ["Tan", "", "7+", k2.tan], ["Tanh", "", "6+", k2.tanh], ["Tile", "", "6+", D2.tile], ["Transpose", "", "1+", $2.transpose, $2.parseTransposeAttributes], ["Upsample", "", "7-8", F2.upsample, F2.parseUpsampleAttributesV7], ["Upsample", "", "9", F2.upsample, F2.parseUpsampleAttributesV9], ["Unsqueeze", "", "1-12", C.unsqueeze, C.parseUnsqueezeAttributes], ["Unsqueeze", "", "13+", C.unsqueezeV13], ["Xor", "", "7+", s2.xor]];
      }, 2898: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseBatchNormalizationAttributes = e2.batchNormalization = void 0;
        const r2 = n2(246), i2 = n2(5060), o2 = n2(2039), a2 = {name: "BatchNormalization", inputNames: ["A", "Scale", "B", "Mean", "Variance"], inputTypes: [o2.TextureType.unpacked, o2.TextureType.unpacked, o2.TextureType.unpacked, o2.TextureType.unpacked, o2.TextureType.unpacked]};
        e2.batchNormalization = (t3, e3, n3) => (u2(e3), [t3.run(Object.assign(Object.assign({}, a2), {cacheHint: n3.cacheKey, get: () => s2(t3, e3, n3)}), e3)]), e2.parseBatchNormalizationAttributes = (t3) => {
          const e3 = t3.attributes.getFloat("epsilon", 1e-5), n3 = t3.attributes.getFloat("momentum", 0.9), i3 = t3.attributes.getInt("spatial", 1);
          return (0, r2.createAttributeWithCacheKey)({epsilon: e3, momentum: n3, spatial: i3});
        };
        const s2 = (t3, e3, n3) => {
          const r3 = (0, i2.getGlsl)(t3.session.backend.glContext.version), s3 = e3[0].dims.length, [u3, c2] = t3.calculateTextureWidthAndHeight(e3[1].dims, o2.TextureType.unpacked), l2 = `
  float process(int[${s3}] indices) {
    vec2 position = offsetToCoords(indices[1], ${u3}, ${c2});
    float scale = getColorAsFloat(${r3.texture2D}(Scale, position));
    float mean = getColorAsFloat(${r3.texture2D}(Mean, position));
    float variance = getColorAsFloat(${r3.texture2D}(Variance, position));
    float b = getColorAsFloat(${r3.texture2D}(B, position));

    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${n3.epsilon})) ) + b;
  }`;
          return Object.assign(Object.assign({}, a2), {output: {dims: e3[0].dims, type: e3[0].type, textureType: o2.TextureType.unpacked}, shaderSource: l2});
        }, u2 = (t3) => {
          if (!t3 || t3.length !== 5)
            throw new Error("BatchNormalization requires 5 inputs.");
          const e3 = t3[0], n3 = t3[1], r3 = t3[2], i3 = t3[3], o3 = t3[4];
          if (e3.dims.length < 3 || n3.dims.length !== 1 || r3.dims.length !== 1 || i3.dims.length !== 1 || o3.dims.length !== 1)
            throw new Error("invalid input shape.");
          if (n3.dims[0] !== e3.dims[1] || r3.dims[0] !== e3.dims[1] || i3.dims[0] !== e3.dims[1] || o3.dims[0] !== e3.dims[1])
            throw new Error("invalid input shape.");
          if (e3.type !== "float32" && e3.type !== "float64" || n3.type !== "float32" && n3.type !== "float64" || r3.type !== "float32" && r3.type !== "float64" || i3.type !== "float32" && i3.type !== "float64" || o3.type !== "float32" && o3.type !== "float64")
            throw new Error("invalid input tensor types.");
        };
      }, 7839: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.xor = e2.sub = e2.pRelu = e2.pow = e2.or = e2.mul = e2.less = e2.greater = e2.equal = e2.div = e2.and = e2.add = e2.glslPRelu = e2.glslPow = e2.glslXor = e2.glslOr = e2.glslAnd = e2.glslLess = e2.glslGreater = e2.glslEqual = e2.glslSub = e2.glslMul = e2.glslDiv = e2.glslAdd = void 0;
        const r2 = n2(2517), i2 = n2(8520), o2 = n2(5060), a2 = n2(2039);
        function s2() {
          const t3 = "add_";
          return {body: `
  float ${t3}(float a, float b) {
    return a + b;
  }
  vec4 ${t3}(vec4 v1, vec4 v2) {
    return v1 + v2;
  }
  `, name: t3, type: i2.FunctionType.ValueBased};
        }
        function u2() {
          const t3 = "div_";
          return {body: `
  float ${t3}(float a, float b) {
    return a / b;
  }
  vec4 ${t3}(vec4 v1, vec4 v2) {
    return v1 / v2;
  }
  `, name: t3, type: i2.FunctionType.ValueBased};
        }
        function c2() {
          const t3 = "mul_";
          return {body: `
  float ${t3}(float a, float b) {
    return a * b;
  }
  vec4 ${t3}(vec4 v1, vec4 v2) {
    return v1 * v2;
  }
  `, name: t3, type: i2.FunctionType.ValueBased};
        }
        function l2() {
          const t3 = "sub_";
          return {body: `
  float ${t3}(float a, float b) {
    return a - b;
  }
  vec4 ${t3}(vec4 v1, vec4 v2) {
    return v1 - v2;
  }
  `, name: t3, type: i2.FunctionType.ValueBased};
        }
        function p() {
          const t3 = "equal_";
          return {body: `
  float ${t3}(float a, float b) {
    return float(a == b);
  }
  vec4 ${t3}(vec4 v1, vec4 v2) {
    return vec4(equal(v1, v2));
  }
  `, name: t3, type: i2.FunctionType.ValueBased};
        }
        function f() {
          const t3 = "greater_";
          return {body: `
  float ${t3}(float a, float b) {
    return float(a > b);
  }
  vec4 ${t3}(vec4 v1, vec4 v2) {
    return vec4( v1.r > v2.r ,
      v1.g > v2.g,
      v1.b > v2.b,
      v1.a > v2.a );
  }
  `, name: t3, type: i2.FunctionType.ValueBased};
        }
        function d2() {
          const t3 = "less_";
          return {body: `
  float ${t3}(float a, float b) {
    return float(a < b);
  }
  vec4 ${t3}(vec4 v1, vec4 v2) {
    return vec4( v1.r < v2.r ,
                v1.g < v2.g,
                v1.b < v2.b,
                v1.a < v2.a );
  }
  `, name: t3, type: i2.FunctionType.ValueBased};
        }
        function h2() {
          const t3 = "and_";
          return {body: `
  float ${t3}(float a, float b) {
    return float( bool(a) && bool(b) );
  }
  vec4 ${t3}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r && b2.r ,
                b1.g && b2.g,
                b1.b && b2.b,
                b1.a && b2.a );
  }
  `, name: t3, type: i2.FunctionType.ValueBased};
        }
        function g2() {
          const t3 = "or_";
          return {body: `
  float ${t3}(float a, float b) {
    return float( bool(a) || bool(b) );
  }
  vec4 ${t3}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r || b2.r ,
                b1.g || b2.g,
                b1.b || b2.b,
                b1.a || b2.a );
  }
  `, name: t3, type: i2.FunctionType.ValueBased};
        }
        function b2() {
          const t3 = "xor_";
          return {body: `
  float ${t3}(float a, float b) {
    return float( bool(a) ^^ bool(b) );
  }
  vec4 ${t3}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r ^^ b2.r ,
                b1.g ^^ b2.g,
                b1.b ^^ b2.b,
                b1.a ^^ b2.a );
  }
  `, name: t3, type: i2.FunctionType.ValueBased};
        }
        function m() {
          return function(t3) {
            const e3 = `${t3}_`;
            return {body: `
  float ${e3}(float a, float b) {
    return ${t3}(a, b);
  }
  vec4 ${e3}(vec4 v1, vec4 v2) {
    return ${t3}(v1, v2);
  }
  `, name: e3, type: i2.FunctionType.ValueBased};
          }("pow");
        }
        function y2() {
          const t3 = "prelu_";
          return {body: `
  float ${t3}(float a, float b) {
    return a < 0.0 ? a * b: a;
  }
  vec4 ${t3}(vec4 v1, vec4 v2) {
    return vec4(
      v1.r < 0.0 ? v1.r * v2.r: v1.r,
      v1.g < 0.0 ? v1.g * v2.g: v1.g,
      v1.b < 0.0 ? v1.b * v2.b: v1.b,
      v1.a < 0.0 ? v1.a * v2.a: v1.a
      );
  }
  `, name: t3, type: i2.FunctionType.ValueBased};
        }
        e2.glslAdd = s2, e2.glslDiv = u2, e2.glslMul = c2, e2.glslSub = l2, e2.glslEqual = p, e2.glslGreater = f, e2.glslLess = d2, e2.glslAnd = h2, e2.glslOr = g2, e2.glslXor = b2, e2.glslPow = m, e2.glslPRelu = y2;
        const _2 = (t3, e3, n3, r3 = e3[0].type, i3) => {
          const o3 = t3.session.pack ? a2.TextureType.packed : a2.TextureType.unpacked;
          return {name: n3.name, inputNames: ["A", "B"], inputTypes: [o3, o3], cacheHint: i3, get: () => v2(t3, e3, n3, r3)};
        }, v2 = (t3, e3, n3, i3 = e3[0].type) => {
          const s3 = t3.session.pack ? a2.TextureType.packed : a2.TextureType.unpacked, u3 = !r2.ShapeUtil.areEqual(e3[0].dims, e3[1].dims);
          let c3 = e3[0].dims;
          const l3 = t3.session.pack;
          if (u3) {
            const a3 = r2.BroadcastUtil.calcShape(e3[0].dims, e3[1].dims, false);
            if (!a3)
              throw new Error("Can't perform binary op on the given tensors");
            c3 = a3;
            const u4 = c3.length, p3 = e3[0].dims.length !== 0 ? e3[0].dims.length : 1, f3 = e3[1].dims.length !== 0 ? e3[1].dims.length : 1, d3 = e3[0].dims.length !== 0 ? "bcastIndices_A(indices, aindices);" : "aindices[0] = 0;", h3 = e3[1].dims.length !== 0 ? "bcastIndices_B(indices, bindices);" : "bindices[0] = 0;", g3 = (0, o2.getGlsl)(t3.session.backend.glContext.version), b3 = l3 ? `
      ${n3.body}
      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();
        vec4 result = ${n3.name}(a, b);
        ${g3.output} = result;
      }` : `
      ${n3.body}
      float process(int indices[${u4}]) {
        int aindices[${p3}];
        int bindices[${f3}];
        ${d3}
        ${h3}
        return ${n3.name}(_A(aindices), _B(bindices));
      }`;
            return {name: n3.name, inputNames: ["A", "B"], inputTypes: [s3, s3], output: {dims: c3, type: i3, textureType: s3}, shaderSource: b3, hasMain: l3};
          }
          const p2 = (0, o2.getGlsl)(t3.session.backend.glContext.version), f2 = `
    ${n3.body}
    void main() {
      vec4 v1 = ${p2.texture2D}(A, TexCoords);
      vec4 v2 = ${p2.texture2D}(B, TexCoords);
      vec4 result = ${n3.name}(v1, v2);
      ${p2.output} = result;
    }
    `;
          return {name: n3.name, inputNames: ["A", "B"], inputTypes: [s3, s3], output: {dims: e3[0].dims, type: i3, textureType: s3}, shaderSource: f2, hasMain: true};
        };
        e2.add = (t3, e3) => [t3.run(_2(t3, e3, s2()), e3)], e2.and = (t3, e3) => [t3.run(_2(t3, e3, h2(), "bool"), e3)], e2.div = (t3, e3) => [t3.run(_2(t3, e3, u2()), e3)], e2.equal = (t3, e3) => [t3.run(_2(t3, e3, p(), "bool"), e3)], e2.greater = (t3, e3) => [t3.run(_2(t3, e3, f(), "bool"), e3)], e2.less = (t3, e3) => [t3.run(_2(t3, e3, d2(), "bool"), e3)], e2.mul = (t3, e3) => [t3.run(_2(t3, e3, c2()), e3)], e2.or = (t3, e3) => [t3.run(_2(t3, e3, g2(), "bool"), e3)], e2.pow = (t3, e3) => [t3.run(_2(t3, e3, m()), e3)], e2.pRelu = (t3, e3) => [t3.run(_2(t3, e3, y2()), e3)], e2.sub = (t3, e3) => [t3.run(_2(t3, e3, l2()), e3)], e2.xor = (t3, e3) => [t3.run(_2(t3, e3, b2(), "bool"), e3)];
      }, 4196: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseCastAttributes = e2.cast = void 0;
        const r2 = n2(2517);
        e2.cast = (t3, e3, n3) => (i2(e3), [t3.cast(e3[0], n3)]), e2.parseCastAttributes = (t3) => r2.ProtoUtil.tensorDataTypeFromProto(t3.attributes.getInt("to"));
        const i2 = (t3) => {
          if (!t3 || t3.length !== 1)
            throw new Error("Cast requires 1 input.");
          if (t3[0].type === "string")
            throw new Error("Invalid input type.");
        };
      }, 1163: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.createPackedConcatProgramInfoLoader = void 0;
        const r2 = n2(5060), i2 = n2(2039), o2 = n2(9390), a2 = n2(2827);
        e2.createPackedConcatProgramInfoLoader = (t3, e3, n3) => {
          const u2 = (c2 = e3.length, l2 = n3.cacheKey, {name: "Concat (packed)", inputNames: Array.from({length: c2}, (t4, e4) => `X${e4}`), inputTypes: Array(c2).fill(i2.TextureType.packed), cacheHint: l2});
          var c2, l2;
          return Object.assign(Object.assign({}, u2), {get: () => ((t4, e4, n4, u3) => {
            const c3 = n4[0].dims.slice();
            if (u3 >= c3.length || u3 < -1 * c3.length)
              throw new Error("axis specified for concat doesn't match input dimensionality");
            u3 < 0 && (u3 = c3.length + u3);
            const l3 = c3.slice(0);
            for (let t5 = 1; t5 < n4.length; t5++) {
              const e5 = n4[t5].dims.slice();
              for (let t6 = 0; t6 < c3.length; t6++)
                if (t6 === u3)
                  l3[u3] += e5[t6];
                else if (c3[t6] !== e5[t6])
                  throw new Error("non concat dimensions must match");
            }
            const p = l3.length, f = (0, a2.getChannels)("coords", p), d2 = (0, o2.getCoordsDataType)(p), h2 = (0, a2.unpackFromChannel)(), g2 = n4.map((t5) => t5.dims), b2 = (0, o2.getGlChannels)(p), m = new Array(g2.length - 1);
            m[0] = g2[0][u3];
            for (let t5 = 1; t5 < m.length; t5++)
              m[t5] = m[t5 - 1] + g2[t5][u3];
            const y2 = b2[u3], _2 = b2.slice(-2), v2 = b2.join();
            let w2 = `if (${y2} < ${m[0]}) {
        return getChannel(
            getX0(${v2}), vec2(${_2.join()}));
        }`;
            for (let t5 = 1; t5 < m.length; t5++) {
              const e5 = m[t5 - 1];
              w2 += `
            if (${y2} < ${m[t5]}  && ${y2} >= ${m[t5 - 1]}) {
              return getChannel(
                getX${t5}(${s2(b2, y2, e5)}),
                vec2(${s2(_2, y2, e5)}));
            }`;
            }
            const x2 = m.length, T2 = m[m.length - 1];
            w2 += `
            return getChannel(
              getX${x2}(${s2(b2, y2, T2)}),
              vec2(${s2(_2, y2, T2)}));`;
            const S2 = (0, r2.getGlsl)(t4.session.backend.glContext.version), O = `
          ${h2}
          float getValue(${b2.map((t5) => "int " + t5)}) {
            ${w2}
          }

          void main() {
            ${d2} coords = getOutputCoords();
            int lastDim = coords.${b2[p - 1]};
            coords.${b2[p - 1]} = coords.${b2[p - 2]};
            coords.${b2[p - 2]} = lastDim;

            vec4 result = vec4(getValue(${f}), 0., 0., 0.);

            ${f[p - 1]} = ${f[p - 1]} + 1;
            if (${f[p - 1]} < ${l3[p - 1]}) {
              result.g = getValue(${f});
            }

            ${f[p - 2]} = ${f[p - 2]} + 1;
            if (${f[p - 2]} < ${l3[p - 2]}) {
              result.a = getValue(${f});
            }

            ${f[p - 1]} = ${f[p - 1]} - 1;
            if (${f[p - 2]} < ${l3[p - 2]} &&
                ${f[p - 1]} < ${l3[p - 1]}) {
              result.b = getValue(${f});
            }
            ${S2.output} = result;
          }
        `;
            return Object.assign(Object.assign({}, e4), {output: {dims: l3, type: n4[0].type, textureType: i2.TextureType.packed}, shaderSource: O, hasMain: true});
          })(t3, u2, e3, n3.axis)});
        };
        const s2 = (t3, e3, n3) => {
          const r3 = t3.indexOf(e3);
          return t3.map((t4, e4) => e4 === r3 ? `${t4} - ${n3}` : t4).join();
        };
      }, 2069: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseConcatAttributes = e2.concat = void 0;
        const r2 = n2(246), i2 = n2(2039), o2 = n2(1163);
        e2.concat = (t3, e3, n3) => (p(e3), t3.session.pack && e3[0].dims.length > 1 ? [t3.run((0, o2.createPackedConcatProgramInfoLoader)(t3, e3, n3), e3)] : [t3.run(a2(t3, e3, n3), e3)]);
        const a2 = (t3, e3, n3) => {
          const r3 = (o3 = e3.length, a3 = n3.cacheKey, {name: "Concat", inputNames: Array.from({length: o3}, (t4, e4) => `X${e4}`), inputTypes: Array(o3).fill(i2.TextureType.unpacked), cacheHint: a3});
          var o3, a3;
          return Object.assign(Object.assign({}, r3), {get: () => ((t4, e4, n4, r4) => {
            const o4 = n4[0].dims.slice();
            if (r4 >= o4.length || r4 < -1 * o4.length)
              throw new Error("axis specified for concat doesn't match input dimensionality");
            r4 < 0 && (r4 = o4.length + r4);
            const a4 = o4.slice(0);
            for (let t5 = 1; t5 < n4.length; t5++) {
              const e5 = n4[t5].dims.slice();
              for (let t6 = 0; t6 < o4.length; t6++)
                if (t6 === r4)
                  a4[r4] += e5[t6];
                else if (o4[t6] !== e5[t6])
                  throw new Error("non concat dimensions must match");
            }
            const p2 = a4.length, f = new Array(n4.length);
            let d2 = 0;
            for (let t5 = 0; t5 < f.length; ++t5)
              d2 += n4[t5].dims[r4], f[t5] = d2;
            let h2 = "";
            h2 = n4.length < 5 ? s2(f) : u2(f);
            const g2 = `
        ${c2(n4.length, p2)}
        ${l2(f)}
        ${h2}
        float process(int indices[${p2}]) {
          int textureIndex = getTextureWhereDataResides (indices[${r4}]);

          if(textureIndex != 0) {
            indices[${r4}] = indices[${r4}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));
          }

          return fetchDataFromCorrectTexture(textureIndex, indices);
        }`;
            return Object.assign(Object.assign({}, e4), {output: {dims: a4, type: n4[0].type, textureType: i2.TextureType.unpacked}, shaderSource: g2});
          })(0, r3, e3, n3.axis)});
        }, s2 = (t3) => `int getTextureWhereDataResides(int index) {
      ${t3.map((t4, e3) => `if(index<${t4}) {return ${e3};}
`).join("")}
    }`, u2 = (t3) => s2(t3), c2 = (t3, e3) => {
          const n3 = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${e3}]) {`];
          for (let e4 = 0; e4 < t3; ++e4)
            e4 === 0 ? n3.push(`	if (textureIndex == ${e4}) { return _X${e4}(indices); }`) : e4 === t3 - 1 ? n3.push(`	else { return _X${e4}(indices); }`) : n3.push(`	else if (textureIndex == ${e4}) { return _X${e4}(indices); }`);
          return n3.push("	}"), n3.join("\n");
        }, l2 = (t3) => {
          const e3 = ["int getSizeInConcatAxisValueFromIndex(int index) {"];
          for (let n3 = 0; n3 < t3.length; ++n3)
            n3 === 0 ? e3.push(`	if (index == ${n3}) { return ${t3[n3]}; }`) : n3 === t3.length - 1 ? e3.push(`	else { return ${t3[n3]}; }`) : e3.push(`	else if (index == ${n3}) { return ${t3[n3]}; }`);
          return e3.push("	}"), e3.join("\n");
        };
        e2.parseConcatAttributes = (t3) => (0, r2.createAttributeWithCacheKey)({axis: t3.attributes.getInt("axis")});
        const p = (t3) => {
          if (!t3 || t3.length < 1)
            throw new Error("too few inputs");
          const e3 = t3[0].type, n3 = t3[0].dims.length;
          if (e3 === "string")
            throw new Error("string tensor is not supported yet");
          for (const r3 of t3) {
            if (r3.type !== e3)
              throw new Error("input tensors should be one type");
            if (r3.dims.length !== n3)
              throw new Error("input tensors should have the same shape");
          }
        };
      }, 4770: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.createUnpackedGroupedConvProgramInfoLoader = void 0;
        const r2 = n2(6231), i2 = n2(5060), o2 = n2(2039), a2 = n2(8138), s2 = n2(2823);
        e2.createUnpackedGroupedConvProgramInfoLoader = (t3, e3, n3) => {
          const u2 = (c2 = e3.length > 2, l2 = n3.cacheKey, {name: "GroupedConv", inputNames: c2 ? ["X", "W", "Bias"] : ["X", "W"], inputTypes: c2 ? [o2.TextureType.unpacked, o2.TextureType.unpacked, o2.TextureType.unpacked] : [o2.TextureType.unpacked, o2.TextureType.unpacked], cacheHint: l2});
          var c2, l2;
          return Object.assign(Object.assign({}, u2), {get: () => ((t4, e4, n4, u3) => {
            const c3 = e4.length > 2 ? "value += getBias(output_channel);" : "", l3 = e4[0].dims.slice(), p = e4[1].dims.slice(), f = p[0] / u3.group;
            r2.Logger.verbose("GroupedConv", `autpPad:${u3.autoPad}, dilations:${u3.dilations}, group:${u3.group}, kernelShape:${u3.kernelShape}, pads:${u3.pads}, strides:${u3.strides}`);
            const d2 = (0, a2.calculateOutputShape)(l3, p, u3.dilations, u3.pads, u3.strides), h2 = (0, i2.getGlsl)(t4.session.backend.glContext.version), {activationFunction: g2, applyActivation: b2} = (0, s2.getActivationSnippet)(u3), m = `
  const ivec2 strides = ivec2(${u3.strides[0]}, ${u3.strides[1]});
  const ivec2 pads = ivec2(${u3.pads[0]}, ${u3.pads[1]});
  ${g2}
  void main() {
    ivec4 coords = getOutputCoords();
    int batch = coords.x;
    int output_channel = coords.y;
    ivec2 xRCCorner = coords.zw * strides - pads;
    int group_id = output_channel / ${f};

    float value = 0.0;
    for (int wInChannel = 0; wInChannel < ${p[1]}; wInChannel++) {
      int input_channel = group_id * ${p[1]} + wInChannel;
      for (int wHeight = 0; wHeight < ${p[2]}; wHeight++) {
        int xHeight = xRCCorner.x + wHeight * ${u3.dilations[0]};

        if (xHeight < 0 || xHeight >= ${l3[2]}) {
          continue;
        }

        for (int wWidth = 0; wWidth < ${p[3]}; wWidth++) {
          int xWidth = xRCCorner.y + wWidth * ${u3.dilations[1]};
          if (xWidth < 0 || xWidth >= ${l3[3]}) {
            continue;
          }

          float xVal = getX(batch, input_channel, xWidth, xHeight);
          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);
          value += xVal*wVal;
        }
      }
    }
    ${c3}
    ${b2}
    ${h2.output} = vec4(value, .0, .0, .0);
  }
`;
            return Object.assign(Object.assign({}, n4), {output: {dims: d2, type: e4[0].type, textureType: o2.TextureType.unpacked}, shaderSource: m, hasMain: true});
          })(t3, e3, u2, n3)});
        };
      }, 1386: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.conv2DPacked = e2.conv2DPackedPointwise = void 0;
        const r2 = n2(8138), i2 = n2(8555), o2 = n2(708);
        e2.conv2DPackedPointwise = (t3, e3, n3) => {
          const i3 = e3[0].dims, a2 = e3[1].dims, s2 = (0, r2.calculateOutputShape)(i3, a2, n3.dilations, n3.pads, n3.strides), u2 = t3.reshapePacked(e3[0], [i3[1], i3[2] * i3[3]]), c2 = t3.reshapePacked(e3[1], [a2[0], a2[1]]), l2 = e3.length > 2 ? [c2, u2, e3[2]] : [c2, u2], p = t3.run((0, o2.createPackedMatmulProgramInfoLoader)(t3, l2, n3), l2);
          return t3.reshapePacked(p, s2);
        }, e2.conv2DPacked = (t3, e3, n3) => {
          const a2 = e3[0].dims, s2 = e3[1].dims, u2 = (0, r2.calculateOutputShape)(a2, s2, n3.dilations, n3.pads, n3.strides), c2 = t3.run((0, i2.createPackedIm2ColProgramInfoLoader)(t3, e3[0], e3[1], u2, n3), [e3[0]]), l2 = t3.reshapePacked(e3[1], [s2[0], s2[1] * s2[2] * s2[3]]), p = e3.length === 3 ? [l2, c2, e3[2]] : [l2, c2], f = t3.run((0, o2.createPackedMatmulProgramInfoLoader)(t3, p, n3), p);
          return t3.reshapePacked(f, u2);
        };
      }, 9663: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseConvTransposeAttributes = e2.convTranspose = void 0;
        const r2 = n2(246), i2 = n2(5060), o2 = n2(2039), a2 = n2(2823), s2 = (t3, e3, n3, r3, i3, o3) => (t3 - 1) * e3 + n3 + (r3 - 1) * i3 + 1 - o3, u2 = (t3, e3, n3, r3, i3) => {
          const o3 = Math.floor(t3 / 2);
          e3 === "SAME_UPPER" ? (n3[r3] = o3, n3[i3] = t3 - o3) : e3 === "SAME_LOWER" && (n3[r3] = t3 - o3, n3[i3] = o3);
        };
        e2.convTranspose = (t3, e3, n3) => (f(e3, n3), c2(t3, e3, n3));
        const c2 = (t3, e3, n3) => {
          const r3 = p(n3, e3);
          return [l2(t3, e3, r3)];
        }, l2 = (t3, e3, n3) => t3.run(((t4, e4, n4) => {
          const r3 = (s3 = e4.length > 2, u3 = n4.cacheKey, {name: "ConvTranspose", inputNames: s3 ? ["X", "W", "B"] : ["X", "W"], inputTypes: s3 ? [o2.TextureType.unpacked, o2.TextureType.unpacked, o2.TextureType.unpacked] : [o2.TextureType.unpacked, o2.TextureType.unpacked], cacheHint: u3});
          var s3, u3;
          return Object.assign(Object.assign({}, r3), {get: () => ((t5, e5, n5, r4) => {
            const s4 = e5.length > 2 ? "getB(output_channel)" : "0.0", u4 = e5[0].dims, c3 = e5[1].dims, l3 = c3[1], p2 = c3[0] / r4.group, f2 = [e5[0].dims[0], e5[1].dims[1] * r4.group, ...r4.outputShape], d2 = (0, i2.getGlsl)(t5.session.backend.glContext.version), {activationFunction: h2, applyActivation: g2} = (0, a2.getActivationSnippet)(r4), b2 = `
  const ivec2 strides = ivec2(${r4.strides[0]}, ${r4.strides[1]});
  const ivec2 pads = ivec2(${r4.pads[0]}, ${r4.pads[1]});
  ${h2}
  void main() {
    ivec4 coords = getOutputCoords();
    int batch = coords.x;
    int output_channel = coords.y;

    ivec2 loc = coords.zw + pads;

    int group_id = output_channel / ${l3};
    int wOutChannel = output_channel - group_id * ${l3};

    float value = ${s4};
    for (int inChannelOffset = 0; inChannelOffset < ${p2}; inChannelOffset++) {
      int input_channel = group_id * ${p2} + inChannelOffset;
      for (int wWOff = 0; wWOff < ${c3[2]}; wWOff++) {
        for (int wHOff = 0; wHOff < ${c3[3]}; wHOff++) {
          ivec2 wOff = ivec2(wWOff * ${r4.dilations[0]}, wHOff * ${r4.dilations[1]});
          ivec2 wLoc = loc - wOff;
          ivec2 wLocIn = wLoc / strides;
          if (
            wLocIn * strides == wLoc &&
            wLocIn.x >= 0 && wLocIn.x < ${u4[2]} &&
            wLocIn.y >= 0 && wLocIn.y < ${u4[3]}
          ) {
            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);
            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);
            value += xVal * wVal;
          }
        }
      }
    }
    ${g2}
    ${d2.output} = vec4(value, .0, .0, .0);
  }
`;
            return Object.assign(Object.assign({}, n5), {output: {dims: f2, type: e5[0].type, textureType: o2.TextureType.unpacked}, shaderSource: b2, hasMain: true});
          })(t4, e4, r3, n4)});
        })(t3, e3, n3), e3), p = (t3, e3) => {
          const n3 = t3.kernelShape.slice();
          if (t3.kernelShape.length === 0)
            for (let t4 = 2; t4 < e3[1].dims.length; ++t4)
              n3.push(e3[1].dims[t4]);
          const r3 = t3.pads.slice(), i3 = t3.outputShape.slice();
          ((t4, e4, n4, r4, i4, o4, a3, c3) => {
            const l3 = t4.length - 2, p2 = c3.length === 0;
            for (let f2 = 0; f2 < l3; ++f2) {
              const d2 = p2 ? t4[f2 + 2] * o4[f2] : c3[f2], h2 = s2(t4[f2 + 2], o4[f2], i4[f2], e4[f2], n4[f2], d2);
              u2(h2, r4, i4, f2, f2 + l3), p2 && c3.push(o4[f2] * (t4[f2 + 2] - 1) + a3[f2] + (e4[f2] - 1) * n4[f2] + 1 - i4[f2] - i4[f2 + l3]);
            }
          })(e3[0].dims, n3, t3.dilations, t3.autoPad, r3, t3.strides, t3.outputPadding, i3);
          const o3 = Object.assign({}, t3);
          return Object.assign(o3, {kernelShape: n3, pads: r3, outputShape: i3, cacheKey: t3.cacheKey}), o3;
        };
        e2.parseConvTransposeAttributes = (t3) => {
          const e3 = t3.attributes, n3 = (0, a2.parseInternalActivationAttributes)(e3), i3 = e3.getString("auto_pad", "NOTSET"), o3 = e3.getInts("dilations", [1, 1]), s3 = e3.getInt("group", 1), u3 = e3.getInts("kernel_shape", []), c3 = e3.getInts("output_padding", [0, 0]), l3 = e3.getInts("output_shape", []), p2 = e3.getInts("pads", [0, 0, 0, 0]), f2 = e3.getInts("strides", [1, 1]);
          return (0, r2.createAttributeWithCacheKey)(Object.assign({autoPad: i3, dilations: o3, group: s3, kernelShape: u3, outputPadding: c3, outputShape: l3, pads: p2, strides: f2}, n3));
        };
        const f = (t3, e3) => {
          if (!t3 || t3.length !== 2 && t3.length !== 3)
            throw new Error("Conv requires 2 or 3 inputs");
          if (t3[0].dims.length !== 4 || t3[1].dims.length !== 4)
            throw new Error("currently only support 2-dimensional conv");
          if (t3[0].dims[1] !== t3[1].dims[0])
            throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");
          const n3 = t3[1].dims[1] * e3.group;
          if (t3.length === 3 && (t3[2].dims.length !== 1 || t3[2].dims[0] !== n3))
            throw new Error("invalid bias");
          const r3 = t3[0].dims.length - 2;
          if (e3.dilations.length !== r3)
            throw new Error(`dilations should be ${r3}D`);
          if (e3.strides.length !== r3)
            throw new Error(`strides should be ${r3}D`);
          if (e3.pads.length !== 2 * r3)
            throw new Error(`pads should be ${2 * r3}D`);
          if (e3.outputPadding.length !== r3)
            throw new Error(`output_padding should be ${r3}D`);
          if (e3.kernelShape.length !== 0 && e3.kernelShape.length !== t3[1].dims.length - 2)
            throw new Error("invalid kernel shape");
          if (e3.outputShape.length !== 0 && e3.outputShape.length !== t3[0].dims.length - 2)
            throw new Error("invalid output shape");
          if (t3[0].type !== "float32" || t3[1].type !== "float32")
            throw new Error("ConvTranspose input(X,W) should be float tensor");
          if (t3.length === 3 && t3[2].type !== "float32")
            throw new Error("ConvTranspose input(bias) should be float tensor");
        };
      }, 8138: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseConvAttributes = e2.conv = e2.calculateOutputShape = void 0;
        const r2 = n2(246), i2 = n2(2517), o2 = n2(4770), a2 = n2(1386), s2 = n2(9828), u2 = n2(2823), c2 = n2(3248), l2 = n2(5623);
        e2.calculateOutputShape = (t3, e3, n3, r3, i3) => {
          const o3 = t3[0], a3 = t3.slice(2), s3 = a3.length, u3 = e3[0], c3 = e3.slice(2).map((t4, e4) => t4 + (t4 - 1) * (n3[e4] - 1)), l3 = a3.map((t4, e4) => t4 + r3[e4] + r3[e4 + s3]).map((t4, e4) => Math.floor((t4 - c3[e4] + i3[e4]) / i3[e4]));
          return [o3, u3].concat(...l3);
        }, e2.conv = (t3, e3, n3) => (g2(e3, n3), p(t3, e3, n3));
        const p = (t3, e3, n3) => {
          const r3 = h2(n3, e3), i3 = t3.session.pack, s3 = r3.kernelShape[0] === 1 && r3.kernelShape[1] === 1;
          return r3.group > 1 ? [t3.run((0, o2.createUnpackedGroupedConvProgramInfoLoader)(t3, e3, r3), e3)] : s3 && i3 ? [f(t3, e3, r3)] : i3 && e3[0].dims.length === 4 && e3[0].dims[0] === 1 && !s3 ? [(0, a2.conv2DPacked)(t3, e3, r3)] : [d2(t3, e3, r3)];
        }, f = (t3, n3, r3) => {
          const i3 = n3[0].dims, o3 = n3[1].dims, a3 = (0, e2.calculateOutputShape)(i3, o3, r3.dilations, r3.pads, r3.strides), s3 = t3.reshapeUnpacked(n3[0], [i3[1], i3[2] * i3[3]]), u3 = t3.reshapeUnpacked(n3[1], [o3[0], o3[1]]), c3 = n3.length > 2 ? [u3, s3, n3[2]] : [u3, s3], p2 = t3.run((0, l2.createMatmulProgramInfoLoader)(c3, r3), c3);
          return t3.reshapeUnpacked(p2, a3);
        }, d2 = (t3, n3, r3) => {
          const i3 = n3[0].dims, o3 = n3[1].dims, a3 = (0, e2.calculateOutputShape)(i3, o3, r3.dilations, r3.pads, r3.strides), u3 = t3.run((0, c2.createIm2ColProgramInfoLoader)(t3, n3[0], n3[1], a3, r3), [n3[0]]), l3 = n3.length === 3 ? [u3, n3[1], n3[2]] : [u3, n3[1]];
          return t3.run((0, s2.createDotProductProgramInfoLoader)(t3, n3, a3, r3), l3);
        }, h2 = (t3, e3) => {
          const n3 = t3.kernelShape.slice();
          if (t3.kernelShape.length === 0)
            for (let t4 = 2; t4 < e3[1].dims.length; ++t4)
              n3.push(e3[1].dims[t4]);
          const r3 = t3.pads.slice();
          i2.PoolConvUtil.adjustPadsBasedOnAutoPad(e3[0].dims, t3.strides, t3.dilations, n3, r3, t3.autoPad);
          const o3 = Object.assign({}, t3);
          return Object.assign(o3, {kernelShape: n3, pads: r3, cacheKey: t3.cacheKey}), o3;
        };
        e2.parseConvAttributes = (t3) => {
          const e3 = t3.attributes, n3 = (0, u2.parseInternalActivationAttributes)(e3), i3 = e3.getString("auto_pad", "NOTSET"), o3 = e3.getInts("dilations", [1, 1]), a3 = e3.getInt("group", 1), s3 = e3.getInts("kernel_shape", []), c3 = e3.getInts("pads", [0, 0, 0, 0]), l3 = e3.getInts("strides", [1, 1]);
          return (0, r2.createAttributeWithCacheKey)(Object.assign({autoPad: i3, dilations: o3, group: a3, kernelShape: s3, pads: c3, strides: l3}, n3));
        };
        const g2 = (t3, e3) => {
          if (!t3 || t3.length !== 2 && t3.length !== 3)
            throw new Error("Conv requires 2 or 3 inputs");
          if (t3[0].dims.length !== 4 || t3[1].dims.length !== 4)
            throw new Error("currently only support 2-dimensional conv");
          if (t3[0].dims[1] !== t3[1].dims[1] * e3.group)
            throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");
          if (t3.length === 3 && (t3[2].dims.length !== 1 || t3[1].dims[0] !== t3[2].dims[0]))
            throw new Error("invalid bias");
          const n3 = t3[0].dims.length - 2;
          if (e3.dilations.length !== n3)
            throw new Error(`dilations should be ${n3}D`);
          if (e3.strides.length !== n3)
            throw new Error(`strides should be ${n3}D`);
          if (e3.pads.length !== 2 * n3)
            throw new Error(`pads should be ${2 * n3}D`);
          if (e3.kernelShape.length !== 0 && e3.kernelShape.length !== t3[1].dims.length - 2)
            throw new Error("invalid kernel shape");
          if (t3[0].type !== "float32" || t3[1].type !== "float32")
            throw new Error("Conv input(X,W) should be float tensor");
          if (t3.length === 3 && t3[2].type !== "float32")
            throw new Error("Conv input(bias) should be float tensor");
        };
      }, 5193: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseDepthToSpaceAttributes = e2.depthToSpace = void 0;
        const r2 = n2(3738);
        e2.depthToSpace = (t3, e3, n3) => {
          i2(e3);
          const o2 = n3.blocksize, a2 = o2 * o2, s2 = n3.mode === "DCR" ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3], u2 = n3.mode === "DCR" ? [e3[0].dims[0], o2, o2, e3[0].dims[1] / a2, e3[0].dims[2], e3[0].dims[3]] : [e3[0].dims[0], e3[0].dims[1] / a2, o2, o2, e3[0].dims[2], e3[0].dims[3]], c2 = t3.reshapeUnpacked(e3[0], u2), l2 = {perm: s2, cacheKey: `${s2}`}, [p] = (0, r2.transpose)(t3, [c2], l2), f = [e3[0].dims[0], e3[0].dims[1] / a2, e3[0].dims[2] * o2, e3[0].dims[3] * o2];
          return [t3.reshapeUnpacked(p, f)];
        }, e2.parseDepthToSpaceAttributes = (t3) => {
          const e3 = t3.attributes.getInt("blocksize");
          if (e3 < 1)
            throw new Error(`blocksize must be >= 1, but got : ${e3} for DepthToSpace`);
          const n3 = t3.attributes.getString("mode", "DCR");
          if (n3 !== "DCR" && n3 !== "CRD")
            throw new Error(`unrecognized mode: ${n3} for DepthToSpace`);
          return {mode: n3, blocksize: e3};
        };
        const i2 = (t3) => {
          if (t3.length !== 1)
            throw new Error(`DepthToSpace expect 1 inputs, but got ${t3.length}`);
          if (t3[0].type === "string" || t3[0].dims.length !== 4)
            throw new TypeError("DepthToSpace input should be a 4-D numeric tensor");
        };
      }, 9828: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.createDotProductProgramInfoLoader = void 0;
        const r2 = n2(2517), i2 = n2(5060), o2 = n2(2039), a2 = n2(2823), s2 = n2(3248);
        e2.createDotProductProgramInfoLoader = (t3, e3, n3, u2) => {
          const c2 = ((t4, e4) => ({name: "ConvDotProduct", inputNames: t4 ? ["Im2Col", "K", "B"] : ["Im2Col", "K"], inputTypes: t4 ? [o2.TextureType.unpacked, o2.TextureType.packedLastDimension, o2.TextureType.unpacked] : [o2.TextureType.unpacked, o2.TextureType.packedLastDimension], cacheKey: e4.activationCacheKey}))(e3.length > 2, u2);
          return Object.assign(Object.assign({}, c2), {get: () => ((t4, e4, n4, u3, c3) => {
            const l2 = n4[0].dims, p = n4[1].dims, f = [p[0], Math.ceil(l2[1] * p[2] * p[3] / 4)], d2 = (0, s2.calculateIm2ColDims)(l2, p, u3), [h2, g2] = t4.calculateTextureWidthAndHeight(f, o2.TextureType.packedLastDimension), b2 = r2.ShapeUtil.computeStrides(d2), [m, y2] = t4.calculateTextureWidthAndHeight(d2, o2.TextureType.packedLastDimension), _2 = u3.length, v2 = n4.length < 3 ? "0.0" : "_B(b)", w2 = Math.ceil(l2[1] * p[2] * p[3] / 4), {activationFunction: x2, applyActivation: T2} = (0, a2.getActivationSnippet)(c3), S2 = (0, i2.getGlsl)(t4.session.backend.glContext.version), O = `
${x2}
float process(int indices[${_2}]) {
  int b[1];
  b[0] = indices[1];
  int im2col[4];
  im2col[0] = indices[0];
  im2col[1] = indices[2];
  im2col[2] = indices[3];
  int im2colOffset = im2col[0] * ${b2[0]} + im2col[1] * ${b2[1]} + im2col[2] * ${b2[2]};
  int kernelOffset = indices[1] * ${f[1]};
  float value = ${v2};
  for (int i = 0; i < ${w2}; ++i) {
    vec2 im2colCoords = offsetToCoords(im2colOffset, ${m}, ${y2});
    vec2 kernelCoords = offsetToCoords(kernelOffset, ${h2}, ${g2});
    value += dot(${S2.texture2D}(Im2Col, im2colCoords), ${S2.texture2D}(K, kernelCoords));
    ++im2colOffset;
    ++kernelOffset;
  }
  ${T2}
  return value;
}`;
            return Object.assign(Object.assign({}, e4), {output: {dims: u3, type: n4[0].type, textureType: o2.TextureType.unpacked}, shaderSource: O});
          })(t3, c2, e3, n3, u2)});
        };
      }, 7992: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseFlattenAttributes = e2.flatten = void 0;
        const r2 = n2(2517);
        e2.flatten = (t3, e3, n3) => {
          i2(e3, n3);
          const o2 = r2.ShapeUtil.flattenShape(e3[0].dims, n3);
          return [t3.reshapeUnpacked(e3[0], o2)];
        }, e2.parseFlattenAttributes = (t3) => t3.attributes.getInt("axis", 1);
        const i2 = (t3, e3) => {
          if (!t3 || t3.length !== 1)
            throw new Error("Flatten requires 1 input.");
          const n3 = t3[0].dims.length;
          if (n3 === 0)
            throw new Error("scalar tensor is not supported.");
          if (e3 < -n3 || e3 > n3)
            throw new Error("Invalid axis");
          if (t3[0].type === "string")
            throw new Error("string tensor is not supported.");
        };
      }, 2823: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseInternalActivationAttributes = e2.getActivationSnippet = void 0;
        const r2 = n2(2517), i2 = n2(4909);
        e2.getActivationSnippet = function(t3) {
          let e3;
          switch (t3.activation) {
            case "Relu":
              e3 = (0, i2.glslRelu)();
              break;
            case "Sigmoid":
              e3 = (0, i2.glslSigmoid)();
              break;
            case "Clip":
              e3 = (0, i2.glslClip)(t3.clipMin, t3.clipMax);
              break;
            default:
              return {activationFunction: "", applyActivation: ""};
          }
          const n3 = e3.name;
          return {activationFunction: e3.body, applyActivation: `value = ${n3}_(value);`};
        }, e2.parseInternalActivationAttributes = (t3) => {
          const e3 = t3.getString("activation", "");
          if (e3 === "Clip") {
            const [n3, i3] = t3.getFloats("activation_params", [r2.MIN_CLIP, r2.MAX_CLIP]);
            return {activation: e3, clipMax: i3, clipMin: n3, activationCacheKey: `${e3}:${n3},${i3}`};
          }
          return {activation: e3, activationCacheKey: e3};
        };
      }, 1253: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseGatherAttributes = e2.gather = void 0;
        const r2 = n2(246), i2 = n2(782), o2 = n2(2517), a2 = n2(2039);
        e2.gather = (t3, e3, n3) => (c2(e3, n3.axis), [t3.run(u2(t3, e3, n3), e3)]), e2.parseGatherAttributes = (t3) => (0, r2.createAttributeWithCacheKey)({axis: t3.attributes.getInt("axis", 0)});
        const s2 = {name: "Gather", inputNames: ["A", "B"], inputTypes: [a2.TextureType.unpacked, a2.TextureType.unpacked]}, u2 = (t3, e3, n3) => {
          const r3 = Object.assign(Object.assign({}, s2), {cacheHint: n3.cacheKey});
          return Object.assign(Object.assign({}, r3), {get: () => ((t4, e4, n4, r4) => {
            const i3 = n4[0].dims.slice(), s3 = n4[1].dims.slice(), u3 = new Array(i3.length + s3.length - 1);
            r4 = o2.ShapeUtil.normalizeAxis(r4, i3.length);
            const c3 = [];
            for (let t5 = 0; t5 < u3.length; t5++)
              t5 < r4 ? (u3[t5] = i3[t5], c3.push(`inputIdx[${t5}] = outputIdx[${t5}];`)) : t5 < r4 + s3.length ? (u3[t5] = s3[t5 - r4], c3.push(`indexDataIdx[${t5 - r4}] = outputIdx[${t5}];`)) : (u3[t5] = i3[t5 - s3.length + 1], c3.push(`inputIdx[${t5 - s3.length + 1}] = outputIdx[${t5}];`));
            const l2 = `
      float process(int outputIdx[${u3.length || 1}]) {
        int inputIdx[${i3.length}];
        int indexDataIdx[${s3.length || 1}];
        indexDataIdx[0] = 0;
        ${c3.join("\n        ")}
        int idx = int(_B(indexDataIdx));
        inputIdx[${r4}] = idx < 0 ? idx + ${i3[r4]} : idx;
        return _A(inputIdx);
      }`;
            return Object.assign(Object.assign({}, e4), {output: {dims: u3, type: n4[0].type, textureType: a2.TextureType.unpacked}, shaderSource: l2});
          })(0, r3, e3, n3.axis)});
        }, c2 = (t3, e3) => {
          if (!t3 || t3.length !== 2)
            throw new Error("Gather requires 2 inputs.");
          const n3 = t3[0].dims.length;
          if (n3 < 1)
            throw new Error("Invalid input shape.");
          if (e3 < -n3 || e3 > n3 - 1)
            throw new Error("Invalid axis.");
          if (i2.NUMBER_TYPES.indexOf(t3[0].type) === -1)
            throw new Error("Invaid input type.");
          if (t3[1].type !== "int32" && t3[1].type !== "int16")
            throw new Error("Invaid input type.");
        };
      }, 4776: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseGemmAttributesV11 = e2.parseGemmAttributesV7 = e2.gemm = void 0;
        const r2 = n2(246), i2 = n2(2517), o2 = n2(2039);
        e2.gemm = (t3, e3, n3) => (c2(e3, n3), [t3.run(s2(e3, n3), e3)]);
        const a2 = (t3, e3) => {
          const n3 = t3.attributes.getInt("transA", 0) !== 0, i3 = t3.attributes.getInt("transB", 0) !== 0, o3 = t3.attributes.getFloat("alpha", 1), a3 = t3.attributes.getFloat("beta", 1);
          return (0, r2.createAttributeWithCacheKey)({transA: n3, transB: i3, alpha: o3, beta: a3, isOptionalC: e3});
        };
        e2.parseGemmAttributesV7 = (t3) => a2(t3, false), e2.parseGemmAttributesV11 = (t3) => a2(t3, true);
        const s2 = (t3, e3) => {
          const n3 = {name: "Gemm", inputNames: t3.length === 3 ? ["A", "B", "C"] : ["A", "B"], inputTypes: t3.length === 3 ? [o2.TextureType.unpacked, o2.TextureType.unpacked, o2.TextureType.unpacked] : [o2.TextureType.unpacked, o2.TextureType.unpacked], key: e3.cacheKey};
          return Object.assign(Object.assign({}, n3), {get: () => u2(n3, t3, e3)});
        }, u2 = (t3, e3, n3) => {
          const r3 = e3[0].dims.slice(), a3 = e3[1].dims.slice(), [s3, u3] = i2.GemmUtil.getShapeOfGemmResult(r3, n3.transA, a3, n3.transB, e3.length === 3 ? e3[2].dims : void 0), c3 = [s3, u3];
          if (!c3)
            throw new Error("Can't use gemm on the given tensors");
          let l2 = r3[r3.length - 1], p = "";
          n3.transA && (l2 = r3[0]), n3.transA && n3.transB ? p = "value += _A_T(a) * _B_T(b);" : n3.transA && !n3.transB ? p = "value += _A_T(a) * _B(b);" : !n3.transA && n3.transB ? p = "value += _A(a) * _B_T(b);" : n3.transA || n3.transB || (p = "value += _A(a) * _B(b);");
          const f = c3.length, d2 = `
      float process(int indices[${f}]) {
          int a[${f}];
          int b[${f}];
          ${e3.length === 3 ? `int c[${e3[2].dims.length}];` : ""}

          copyVec(indices, a);
          copyVec(indices, b);
          ${e3.length === 3 ? "bcastIndices_C(indices, c);" : ""}

          float value = 0.0;
          for (int k=0; k<${l2}; ++k) {
              a[${f - 1}] = k;
              b[${f - 2}] = k;
              ${p}
          }

          value = value * alpha;
          ${e3.length === 3 ? "value += beta * _C(c);" : ""}
          return value;
      }`;
          return Object.assign(Object.assign({}, t3), {output: {dims: c3, type: e3[0].type, textureType: o2.TextureType.unpacked}, variables: [{name: "alpha", type: "float", data: n3.alpha}, {name: "beta", type: "float", data: n3.beta}], shaderSource: d2});
        }, c2 = (t3, e3) => {
          if (!t3)
            throw new Error("Input is missing");
          if (e3.isOptionalC && (t3.length < 2 || t3.length > 3))
            throw new Error("Invaid input shape.");
          if (!e3.isOptionalC && t3.length !== 3)
            throw new Error("Gemm requires 3 inputs");
          if (t3.length === 3 && t3[2].dims.length !== 1 && t3[2].dims.length !== 2)
            throw new Error("Invalid input shape of C");
          if (t3[0].type !== "float32" && t3[0].type !== "float64" || t3[1].type !== "float32" && t3[1].type !== "float64" || t3.length === 3 && t3[2].type !== "float32" && t3[2].type !== "float64")
            throw new Error("Invalid input type.");
          if (t3[0].type !== t3[1].type || t3.length === 3 && t3[0].type !== t3[2].type)
            throw new Error("Input types are mismatched");
        };
      }, 8555: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.createPackedIm2ColProgramInfoLoader = void 0;
        const r2 = n2(5060), i2 = n2(2039), o2 = n2(2827);
        e2.createPackedIm2ColProgramInfoLoader = (t3, e3, n3, a2, s2) => {
          const u2 = (c2 = s2.cacheKey, {name: "Im2Col (packed)", inputNames: ["A"], inputTypes: [i2.TextureType.packed], cacheHint: c2});
          var c2;
          return Object.assign(Object.assign({}, u2), {get: () => ((t4, e4, n4, a3, s3, u3) => {
            const c3 = n4.dims, l2 = a3.dims, p = s3.length, f = [l2[1] * l2[2] * l2[3], s3[2] * s3[3]], d2 = l2[2] * l2[3], h2 = (0, o2.unpackFromChannel)(), g2 = (0, r2.getGlsl)(t4.session.backend.glContext.version);
            let b2 = "";
            for (let t5 = 0; t5 <= 1; t5++)
              for (let e5 = 0; e5 <= 1; e5++)
                b2 += `
            blockIndex = rc.x + ${e5};
            pos = rc.y + ${t5};

            if(blockIndex < ${f[1]} && pos < ${f[0]}) {
              offsetY = int(blockIndex / (${s3[p - 1]})) * ${u3.strides[0]} -
                ${u3.pads[0]};
              d0 = offsetY + ${u3.dilations[0]} * (imod(pos, ${d2}) / ${l2[2]});

              if(d0 < ${c3[2]} && d0 >= 0) {
                offsetX = imod(blockIndex, ${s3[p - 1]}) * ${u3.strides[1]} -
                  ${u3.pads[1]};
                d1 = offsetX + ${u3.dilations[1]} * imod(imod(pos, ${d2}), ${l2[2]});

                if(d1 < ${c3[3]} && d1 >= 0) {

                  ch = int(float(pos)/ ${d2}.);
                    innerDims = vec2(d0, d1);
                    result[${2 * t5 + e5}] = getChannel(
                      getA(0, ch, int(innerDims.x),
                      int(innerDims.y)), innerDims);
                }
              }
            }

          `;
            const m = `
      ${h2}

      void main() {
        ivec2 rc = getOutputCoords();
          vec4 result = vec4(0.0);
          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
          vec2 innerDims;
          ${b2}
          ${g2.output} = result;
      }
            `;
            return Object.assign(Object.assign({}, e4), {output: {dims: f, type: n4.type, textureType: i2.TextureType.packed}, shaderSource: m, hasMain: true});
          })(t3, u2, e3, n3, a2, s2)});
        };
      }, 3248: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.calculateIm2ColDims = e2.createIm2ColProgramInfoLoader = void 0;
        const r2 = n2(2039);
        e2.createIm2ColProgramInfoLoader = (t3, n3, i2, o2, a2) => {
          const s2 = (u2 = a2.cacheKey, {name: "Im2Col", inputNames: ["X"], inputTypes: [r2.TextureType.unpacked], cacheHint: u2});
          var u2;
          return Object.assign(Object.assign({}, s2), {get: () => ((t4, n4, i3, o3, a3, s3) => {
            const u3 = i3.dims, c2 = o3.dims, l2 = a3.length, p = (0, e2.calculateIm2ColDims)(u3, c2, a3, 4), f = `
        const int XC = ${u3[1]};
        const int XH = ${u3[2]};
        const int XW = ${u3[3]};
        const int KH = ${s3.kernelShape[0]};
        const int KW = ${s3.kernelShape[1]};
        const int dilationH = ${s3.dilations[0]};
        const int dilationW = ${s3.dilations[1]};
        const int strideH = ${s3.strides[0]};
        const int strideW = ${s3.strides[1]};
        const int padH = ${s3.pads[0]};
        const int padW = ${s3.pads[1]};
        const int KHKW = KH*KW;
        const int XCKHKW = XC * KHKW;
        const int outputChannels = 4;
        vec4 process(int indices[${l2}]) {
          int b  = indices[0]; // batch size
          int oh = indices[1] * strideH - padH; //output height
          int ow = indices[2] * strideW - padW; //output width
          int p = indices[3] * outputChannels; //patch
          vec4 value = vec4(0.0);
          for(int i=0; i < outputChannels; ++i) {
            if(p < XCKHKW) {
              int patchC = p / KHKW;
              int patchH = (p - patchC*KHKW) / KW;
              int patchW = (p - patchC*KHKW) - patchH * KW;
              int xh2 = oh + patchH * dilationH;
              int xw2 = ow + patchW * dilationW;
              int x[${u3.length}];
              x[0] = b;
              x[1] = patchC;
              x[2] = xh2;
              x[3] = xw2;
              if(xh2 >= 0 &&
                  xh2 < XH &&
                  xw2 >= 0 &&
                  xw2 < XW) {
                value[i] = _X(x);
              }
            }
            ++p;
          }
          return value;
        }
        `;
            return Object.assign(Object.assign({}, n4), {output: {dims: p, type: i3.type, textureType: r2.TextureType.packedLastDimension}, shaderSource: f});
          })(0, s2, n3, i2, o2, a2)});
        }, e2.calculateIm2ColDims = (t3, e3, n3, r3 = 4) => [n3[0], n3[2], n3[3], Math.ceil(t3[1] * e3[2] * e3[3] / r3)];
      }, 6572: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseImageScalerAttributes = e2.imageScaler = void 0;
        const r2 = n2(246), i2 = n2(2039);
        e2.imageScaler = (t3, e3, n3) => (u2(e3), [t3.run(a2(t3, e3, n3), e3)]), e2.parseImageScalerAttributes = (t3) => {
          const e3 = t3.attributes.getFloat("scale"), n3 = t3.attributes.getFloats("bias");
          return (0, r2.createAttributeWithCacheKey)({scale: e3, bias: n3});
        };
        const o2 = {name: "ImageScaler", inputNames: ["X"], inputTypes: [i2.TextureType.unpacked]}, a2 = (t3, e3, n3) => {
          const r3 = Object.assign(Object.assign({}, o2), {cacheHint: n3.cacheKey});
          return Object.assign(Object.assign({}, r3), {get: () => ((t4, e4, n4, r4) => {
            const o3 = n4[0].dims.slice(), a3 = o3.length, u3 = `
      ${s2(r4.bias.length)}
      float process(int indices[${a3}]) {
        return _X(indices) * scale + getBias(bias, indices[1]);
      }`;
            return Object.assign(Object.assign({}, e4), {output: {dims: o3, type: n4[0].type, textureType: i2.TextureType.unpacked}, variables: [{name: "bias", type: "float", arrayLength: r4.bias.length, data: r4.bias}, {name: "scale", type: "float", data: r4.scale}], shaderSource: u3});
          })(0, r3, e3, n3)});
        }, s2 = (t3) => {
          const e3 = [`float getBias(float bias[${t3}], int channel) {`];
          for (let n3 = 0; n3 < t3; ++n3)
            n3 === 0 ? e3.push(`	if (channel == ${n3}) { return bias[${n3}]; }`) : n3 === t3 - 1 ? e3.push(`	else { return bias[${n3}]; }`) : e3.push(`	else if (channel == ${n3}) { return bias[${n3}]; }`);
          return e3.push("	}"), e3.join("\n");
        }, u2 = (t3) => {
          if (!t3 || t3.length !== 1)
            throw new Error("ImageScaler requires 1 input.");
          if (t3[0].dims.length !== 4)
            throw new Error("Invalid input shape.");
          if (t3[0].type !== "float32" && t3[0].type !== "float64")
            throw new Error("Invalid input type.");
        };
      }, 3346: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseInstanceNormalizationAttributes = e2.instanceNormalization = void 0;
        const r2 = n2(5060), i2 = n2(2039);
        e2.instanceNormalization = (t3, e3, n3) => {
          c2(e3);
          const r3 = t3.run(a2(e3[0]), e3);
          return [t3.run(u2(t3, e3[0], n3, r3.dims), [e3[0], r3, e3[1], e3[2]])];
        }, e2.parseInstanceNormalizationAttributes = (t3) => t3.attributes.getFloat("epsilon", 1e-5);
        const o2 = {name: "InstanceNormalization_MeanAndVariance", inputNames: ["X"], inputTypes: [i2.TextureType.unpacked]}, a2 = (t3) => Object.assign(Object.assign({}, o2), {get: () => ((t4, e3) => {
          const n3 = e3.dims.slice(), r3 = n3[1], o3 = n3[2] * n3[3], a3 = [n3[0], r3], s3 = `
      vec4 process(int[2] indices) {
        vec4 v = vec4(0.0);
        int a[4];
        a[0] = indices[0];
        a[1] = indices[1];
        float temp = 0.0;
        for(int a2=0; a2<${n3[2]}; a2++) {
          a[2] = a2;
          for(int a3=0; a3<${n3[3]}; a3++) {
            a[3] = a3;
            float x = _X(a);
            temp += x;
          }
        }
        float mean = temp / float(${o3});
        temp = 0.0;
        for(int a2=0; a2<${n3[2]}; a2++) {
          a[2] = a2;
          for(int a3=0; a3<${n3[3]}; a3++) {
            a[3] = a3;
            float x = _X(a);
            temp += (x - mean) * (x - mean);
          }
        }
        v.r = mean;
        v.g = temp / float(${o3});

        return v;
      }`;
          return Object.assign(Object.assign({}, t4), {output: {dims: a3, type: e3.type, textureType: i2.TextureType.packedLastDimension}, shaderSource: s3});
        })(o2, t3)}), s2 = {name: "InstanceNormalization_ComputeOutput", inputNames: ["X", "MeanAndVariance", "Scale", "B"], inputTypes: [i2.TextureType.unpacked, i2.TextureType.packedLastDimension, i2.TextureType.unpacked, i2.TextureType.unpacked]}, u2 = (t3, e3, n3, o3) => {
          const a3 = Object.assign(Object.assign({}, s2), {cacheHint: `${n3}`});
          return Object.assign(Object.assign({}, a3), {get: () => ((t4, e4, n4, o4, a4) => {
            const s3 = (0, r2.getGlsl)(t4.session.backend.glContext.version), [u3, c3] = t4.calculateTextureWidthAndHeight(a4, i2.TextureType.packedLastDimension), [l2, p] = [u3 / 4, c3], f = `
      vec4 get_MeanAndVariance(int[2] mv) {
        int offset = indicesToOffset_MeanAndVariance(mv);
        vec2 coords = offsetToCoords(offset, ${l2}, ${p});
        return ${s3.texture2D}(MeanAndVariance, coords);
      }

      float process(int[4] indices) {
        int mv[2];
        mv[0] = indices[0];
        mv[1] = indices[1];
        vec4 mean_and_variance = get_MeanAndVariance(mv);
        float mean = mean_and_variance.r;
        float variance = mean_and_variance.g;

        int sb[1];
        sb[0] = indices[1];
        float scale = _Scale(sb);
        float b = _B(sb);

        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;
      }`;
            return Object.assign(Object.assign({}, e4), {output: {dims: n4.dims, type: n4.type, textureType: i2.TextureType.unpacked}, variables: [{name: "epsilon", type: "float", data: o4}], shaderSource: f});
          })(t3, a3, e3, n3, o3)});
        }, c2 = (t3) => {
          if (!t3 || t3.length !== 3)
            throw new Error("InstanceNormalization requires 3 inputs.");
          const e3 = t3[0], n3 = t3[1], r3 = t3[2];
          if (e3.dims.length < 3 || n3.dims.length !== 1 || r3.dims.length !== 1)
            throw new Error("Invalid input shape.");
          if (n3.dims[0] !== e3.dims[1] || r3.dims[0] !== e3.dims[1])
            throw new Error("Input shapes are mismatched.");
          if (e3.type !== "float32" && e3.type !== "float64" || n3.type !== "float32" && n3.type !== "float64" || r3.type !== "float32" && r3.type !== "float64")
            throw new Error("Invalid input type.");
          if (t3[0].dims.length !== 4)
            throw new Error("Only support 4-D input shape.");
        };
      }, 708: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.createPackedMatmulProgramInfoLoader = void 0;
        const r2 = n2(2517), i2 = n2(5060), o2 = n2(2039), a2 = n2(9390), s2 = n2(2823), u2 = n2(5623);
        e2.createPackedMatmulProgramInfoLoader = (t3, e3, n3) => {
          const c2 = (l2 = e3.length > 2, p = n3.activationCacheKey, {name: "MatMul (packed)", inputNames: l2 ? ["A", "B", "Bias"] : ["A", "B"], inputTypes: l2 ? [o2.TextureType.packed, o2.TextureType.packed, o2.TextureType.packed] : [o2.TextureType.packed, o2.TextureType.packed], cacheHint: p});
          var l2, p;
          return Object.assign(Object.assign({}, c2), {get: () => ((t4, e4, n4, c3) => {
            const l3 = n4.length > 2, p2 = l3 ? "value += getBiasForMatmul();" : "", f = n4[0].dims, d2 = n4[1].dims, h2 = r2.BroadcastUtil.calcShape(f, d2, true), g2 = !r2.ShapeUtil.areEqual(n4[0].dims, n4[1].dims);
            if (!h2)
              throw new Error("Can't use matmul on the given tensors");
            const b2 = f[f.length - 1], m = Math.ceil(b2 / 2), y2 = f.length, _2 = d2.length, v2 = (0, i2.getGlsl)(t4.session.backend.glContext.version), w2 = (0, a2.getCoordsDataType)(h2.length), x2 = h2.length, T2 = (0, a2.getGlChannels)(), {activationFunction: S2, applyActivation: O} = (0, s2.getActivationSnippet)(c3), A2 = l3 ? `${(0, u2.getBiasForMatmul)(w2, T2, n4[2].dims, h2, true)}` : "", E2 = g2 ? `${function(t5, e5, n5, i3) {
              let o3 = [], a3 = [];
              const s3 = n5[0].dims, u3 = n5[1].dims, c4 = s3.length, l4 = u3.length, p3 = i3.length, f2 = p3 - c4, d3 = p3 - l4;
              o3 = s3.map((t6, n6) => `coords.${e5[n6 + f2]}`), o3[c4 - 1] = "i*2", o3.join(", "), a3 = u3.map((t6, n6) => `coords.${e5[n6 + d3]}`), a3[l4 - 2] = "i*2", a3.join(", ");
              const h3 = r2.BroadcastUtil.getBroadcastDims(s3, i3), g3 = r2.BroadcastUtil.getBroadcastDims(u3, i3), b3 = h3.map((t6) => `coords.${e5[t6 + f2]} = 0;`).join("\n"), m2 = g3.map((t6) => `coords.${e5[t6 + d3]} = 0;`).join("\n"), y3 = `int lastDim = coords.${e5[p3 - 1]};
  coords.${e5[p3 - 1]} = coords.${e5[p3 - 2]};
  coords.${e5[p3 - 2]} = lastDim;`;
              return `
vec4 getAAtOutCoordsMatmul(int i) {
  ${t5} coords = getOutputCoords();
  ${y3}
  ${b3}
  vec4 outputValue = getA(${o3});
  return outputValue;
}

vec4 getBAtOutCoordsMatmul(int i) {
  ${t5} coords = getOutputCoords();
  ${y3}
  ${m2}
  vec4 outputValue = getB(${a3});
  return outputValue;
}`;
            }(w2, T2, n4, h2)}` : "", I2 = g2 ? "getAAtOutCoordsMatmul(i)" : `getA(${function(t5, e5) {
              let n5 = "";
              for (let r3 = 0; r3 < e5 - 2; r3++)
                n5 += `rc.${t5[r3]}, `;
              return n5 += `rc.${t5[e5 - 2]}, i*2`, n5;
            }(T2, y2)})`, P2 = g2 ? "getBAtOutCoordsMatmul(i)" : `getB(${function(t5, e5) {
              let n5 = "";
              for (let r3 = 0; r3 < e5 - 2; r3++)
                n5 += `rc.${t5[r3]}, `;
              return n5 += `i*2, rc.${t5[e5 - 1]}`, n5;
            }(T2, _2)})`, D2 = `
            ${E2}
            ${A2}
            ${S2}
            void main() {
              ${g2 ? "" : `${w2} rc =
          getOutputCoords(); int lastDim = rc.${T2[x2 - 1]}; rc.${T2[x2 - 1]} =
          rc.${T2[x2 - 2]}; rc.${T2[x2 - 2]} = lastDim;
      `}

              vec4 value = vec4(0);
              for (int i = 0; i < ${m}; i++) {
                vec4 a = ${I2};
                vec4 b = ${P2};

                value += (a.rrbb * b.rgrg);
                value += (a.ggaa * b.baba);
              }
              ${p2}
              ${O}
              ${v2.output} = value;
            }`;
            return Object.assign(Object.assign({}, e4), {output: {dims: h2, type: n4[0].type, textureType: o2.TextureType.packed}, shaderSource: D2, hasMain: true});
          })(t3, c2, e3, n3)});
        };
      }, 5623: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.getBiasForMatmul = e2.createMatmulProgramInfoLoader = e2.parseMatMulAttributes = e2.matMul = void 0;
        const r2 = n2(2517), i2 = n2(2039), o2 = n2(9390), a2 = n2(2823), s2 = n2(708);
        function u2(t3, e3) {
          const n3 = (s3 = t3.length > 2, u3 = e3.activationCacheKey, {name: "MatMul", inputNames: s3 ? ["A", "B", "Bias"] : ["A", "B"], inputTypes: s3 ? [i2.TextureType.unpacked, i2.TextureType.unpacked, i2.TextureType.unpacked] : [i2.TextureType.unpacked, i2.TextureType.unpacked], cacheHint: u3});
          var s3, u3;
          return Object.assign(Object.assign({}, n3), {get: () => function(t4, e4, n4) {
            const s4 = e4[0].dims, u4 = e4[1].dims, c3 = r2.BroadcastUtil.calcShape(s4, u4, true);
            if (!c3)
              throw new Error("Can't use matmul on the given tensors");
            const p = (0, o2.getCoordsDataType)(c3.length), f = (0, o2.getGlChannels)(), {activationFunction: d2, applyActivation: h2} = (0, a2.getActivationSnippet)(n4), g2 = e4.length > 2, b2 = g2 ? "value += getBiasForMatmul();" : "", m = g2 ? `${l2(p, f, e4[2].dims, c3, false)}` : "", y2 = c3.length, _2 = s4.length, v2 = u4.length, w2 = `
    ${d2}
    ${m}
    float process(int indices[${y2}]) {
        int a[${_2}];
        int b[${v2}];
        bcastMatmulIndices_A(indices, a);
        bcastMatmulIndices_B(indices, b);

        float value;
        for (int k=0; k<${s4[s4.length - 1]}; ++k) {
            a[${_2 - 1}] = k;
            b[${v2 - 2}] = k;
            value += _A(a) * _B(b);
        }
        ${b2}
        ${h2}
        return value;
    }`;
            return Object.assign(Object.assign({}, t4), {output: {dims: c3, type: e4[0].type, textureType: i2.TextureType.unpacked}, shaderSource: w2});
          }(n3, t3, e3)});
        }
        e2.matMul = (t3, e3, n3) => (c2(e3), t3.session.pack ? [t3.run((0, s2.createPackedMatmulProgramInfoLoader)(t3, e3, n3), e3)] : [t3.run(u2(e3, n3), e3)]), e2.parseMatMulAttributes = (t3) => (0, a2.parseInternalActivationAttributes)(t3.attributes), e2.createMatmulProgramInfoLoader = u2;
        const c2 = (t3) => {
          if (!t3 || t3.length !== 2)
            throw new Error("MatMul requires 2 inputs.");
          if (t3[0].dims[t3[0].dims.length - 1] !== t3[1].dims[t3[1].dims.length - 2])
            throw new Error("shared dimension does not match.");
          if (t3[0].type !== "float32" && t3[0].type !== "float64" || t3[1].type !== "float32" && t3[1].type !== "float64")
            throw new Error("inputs should be float type");
          if (t3[0].type !== t3[1].type)
            throw new Error("inputs types should match");
        };
        function l2(t3, e3, n3, i3, o3) {
          let a3 = "";
          const s3 = n3.length, u3 = i3.length, c3 = u3 - s3;
          a3 = u3 < 2 && s3 > 0 ? "coords" : n3.map((t4, n4) => `coords.${e3[n4 + c3]}`).join(", ");
          const l3 = r2.BroadcastUtil.getBroadcastDims(n3, i3).map((t4) => `coords.${e3[t4 + c3]} = 0;`).join("\n");
          let p = "vec4(outputValue.xx, outputValue.yy)";
          return r2.ShapeUtil.size(n3) === 1 && (p = "vec4(outputValue.x)"), o3 ? `
vec4 getBiasForMatmul() {
  ${t3} coords = getOutputCoords();
  ${l3}
  vec4 outputValue = getBias(${a3});
  return ${p};
}` : `
float getBiasForMatmul() {
  ${t3} coords = getOutputCoords();
  ${l3}
  return getBias(coords.x);
}`;
        }
        e2.getBiasForMatmul = l2;
      }, 2403: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.createPackProgramInfoLoader = void 0;
        const r2 = n2(5060), i2 = n2(2039), o2 = n2(9390), a2 = n2(2827), s2 = {name: "pack", inputNames: ["A"], inputTypes: [i2.TextureType.unpackedReversed]};
        e2.createPackProgramInfoLoader = (t3, e3) => Object.assign(Object.assign({}, s2), {get: () => ((t4, e4) => {
          const n3 = (0, r2.getGlsl)(t4.session.backend.glContext.version), u2 = e4.dims, c2 = u2.length, l2 = e4.dims.length, p = (0, o2.getCoordsDataType)(l2), f = (0, a2.getChannels)("rc", l2), d2 = (h2 = l2, g2 = f, b2 = u2[u2.length - 2], m = u2[u2.length - 1], h2 === 0 || h2 === 1 ? "" : `
    int r = ${g2[h2 - 2]};
    int c = ${g2[h2 - 1]};
    int rp1 = ${g2[h2 - 2]} + 1;
    int cp1 = ${g2[h2 - 1]} + 1;
    bool rEdge = rp1 >= ${m};
    bool cEdge = cp1 >= ${b2};
    `);
          var h2, g2, b2, m;
          let y2;
          y2 = c2 === 0 ? [1, 1] : c2 === 1 ? [u2[0], 1] : [u2[l2 - 1], u2[l2 - 2]];
          const _2 = function(t5, e5, n4) {
            if (t5 === 0)
              return "false";
            if (t5 === 1)
              return `rc > ${e5[0]}`;
            let r3 = "";
            for (let i3 = t5 - 2; i3 < t5; i3++)
              r3 += `${n4[i3]} >= ${e5[i3 - t5 + 2]}`, i3 < t5 - 1 && (r3 += "||");
            return r3;
          }(l2, y2, f), v2 = function(t5, e5) {
            const n4 = t5.length;
            if (n4 === 0)
              return "getA(), 0, 0, 0";
            if (n4 === 1)
              return `getA(rc),
            rc + 1 >= ${t5[0]} ? 0. : getA(rc + 1),
            0, 0`;
            let r3 = "";
            if (n4 > 2)
              for (let t6 = 0; t6 < n4 - 2; ++t6)
                r3 += `${e5[t6]},`;
            return `getA(${r3}r, c),
          rEdge ? 0. : getA(${r3}rp1, c),
          cEdge ? 0. : getA(${r3}r, cp1),
          rEdge || cEdge ? 0. : getA(${r3}rp1, cp1)`;
          }(u2, f), w2 = `
        void main() {
          ${p} rc = getOutputCoords();

          if(${_2}) {
            ${n3.output} = vec4(0);
          } else {
            ${d2}

            ${n3.output} = vec4(${v2});
          }
        }
      `;
          return Object.assign(Object.assign({}, s2), {hasMain: true, output: {dims: e4.dims, type: e4.type, textureType: i2.TextureType.packed}, shaderSource: w2});
        })(t3, e3)});
      }, 2827: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.unpackFromChannel = e2.getChannels = e2.getVecChannels = void 0;
        const r2 = n2(9390);
        function i2(t3, e3) {
          return (0, r2.getGlChannels)(e3).map((e4) => `${t3}.${e4}`);
        }
        e2.getVecChannels = i2, e2.getChannels = function(t3, e3) {
          return e3 === 1 ? [t3] : i2(t3, e3);
        }, e2.unpackFromChannel = function() {
          return "\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  ";
        };
      }, 2870: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parsePadAttributesV11 = e2.padV11 = e2.parsePadAttributesV2 = e2.padV2 = void 0;
        const r2 = n2(246), i2 = n2(2517), o2 = n2(5060), a2 = n2(2039), s2 = {name: "Pad", inputNames: ["A"], inputTypes: [a2.TextureType.unpacked]};
        e2.padV2 = (t3, e3, n3) => (l2(e3), [t3.run(Object.assign(Object.assign({}, s2), {cacheHint: n3.cacheKey, get: () => c2(t3, e3[0], n3)}), e3)]), e2.parsePadAttributesV2 = (t3) => {
          const e3 = t3.attributes.getString("mode", "constant"), n3 = t3.attributes.getFloat("value", 0), i3 = t3.attributes.getInts("pads");
          return (0, r2.createAttributeWithCacheKey)({mode: e3, value: n3, pads: i3});
        }, e2.padV11 = (t3, n3, r3) => {
          p(n3);
          const i3 = u2(t3, n3, r3);
          return (0, e2.padV2)(t3, [n3[0]], i3);
        }, e2.parsePadAttributesV11 = (t3) => t3.attributes.getString("mode", "constant");
        const u2 = (t3, e3, n3) => {
          if (!t3.session.isInitializer(e3[1].dataId) || e3.length >= 3 && !t3.session.isInitializer(e3[2].dataId))
            throw new Error("dynamic pad attributes are not allowed");
          const i3 = Array.from(e3[1].integerData), o3 = e3.length >= 3 ? e3[2].floatData[0] : 0;
          return (0, r2.createAttributeWithCacheKey)({mode: n3, pads: i3, value: o3});
        }, c2 = (t3, e3, n3) => {
          const r3 = i2.ShapeUtil.padShape(e3.dims.slice(), n3.pads), o3 = r3.length, s3 = `
      ${f(t3, e3, n3)}
      float process(int[${o3}] indices) {
          return padA(indices);
      }`;
          return {name: "Pad", inputNames: ["A"], inputTypes: [a2.TextureType.unpacked], output: {dims: r3, type: e3.type, textureType: a2.TextureType.unpacked}, shaderSource: s3};
        }, l2 = (t3) => {
          if (!t3 || t3.length !== 1)
            throw new Error("Pad requires 1 input");
          if (t3[0].type !== "float32" && t3[0].type !== "float64")
            throw new Error("Invalid input type.");
        }, p = (t3) => {
          if (!t3 || t3.length !== 2 && t3.length !== 3)
            throw new Error("Pad requires 2 or 3 inputs");
          if (t3[1].type !== "int32")
            throw new Error("Invalid input type.");
          if (t3.length >= 3 && t3[2].type === "string")
            throw new Error("Invalid input type.");
        }, f = (t3, e3, n3) => {
          const r3 = (0, o2.getGlsl)(t3.session.backend.glContext.version), [s3, u3] = t3.calculateTextureWidthAndHeight(e3.dims, a2.TextureType.unpacked), c3 = i2.ShapeUtil.computeStrides(e3.dims);
          switch (n3.mode) {
            case "constant":
              return d2(r3, e3.dims, c3, s3, u3, n3.pads, n3.value);
            case "reflect":
              return h2(r3, e3.dims, c3, s3, u3, n3.pads);
            case "edge":
              return g2(r3, e3.dims, c3, s3, u3, n3.pads);
            default:
              throw new Error("Invalid mode");
          }
        }, d2 = (t3, e3, n3, r3, i3, o3, a3) => {
          const s3 = e3.length;
          let u3 = "";
          for (let t4 = s3 - 1; t4 >= 0; --t4)
            u3 += `
        k = m[${t4}] - ${o3[t4]};
        if (k < 0)  return constant;
        if (k >= ${e3[t4]}) return constant;
        offset += k * ${n3[t4]};
        `;
          return `
      float padA(int m[${s3}]) {
        const float constant = float(${a3});
        int offset = 0;
        int k = 0;
        ${u3}
        vec2 coords = offsetToCoords(offset, ${r3}, ${i3});
        float value = getColorAsFloat(${t3.texture2D}(A, coords));
        return value;
      }
      `;
        }, h2 = (t3, e3, n3, r3, i3, o3) => {
          const a3 = e3.length;
          let s3 = "";
          for (let t4 = a3 - 1; t4 >= 0; --t4)
            s3 += `
        k = m[${t4}] - ${o3[t4]};
        if (k < 0) { k = -k; }
        {
          const int _2n_1 = ${2 * (e3[t4] - 1)};
          k = int( mod( float(k), float(_2n_1) ) ) ;
          if(k >= ${e3[t4]}) { k = _2n_1 - k; }
        }
        offset += k * ${n3[t4]};
        `;
          return `
      float padA(int m[${a3}]) {
        int offset = 0;
        int k = 0;
        ${s3}
        vec2 coords = offsetToCoords(offset, ${r3}, ${i3});
        float value = getColorAsFloat(${t3.texture2D}(A, coords));
        return value;
      }
      `;
        }, g2 = (t3, e3, n3, r3, i3, o3) => {
          const a3 = e3.length;
          let s3 = "";
          for (let t4 = a3 - 1; t4 >= 0; --t4)
            s3 += `
        k = m[${t4}] - ${o3[t4]};
        if (k < 0)  k = 0;
        if (k >= ${e3[t4]}) k = ${e3[t4] - 1};
        offset += k * ${n3[t4]};
      `;
          return `
      float padA(int m[${a3}]) {
        int offset = 0;
        int k = 0;
        ${s3}
        vec2 coords = offsetToCoords(offset, ${r3}, ${i3});
        float value = getColorAsFloat(${t3.texture2D}(A, coords));
        return value;
      }
      `;
        };
      }, 2143: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.globalMaxPool = e2.parseMaxPoolAttributes = e2.maxPool = e2.parseGlobalAveragePoolAttributes = e2.globalAveragePool = e2.parseAveragePoolAttributes = e2.averagePool = void 0;
        const r2 = n2(246), i2 = n2(2517), o2 = n2(2039);
        e2.averagePool = (t3, e3, n3) => {
          p(e3);
          const r3 = {name: "AveragePool", inputNames: ["X"], inputTypes: [o2.TextureType.unpacked], cacheHint: n3.cacheKey};
          return [t3.run(Object.assign(Object.assign({}, r3), {get: () => a2(e3, r3, false, n3)}), e3)];
        }, e2.parseAveragePoolAttributes = (t3) => {
          const e3 = t3.attributes.getString("auto_pad", "NOTSET"), n3 = t3.attributes.getInt("ceil_mode", 0), i3 = t3.attributes.getInt("count_include_pad", 0) !== 0, o3 = t3.attributes.getInts("kernel_shape"), a3 = t3.attributes.getInts("strides", []), s3 = t3.attributes.getInts("pads", []);
          if (n3 !== 0)
            throw new Error("using ceil() in shape computation is not yet supported for AveragePool");
          return (0, r2.createAttributeWithCacheKey)({autoPad: e3, ceilMode: n3, countIncludePad: i3, kernelShape: o3, strides: a3, pads: s3});
        };
        const a2 = (t3, e3, n3, r3) => {
          const [a3, s3] = u2(t3, r3, n3), c3 = i2.ShapeUtil.size(a3.kernelShape);
          let l3 = "";
          a3.countIncludePad ? l3 += `value /= float(${c3});` : l3 += `value /= float(${c3} - pad);`;
          const p2 = `
        ${f(t3[0].dims, a3, "value += _X(x);", l3, "0.0")}
      `;
          return Object.assign(Object.assign({}, e3), {output: {dims: s3, type: t3[0].type, textureType: o2.TextureType.unpacked}, shaderSource: p2});
        };
        e2.globalAveragePool = (t3, e3, n3) => {
          p(e3);
          const r3 = {name: "GlobalAveragePool", inputNames: ["X"], inputTypes: [o2.TextureType.unpacked], cacheHint: `${n3.countIncludePad}`};
          return [t3.run(Object.assign(Object.assign({}, r3), {get: () => a2(e3, r3, true, n3)}), e3)];
        }, e2.parseGlobalAveragePoolAttributes = (t3) => {
          const e3 = t3.attributes.getInt("count_include_pad", 0) !== 0;
          return (0, r2.createAttributeWithCacheKey)({autoPad: "", ceilMode: 0, countIncludePad: e3, kernelShape: [], strides: [], pads: []});
        }, e2.maxPool = (t3, e3, n3) => {
          p(e3);
          const r3 = {name: "MaxPool", inputNames: ["X"], inputTypes: [o2.TextureType.unpacked], cacheHint: n3.cacheKey};
          return [t3.run(Object.assign(Object.assign({}, r3), {get: () => s2(e3, r3, false, n3)}), e3)];
        }, e2.parseMaxPoolAttributes = (t3) => {
          const e3 = t3.attributes.getString("auto_pad", "NOTSET"), n3 = t3.attributes.getInt("ceil_mode", 0), i3 = t3.attributes.getInts("kernel_shape"), o3 = t3.attributes.getInts("strides", []), a3 = t3.attributes.getInts("pads", []), s3 = t3.attributes.getInt("storage_order", 0), u3 = t3.attributes.getInts("dilations", []);
          if (s3 !== 0)
            throw new Error("column major storage order is not yet supported for MaxPool");
          if (n3 !== 0)
            throw new Error("using ceil() in shape computation is not yet supported for MaxPool");
          return (0, r2.createAttributeWithCacheKey)({autoPad: e3, ceilMode: n3, countIncludePad: false, kernelShape: i3, strides: o3, pads: a3, storageOrder: s3, dilations: u3});
        };
        const s2 = (t3, e3, n3, r3) => {
          const [i3, a3] = u2(t3, r3, n3), s3 = `
      ${f(t3[0].dims, i3, "\n      value = max(_X(x), value);\n    ", "", "-1e5")}
    `;
          return Object.assign(Object.assign({}, e3), {output: {dims: a3, type: t3[0].type, textureType: o2.TextureType.unpacked}, shaderSource: s3});
        }, u2 = (t3, e3, n3) => {
          const r3 = t3[0].dims.slice(), o3 = Object.hasOwnProperty.call(e3, "dilations"), a3 = e3.kernelShape.slice(), s3 = e3.strides.slice(), u3 = o3 ? e3.dilations.slice() : [], c3 = e3.pads.slice();
          i2.PoolConvUtil.adjustPoolAttributes(n3, r3, a3, s3, u3, c3);
          const l3 = i2.PoolConvUtil.computePoolOutputShape(n3, r3, s3, u3, a3, c3, e3.autoPad), p2 = Object.assign({}, e3);
          return o3 ? Object.assign(p2, {kernelShape: a3, strides: s3, pads: c3, dilations: u3, cacheKey: e3.cacheKey}) : Object.assign(p2, {kernelShape: a3, strides: s3, pads: c3, cacheKey: e3.cacheKey}), [p2, l3];
        }, c2 = {autoPad: "", ceilMode: 0, countIncludePad: false, kernelShape: [], strides: [], pads: [], storageOrder: 0, dilations: [], cacheKey: ""}, l2 = {name: "GlobalMaxPool", inputNames: ["X"], inputTypes: [o2.TextureType.unpacked]};
        e2.globalMaxPool = (t3, e3) => (p(e3), [t3.run(Object.assign(Object.assign({}, l2), {get: () => s2(e3, l2, true, c2)}), e3)]);
        const p = (t3) => {
          if (!t3 || t3.length !== 1)
            throw new Error("Pool ops requires 1 input.");
          if (t3[0].type !== "float32" && t3[0].type !== "float64")
            throw new Error("Invalid input type.");
        }, f = (t3, e3, n3, r3, o3) => {
          const a3 = t3.length;
          if (e3.kernelShape.length <= 2) {
            const i3 = e3.kernelShape[e3.kernelShape.length - 1], s3 = e3.strides[e3.strides.length - 1], u3 = e3.pads[e3.pads.length / 2 - 1], c3 = e3.pads[e3.pads.length - 1], l3 = t3[a3 - 1];
            let p2 = "", f2 = "", d3 = "";
            if (p2 = u3 + c3 !== 0 ? `
          for (int i = 0; i < ${i3}; i++) {
            x[${a3} - 1] = indices[${a3} - 1] * ${s3} - ${u3} + i;
            if (x[${a3} - 1] < 0 || x[${a3} - 1] >= ${l3}) {
              pad++;
              continue;
            }
            ${n3}
          }` : `
          for (int i = 0; i < ${i3}; i++) {
            x[${a3} - 1] = indices[${a3} - 1] * ${s3} - ${u3} + i;
            ${n3}
          }`, e3.kernelShape.length === 2) {
              const n4 = e3.kernelShape[e3.kernelShape.length - 2], r4 = e3.strides[e3.strides.length - 2], o4 = e3.pads[e3.pads.length / 2 - 2], s4 = e3.pads[e3.pads.length - 2], u4 = t3[a3 - 2];
              f2 = o4 + s4 !== 0 ? `
            for (int j = 0; j < ${n4}; j++) {
              x[${a3} - 2] = indices[${a3} - 2] * ${r4} - ${o4} + j;
              if (x[${a3} - 2] < 0 || x[${a3} - 2] >= ${u4}) {
                pad+= ${i3};
                continue;
              }
          ` : `
            for (int j = 0; j < ${n4}; j++) {
              x[${a3} - 2] = indices[${a3} - 2] * ${r4} - ${o4} + j;
            `, d3 = "\n          }\n        ";
            }
            return `
        float process(int indices[${a3}]) {
          int x[${a3}];
          copyVec(indices, x);

          float value = ${o3};
          int pad = 0;
          ${f2}
          ${p2}
          ${d3}
          ${r3}
          return value;
        }
      `;
          }
          {
            const s3 = i2.ShapeUtil.size(e3.kernelShape), u3 = i2.ShapeUtil.computeStrides(e3.kernelShape), c3 = u3.length, l3 = e3.pads.length, p2 = h2(c3), f2 = d2(t3, "inputDims"), g2 = d2(e3.pads, "pads"), b2 = d2(u3, "kernelStrides"), m = d2(e3.strides, "strides");
            let y2 = "";
            return y2 = e3.pads.reduce((t4, e4) => t4 + e4) ? `
            if (x[j] >= inputDims[j] || x[j] < 0) {
              pad++;
              isPad = true;
              break;
            }
          }
          if (!isPad) {
            ${n3}
          }` : `
          }
          ${n3}
        `, `
        ${p2}
        float process(int indices[${a3}]) {
          int x[${a3}];
          copyVec(indices, x);
          int offset[${c3}];
          int pads[${l3}];
          int inputDims[${a3}];
          int kernelStrides[${c3}];
          int strides[${c3}];
          ${g2}
          ${f2}
          ${m}
          ${b2}

          float value = ${o3};
          int pad = 0;
          bool isPad = false;
          for (int i = 0; i < ${s3}; i++) {
            offsetToIndices(i, kernelStrides, offset);
            isPad = false;
            for (int j = ${a3} - ${c3}; j < ${a3}; j++) {
              x[j] = indices[j] * strides[j - ${a3} + ${c3}]
                + offset[j - ${a3} + ${c3}] - pads[j - 2];
              ${y2}
          }
          ${r3}

          return value;
        }
      `;
          }
        }, d2 = (t3, e3) => {
          let n3 = "";
          for (let r3 = 0; r3 < t3.length; r3++)
            n3 += `
      ${e3}[${r3}] = ${t3[r3]};
    `;
          return n3;
        }, h2 = (t3) => `
  void offsetToIndices(int offset, int[${t3}] strides, out int[${t3}] indices) {
    if (${t3} == 0) {
      return;
    }
    for (int i = 0; i < ${t3} - 1; ++i) {
      indices[i] = offset / strides[i];
      offset -= indices[i] * strides[i];
    }
    indices[${t3} - 1] = offset;
  }`;
      }, 4939: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.reduceLogSumSquare = e2.reduceLogSum = e2.reduceProd = e2.reduceMin = e2.reduceMax = e2.reduceMean = e2.reduceSum = e2.parseReduceAttributes = void 0;
        const r2 = n2(246), i2 = n2(782), o2 = n2(2517), a2 = n2(2039), s2 = (t3, e3, n3, r3, i3) => {
          c2(e3);
          const o3 = {name: r3, inputNames: ["A"], inputTypes: [a2.TextureType.unpacked]};
          return [t3.run(Object.assign(Object.assign({}, o3), {cacheHint: n3.cacheKey, get: () => u2(t3, e3, n3, r3, i3, o3)}), e3)];
        };
        e2.parseReduceAttributes = (t3) => {
          const e3 = t3.attributes.getInts("axes", []), n3 = t3.attributes.getInt("keepdims", 1) === 1;
          return (0, r2.createAttributeWithCacheKey)({axes: e3, keepDims: n3});
        };
        const u2 = (t3, e3, n3, r3, i3, s3) => {
          const u3 = [], c3 = e3[0].dims.length || 1, l2 = [], p = o2.ShapeUtil.normalizeAxes(n3.axes, e3[0].dims.length), f = i3(e3, p);
          let d2 = f[1];
          for (let t4 = 0; t4 < e3[0].dims.length; t4++)
            p.indexOf(t4) >= 0 || p.length === 0 ? (n3.keepDims && u3.push(1), d2 = `
          for(int j${t4} = 0; j${t4} < ${e3[0].dims[t4]}; j${t4}++) {
            inputIdx[${t4}] = j${t4};
            ${d2}
          }`) : (l2.push(`inputIdx[${t4}] = outputIdx[${u3.length}];`), u3.push(e3[0].dims[t4]));
          const h2 = `
      float process(int outputIdx[${u3.length || 1}]) {
        float value;                 // final result
        int inputIdx[${c3}];      // addressing input data
        ${l2.join("\n")}
        ${f[0]}       // init ops for reduce max/min
        ${d2}
        ${f[2]}       // final computation for reduce mean
        return value;
      }`;
          return Object.assign(Object.assign({}, s3), {output: {dims: u3, type: e3[0].type, textureType: a2.TextureType.unpacked}, shaderSource: h2});
        }, c2 = (t3) => {
          if (!t3 || t3.length !== 1)
            throw new Error("Reduce op requires 1 input.");
          if (i2.NUMBER_TYPES.indexOf(t3[0].type) === -1)
            throw new Error("Invalid input type.");
        };
        e2.reduceSum = (t3, e3, n3) => s2(t3, e3, n3, "ReduceSum", () => ["value = 0.0;", "value += _A(inputIdx);", ""]), e2.reduceMean = (t3, e3, n3) => s2(t3, e3, n3, "ReduceMean", (t4, e4) => {
          let n4 = 1;
          for (let r3 = 0; r3 < t4[0].dims.length; r3++)
            (e4.indexOf(r3) >= 0 || e4.length === 0) && (n4 *= t4[0].dims[r3]);
          return ["value = 0.0;", "value += _A(inputIdx);", `value /= ${n4}.;`];
        }), e2.reduceMax = (t3, e3, n3) => s2(t3, e3, n3, "ReduceMax", (t4, e4) => {
          const n4 = [];
          for (let r3 = 0; r3 < t4[0].dims.length; r3++)
            (e4.indexOf(r3) >= 0 || e4.length === 0) && n4.push(`inputIdx[${r3}] = 0;`);
          return [`${n4.join("\n")}
value = _A(inputIdx);`, "value = max(value, _A(inputIdx));", ""];
        }), e2.reduceMin = (t3, e3, n3) => s2(t3, e3, n3, "ReduceMin", (t4, e4) => {
          const n4 = [];
          for (let r3 = 0; r3 < t4[0].dims.length; r3++)
            (e4.indexOf(r3) >= 0 || e4.length === 0) && n4.push(`inputIdx[${r3}] = 0;`);
          return [`${n4.join("\n")}
value = _A(inputIdx);`, "value = min(value, _A(inputIdx));", ""];
        }), e2.reduceProd = (t3, e3, n3) => s2(t3, e3, n3, "ReduceProd", () => ["value = 1.0;", "value *= _A(inputIdx);", ""]), e2.reduceLogSum = (t3, e3, n3) => s2(t3, e3, n3, "ReduceLogSum", () => ["value = 0.0;", "value += _A(inputIdx);", "value = log(value);"]), e2.reduceLogSumSquare = (t3, e3, n3) => s2(t3, e3, n3, "ReduceLogSumSquare", () => ["float t; value = 0.0;", "t = _A(inputIdx); value += t * t;", ""]);
      }, 7019: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.isReshapeCheap = e2.processDims3D = e2.createPackedReshape3DProgramInfoLoader = void 0;
        const r2 = n2(2517), i2 = n2(5060), o2 = n2(2039), a2 = n2(2827);
        e2.createPackedReshape3DProgramInfoLoader = (t3, e3, n3) => {
          const s2 = ((t4) => ({name: "Reshape (packed)", inputTypes: [o2.TextureType.packed], inputNames: ["A"], cacheHint: `${t4}`}))(n3);
          return Object.assign(Object.assign({}, s2), {get: () => ((t4, e4, n4, s3) => {
            const u2 = e4.dims, c2 = s3;
            let l2 = "";
            for (let t5 = 0; t5 < 4; t5++) {
              let e5 = "";
              switch (t5) {
                case 0:
                  e5 = "outputCoords = rc;";
                  break;
                case 1:
                  e5 = "outputCoords = ivec3(rc.x, rc.y+1, rc.z);";
                  break;
                case 2:
                  e5 = "outputCoords = ivec3(rc.x, rc.y, rc.z+1);";
                  break;
                case 3:
                  e5 = "outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);";
                  break;
                default:
                  throw new Error();
              }
              l2 += `
        ${e5}
        ${t5 > 0 ? "if(outputCoords.y < rows && outputCoords.z < cols){" : ""}
          int flattenedIndex = getFlattenedIndex(outputCoords);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);
          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${t5}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);

        ${t5 > 0 ? "}" : ""}
      `;
            }
            const p = (0, i2.getGlsl)(t4.session.backend.glContext.version), f = `
      ${function(t5) {
              const e5 = r2.ShapeUtil.computeStrides(t5), n5 = ["b", "r", "c"], i3 = "index";
              return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e5.map((t6, r3) => `int ${n5[r3]} = ${i3} / ${t6}; ${r3 === e5.length - 1 ? `int ${n5[r3 + 1]} = ${i3} - ${n5[r3]} * ${t6}` : `index -= ${n5[r3]} * ${t6}`};`).join("")}
      return ivec3(b, r, c);
    }
  `;
            }(u2)}
      ${function(t5) {
              const e5 = r2.ShapeUtil.computeStrides(t5);
              return `
  int getFlattenedIndex(ivec3 coords) {
    // reverse y, z order
    return coords.x * ${e5[0]} + coords.z * ${e5[1]} + coords.y;
  }
`;
            }(c2)}
      ${(0, a2.unpackFromChannel)()}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.0);

        ivec3 outputCoords;
        int rows = ${c2[2]};
        int cols = ${c2[1]};

        ${l2}
        ${p.output} = result;
      }
    `;
            return Object.assign(Object.assign({}, n4), {output: {dims: c2, type: e4.type, textureType: o2.TextureType.packed}, shaderSource: f, hasMain: true});
          })(t3, e3, s2, n3)});
        }, e2.processDims3D = function(t3) {
          if (t3.length === 0)
            return [1, 1, 1];
          let e3 = 1;
          for (let n3 = 0; n3 < t3.length - 2; ++n3)
            e3 *= t3[n3];
          return [e3, t3.length > 1 ? t3[t3.length - 2] : 1, t3[t3.length - 1]];
        }, e2.isReshapeCheap = function(t3, e3) {
          let n3 = false;
          return n3 = t3.length === 0 || e3.length === 0 || (t3.length < 2 || e3.length < 2 ? t3[t3.length - 1] === e3[e3.length - 1] : t3[t3.length - 1] === e3[e3.length - 1] && t3[t3.length - 2] === e3[e3.length - 2]), n3;
        };
      }, 718: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.reshape = void 0;
        const r2 = n2(2517);
        e2.reshape = (t3, e3) => {
          const n3 = r2.ShapeUtil.calculateReshapedDims(e3[0].dims, e3[1].integerData);
          return t3.session.pack ? [t3.reshapePacked(e3[0], n3)] : [t3.reshapeUnpacked(e3[0], n3)];
        };
      }, 2268: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseResizeAttributesV11 = e2.parseResizeAttributesV10 = e2.resize = void 0;
        const r2 = n2(5060), i2 = n2(2039), o2 = n2(9390), a2 = n2(2827), s2 = n2(9793), u2 = {name: "Resize", inputNames: ["A"], inputTypes: [i2.TextureType.packed]};
        e2.resize = (t3, e3, n3) => ((0, s2.validateInputs)(e3, n3), [t3.run(Object.assign(Object.assign({}, u2), {cacheHint: n3.cacheKey, get: () => c2(t3, e3, n3)}), e3)]), e2.parseResizeAttributesV10 = (t3) => (0, s2.parseUpsampleAttributes)(t3, 10), e2.parseResizeAttributesV11 = (t3) => (0, s2.parseUpsampleAttributes)(t3, 11);
        const c2 = (t3, e3, n3) => {
          const s3 = (0, r2.getGlsl)(t3.session.backend.glContext.version), [c3, p2] = l2(e3, n3);
          if (c3.every((t4) => t4 === 1) && n3.coordinateTransformMode !== "tf_crop_and_resize")
            return Object.assign(Object.assign({}, u2), {output: {dims: p2, type: e3[0].type, textureType: i2.TextureType.packed}, hasMain: true, shaderSource: `void main() {
                    vec4 v = ${s3.texture2D}(X, TexCoords);
                    ${s3.output} = v;
                }`});
          const f2 = p2.length;
          if (f2 < 2)
            throw new Error(`output dimension should be at least 2, but got ${f2}`);
          const d2 = p2[f2 - 2], h2 = p2[f2 - 1], g2 = e3[0].dims;
          if (f2 !== g2.length)
            throw new Error(`output dimension should match input ${g2.length}, but got ${f2}`);
          const b2 = g2[f2 - 2], m = g2[f2 - 1], y2 = c3[f2 - 2], _2 = c3[f2 - 1];
          let v2 = "";
          if (n3.mode !== "linear")
            throw new Error(`resize (packed) does not support mode: '${n3.mode}'`);
          switch (n3.coordinateTransformMode) {
            case "asymmetric":
              v2 = "\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                ";
              break;
            case "half_pixel":
              v2 = "\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                ";
              break;
            case "pytorch_half_pixel":
              v2 = `
                    vec4 getSourceFracIndex(ivec4 coords) {
                        vec4 fcoords = vec4(coords);
                        return vec4(
                            ${h2}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,
                            ${d2}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,
                            ${h2}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,
                            ${d2}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0
                          );
                    }
                `;
              break;
            case "align_corners":
              v2 = `
                    vec4 getSourceFracIndex(ivec4 coords) {
                        vec4 resized = vec4(${h2}.0 - 1.0, ${d2}.0 - 1.0, ${h2}.0 - 1.0,
                            ${d2}.0 - 1.0);
                        vec4 original = vec4(${m}.0 - 1.0, ${b2}.0 - 1.0, ${m}.0 - 1.0,
                            ${b2}.0 - 1.0);
                        vec4 new_scale = original / resized;
                        return vec4(coords) * new_scale;
                    }
                `;
              break;
            default:
              throw new Error(`resize (packed) does not support coordinateTransformMode:                                 '${n3.coordinateTransformMode}'`);
          }
          const w2 = (0, o2.getCoordsDataType)(f2), x2 = `
            const vec2 inputWH = vec2(${b2}.0, ${m}.0);
            const vec4 scaleWHWH = vec4(float(${y2}), float(${_2}), float(${y2}), float(${_2}));
            ${(0, a2.unpackFromChannel)()}
            ${v2}
            float getAValue(int x10, int r, int c, int d) {
                return getChannel(getA(x10, r, c, d), vec2(c, d));
            }
            void main() {
                ${w2} rc = getOutputCoords();

                int batch = rc[0];
                int depth = rc[1];

                // retrieve the 4 coordinates that is used in the 4 packed output values.
                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);

                // calculate the source index in fraction
                vec4 sourceFrac = getSourceFracIndex(coords);

                // get the lower and upper bound of the 4 values that will be packed into one texel.
                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));
                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));
                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));
                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));

                bool hasNextRow = rc.w < ${d2 - 1};
                bool hasNextCol = rc.z < ${h2 - 1};

                // pack x00, x01, x10, x11's top-left corner into one vec4 structure
                vec4 topLeft = vec4(
                    getAValue(batch, depth, x00.x, x00.y),
                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);

                // pack x00, x01, x10, x11's top-right corner into one vec4 structure
                vec4 topRight = vec4(
                    getAValue(batch, depth, x00.x, x00.w),
                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);

                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure
                vec4 bottomLeft = vec4(
                    getAValue(batch, depth, x00.z, x00.y),
                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);

                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure
                vec4 bottomRight = vec4(
                    getAValue(batch, depth, x00.z, x00.w),
                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);

                // calculate the interpolation fraction on u and v direction
                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);
                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));

                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);
                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);
                vec4 newValue = mix(top, bottom, clampFrac.xxzz);

                ${s3.output} = vec4(newValue);
            }
        `;
          return Object.assign(Object.assign({}, u2), {output: {dims: p2, type: e3[0].type, textureType: i2.TextureType.packed}, hasMain: true, shaderSource: x2});
        }, l2 = (t3, e3) => {
          const n3 = t3[0].dims;
          let r3, i3 = e3.scales;
          if (i3.length === 0) {
            const o4 = t3[e3.scalesInputIdx];
            if (o4 && o4.size !== 0) {
              if (t3[e3.sizesInputIdx])
                throw new Error("Only one of scales or sizes must be provided as input.");
              i3 = p(o4, e3.mode, e3.isResize);
            } else {
              const o5 = t3[e3.sizesInputIdx];
              if (!o5 || o5.size === 0)
                throw new Error("Either scales or sizes MUST be provided as input.");
              r3 = Array.from(o5.integerData), i3 = f(r3, n3, e3.mode, e3.isResize);
            }
          } else if (t3[e3.sizesInputIdx])
            throw new Error("Only one of scales or sizes must be provided as input.");
          const o3 = r3 || n3.map((t4, e4) => Math.floor(t4 * i3[e4]));
          return [i3, o3];
        }, p = (t3, e3, n3) => {
          const r3 = Array.from(t3.floatData);
          return (0, s2.scalesValidation)(r3, e3, n3), r3;
        }, f = (t3, e3, n3, r3) => {
          const i3 = e3.length, o3 = new Array(i3);
          for (let n4 = 0, r4 = i3; n4 < r4; n4++)
            if (e3[n4] === 0) {
              if (t3[n4] !== 0)
                throw new Error("Input dim is zero but required output dim is non-zero.");
              o3[n4] = 1;
            } else
              o3[n4] = t3[n4] / e3[n4];
          return (0, s2.scalesValidation)(o3, n3, r3), o3;
        };
      }, 8117: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.shape = void 0;
        const r2 = n2(9162);
        e2.shape = (t3, e3) => (i2(e3), [new r2.Tensor([e3[0].dims.length], "int32", void 0, void 0, new Int32Array(e3[0].dims))]);
        const i2 = (t3) => {
          if (!t3 || t3.length !== 1)
            throw new Error("Shape requires 1 input.");
        };
      }, 2278: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.sliceV10 = e2.parseSliceAttributes = e2.slice = void 0;
        const r2 = n2(246), i2 = n2(782), o2 = n2(2517), a2 = n2(2039), s2 = {name: "Slice", inputNames: ["A"], inputTypes: [a2.TextureType.unpacked]};
        e2.slice = (t3, e3, n3) => (c2(e3), [t3.run(Object.assign(Object.assign({}, s2), {cacheHint: n3.cacheKey, get: () => u2(t3, e3[0], n3)}), e3)]), e2.parseSliceAttributes = (t3) => {
          const e3 = t3.attributes.getInts("starts"), n3 = t3.attributes.getInts("ends"), i3 = t3.attributes.getInts("axes", []);
          return (0, r2.createAttributeWithCacheKey)({starts: e3, ends: n3, axes: i3});
        };
        const u2 = (t3, e3, n3) => {
          const r3 = n3.axes.length === 0 ? e3.dims.slice(0).map((t4, e4) => e4) : n3.axes, i3 = o2.ShapeUtil.normalizeAxes(r3, e3.dims.length), u3 = n3.starts.map((t4, n4) => t4 > e3.dims[i3[n4]] - 1 ? e3.dims[i3[n4]] : o2.ShapeUtil.normalizeAxis(t4, e3.dims[i3[n4]])), c3 = n3.ends.map((t4, n4) => t4 > e3.dims[i3[n4]] - 1 ? e3.dims[i3[n4]] : o2.ShapeUtil.normalizeAxis(t4, e3.dims[i3[n4]])), l3 = e3.dims.slice(), p2 = [];
          for (let t4 = 0; t4 < i3.length; t4++)
            l3[i3[t4]] = c3[t4] - u3[t4], u3[t4] > 0 && p2.push(`outputIdx[${i3[t4]}] += ${u3[t4]};`);
          const f = `
      float process(int outputIdx[${l3.length}]) {
        ${p2.join("\n      ")}
        return _A(outputIdx);
      }`;
          return Object.assign(Object.assign({}, s2), {output: {dims: l3, type: e3.type, textureType: a2.TextureType.unpacked}, shaderSource: f});
        }, c2 = (t3) => {
          if (!t3 || t3.length !== 1)
            throw new Error("Slice requires 1 input.");
          if (i2.NUMBER_TYPES.indexOf(t3[0].type) === -1)
            throw new Error("Invalid input type.");
        };
        e2.sliceV10 = (t3, e3) => {
          p(e3);
          const n3 = l2(t3, e3);
          return [t3.run(Object.assign(Object.assign({}, s2), {cacheHint: n3.cacheKey, get: () => u2(t3, e3[0], n3)}), [e3[0]])];
        };
        const l2 = (t3, e3) => {
          if (!t3.session.isInitializer(e3[1].dataId) || !t3.session.isInitializer(e3[2].dataId) || e3.length >= 4 && !t3.session.isInitializer(e3[3].dataId) || e3.length >= 5 && !t3.session.isInitializer(e3[4].dataId))
            throw new Error("dynamic slice attributes are not allowed");
          if (e3.length >= 5 && e3[4].integerData.some((t4) => t4 !== 1))
            throw new Error("currently non-1 steps is not supported for Slice");
          const n3 = Array.from(e3[1].integerData), r3 = Array.from(e3[2].integerData), i3 = e3.length >= 4 ? Array.from(e3[3].integerData) : [];
          return {starts: n3, ends: r3, axes: i3, cacheKey: `${i3};${n3};${r3}`};
        }, p = (t3) => {
          if (!t3 || t3.length < 3 || t3.length > 5)
            throw new Error("Invalid input number.");
          if (t3[1].type !== "int32" || t3[1].dims.length !== 1)
            throw new Error("Invalid input type.");
          if (t3[2].type !== "int32" || t3[2].dims.length !== 1)
            throw new Error("Invalid input type.");
          if (t3.length >= 4 && (t3[3].type !== "int32" || t3[3].dims.length !== 1))
            throw new Error("Invalid input type.");
          if (t3.length >= 5 && (t3[4].type !== "int32" || t3[4].dims.length !== 1))
            throw new Error("Invalid input type.");
        };
      }, 5524: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.softmaxV13 = e2.parseSoftmaxAttributesV13 = e2.parseSoftmaxAttributes = e2.softmax = void 0;
        const r2 = n2(246), i2 = n2(2517), o2 = n2(5060), a2 = n2(2039), s2 = n2(3738), u2 = {name: "SoftmaxComputeMax", inputNames: ["A"], inputTypes: [a2.TextureType.unpacked]}, c2 = {name: "SoftmaxComputeScale", inputNames: ["A", "Max"], inputTypes: [a2.TextureType.unpacked, a2.TextureType.unpacked]}, l2 = {name: "SoftMax", inputNames: ["A", "Max", "Norm"], inputTypes: [a2.TextureType.unpacked, a2.TextureType.unpacked, a2.TextureType.unpacked]};
        e2.softmax = (t3, e3, n3) => {
          g2(e3);
          const r3 = e3[0].dims.slice(), o3 = i2.ShapeUtil.normalizeAxis(n3.axis, r3.length), a3 = i2.ShapeUtil.sizeToDimension(r3, o3), s3 = i2.ShapeUtil.sizeFromDimension(r3, o3);
          return p(t3, e3, n3, a3, s3);
        }, e2.parseSoftmaxAttributes = (t3) => (0, r2.createAttributeWithCacheKey)({axis: t3.attributes.getInt("axis", 1)}), e2.parseSoftmaxAttributesV13 = (t3) => (0, r2.createAttributeWithCacheKey)({axis: t3.attributes.getInt("axis", -1)}), e2.softmaxV13 = (t3, e3, n3) => {
          g2(e3);
          const o3 = e3[0].dims.slice(), a3 = i2.ShapeUtil.normalizeAxis(n3.axis, o3.length), u3 = o3.length, c3 = a3 !== u3 - 1, l3 = [];
          let f2, d3 = [], h3 = [];
          c3 && (d3 = Array.from({length: u3}).map((t4, e4) => e4), d3[a3] = u3 - 1, d3[u3 - 1] = a3, d3.map((t4) => l3.push(o3[t4])), f2 = (0, r2.createAttributeWithCacheKey)({perm: d3}), h3 = (0, s2.transpose)(t3, e3, f2));
          const b2 = c3 ? i2.ShapeUtil.sizeToDimension(l3, u3 - 1) : i2.ShapeUtil.sizeToDimension(o3, u3 - 1), m = c3 ? i2.ShapeUtil.sizeFromDimension(l3, u3 - 1) : i2.ShapeUtil.sizeFromDimension(o3, u3 - 1), y2 = p(t3, c3 ? h3 : e3, n3, b2, m);
          return c3 ? (0, s2.transpose)(t3, y2, f2) : y2;
        };
        const p = (t3, e3, n3, r3, i3) => {
          const o3 = f(t3, e3[0], r3, i3, [r3]), a3 = t3.run(Object.assign(Object.assign({}, u2), {cacheHint: n3.cacheKey, get: () => o3}), e3), s3 = d2(t3, e3[0], r3, i3, o3.output.dims, [r3]), p2 = t3.run(Object.assign(Object.assign({}, c2), {cacheHint: n3.cacheKey, get: () => s3}), [e3[0], a3]), g3 = h2(t3, e3[0], r3, i3, o3.output.dims, s3.output.dims);
          return [t3.run(Object.assign(Object.assign({}, l2), {cacheHint: n3.cacheKey, get: () => g3}), [e3[0], a3, p2])];
        }, f = (t3, e3, n3, r3, i3) => {
          const [s3, c3] = t3.calculateTextureWidthAndHeight(e3.dims, a2.TextureType.unpacked), l3 = i3.length;
          if (n3 < 1 || r3 < 1)
            throw new Error("Logical row count N and feature count D must be greater than or equal to 1");
          if (i3.length !== 1)
            throw new Error("Dimensionality of the output should be 1");
          if (i3[0] !== n3)
            throw new Error("Shape of the output should be equal to logical row count");
          const p2 = (0, o2.getGlsl)(t3.session.backend.glContext.version), f2 = `
      float process(int[${l3}] indices) {
        int logical_row_start_offset = indices[0] * ${r3};

        float max = getColorAsFloat(${p2.texture2D}(A, offsetToCoords(logical_row_start_offset, ${s3},
        ${c3} )));
        for(int i=1; i<${r3}; ++i)
        {
          float current = getColorAsFloat(${p2.texture2D}(A, offsetToCoords(logical_row_start_offset + i,
            ${s3}, ${c3})));
          if(current > max)
          max = current;
        }

        return max;
      }`;
          return Object.assign(Object.assign({}, u2), {output: {dims: i3, type: e3.type, textureType: a2.TextureType.unpacked}, shaderSource: f2});
        }, d2 = (t3, e3, n3, r3, i3, s3) => {
          const [u3, l3] = t3.calculateTextureWidthAndHeight(e3.dims, a2.TextureType.unpacked), p2 = s3.length;
          if (n3 < 1 || r3 < 1)
            throw new Error("Logical row count N and feature count D must be greater than or equal to 1");
          if (s3.length !== 1)
            throw new Error("Dimensionality of the output should be 1");
          if (s3[0] !== n3)
            throw new Error("Shape of the output should be equal to logical row count");
          if (i3.length !== 1)
            throw new Error("Dimensionality of the intermediate results should be 1");
          if (i3[0] !== n3)
            throw new Error("Shape of the intermediate results should be equal to logical row count");
          const f2 = `
      float process(int[${p2}] indices) {
        int logical_row_start_offset = indices[0] * ${r3};

        float norm_factor = 0.0;
        float max = _Max(indices);
        for(int i=0; i<${r3}; ++i)
        {
          norm_factor += exp(getColorAsFloat(${(0, o2.getGlsl)(t3.session.backend.glContext.version).texture2D}(A, offsetToCoords(logical_row_start_offset + i,
            ${u3}, ${l3}))) - max);
        }

        return norm_factor;
      }`;
          return Object.assign(Object.assign({}, c2), {output: {dims: s3, type: e3.type, textureType: a2.TextureType.unpacked}, shaderSource: f2});
        }, h2 = (t3, e3, n3, r3, i3, o3) => {
          const [s3, u3] = t3.calculateTextureWidthAndHeight(e3.dims, a2.TextureType.unpacked), c3 = e3.dims.length;
          if (n3 < 1 || r3 < 1)
            throw new Error("Logical row count N and feature count D must be greater than or equal to 1");
          if (i3.length !== 1 || o3.length !== 1)
            throw new Error("Dimensionality of the intermediate results should be 1");
          if (i3[0] !== n3 || o3[0] !== n3)
            throw new Error("Shape of the intermediate results should be equal to logical row count");
          const p2 = `
      float process(int[${c3}] indices) {

      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)
      int offset = coordsToOffset(TexCoords, ${s3}, ${u3});

      //determine the logical row for this index
      int logical_row_index[1];
      logical_row_index[0] = offset / ${r3};

      float norm_factor = _Norm(logical_row_index);

      // avoid possible division by 0
      // if norm_facor is 0, all elements are zero
      // if so, return 0
      if(norm_factor == 0.0)
        return 0.0;

      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;
    }`;
          return Object.assign(Object.assign({}, l2), {output: {dims: e3.dims, type: e3.type, textureType: a2.TextureType.unpacked}, shaderSource: p2});
        }, g2 = (t3) => {
          if (!t3 || t3.length !== 1)
            throw new Error("Softmax requires 1 input.");
          if (t3[0].type !== "float32" && t3[0].type !== "float64")
            throw new Error("Invalid input type");
        };
      }, 5975: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseSplitAttributes = e2.split = void 0;
        const r2 = n2(246), i2 = n2(2517), o2 = n2(2039), a2 = {name: "Split", inputNames: ["A"], inputTypes: [o2.TextureType.unpacked]};
        e2.split = (t3, e3, n3) => {
          c2(e3);
          const r3 = i2.ShapeUtil.normalizeAxis(n3.axis, e3[0].dims.length), o3 = s2(t3, e3, r3, n3), l2 = [];
          for (let i3 = 0; i3 < o3; ++i3)
            l2.push(t3.run(Object.assign(Object.assign({}, a2), {cacheHint: `${n3.cacheKey};${i3}`, get: () => u2(t3, e3[0], n3, r3, i3)}), e3));
          return l2;
        }, e2.parseSplitAttributes = (t3) => {
          const e3 = t3.attributes.getInt("axis", 0), n3 = t3.attributes.getInts("split", []), i3 = t3.outputs.length;
          return (0, r2.createAttributeWithCacheKey)({axis: e3, split: n3, numOutputs: i3});
        };
        const s2 = (t3, e3, n3, r3) => {
          const [, o3] = i2.SplitUtil.splitShape(e3[0].dims, n3, r3.split, r3.numOutputs);
          return o3.length;
        }, u2 = (t3, e3, n3, r3, s3) => {
          const [u3, c3] = i2.SplitUtil.splitShape(e3.dims, r3, n3.split, n3.numOutputs), l2 = c3[s3], p = u3[s3], f = `
      float process(int indices[${p.length}]) {
        indices[${r3}] += ${l2};
        return _A(indices);
      }
    `;
          return Object.assign(Object.assign({}, a2), {cacheHint: `${n3.cacheKey}:${s3}`, output: {dims: p, type: e3.type, textureType: o2.TextureType.unpacked}, shaderSource: f});
        }, c2 = (t3) => {
          if (!t3 || t3.length !== 1)
            throw new Error("Split requires one input.");
          if (t3[0].type !== "int8" && t3[0].type !== "uint8" && t3[0].type !== "int16" && t3[0].type !== "uint16" && t3[0].type !== "int32" && t3[0].type !== "uint32" && t3[0].type !== "float32" && t3[0].type !== "float64" && t3[0].type !== "bool")
            throw new Error("Invalid input type.");
        };
      }, 3933: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseSqueezeAttributes = e2.squeezeV13 = e2.squeeze = void 0;
        const r2 = n2(2517);
        e2.squeeze = (t3, e3, n3) => {
          i2(e3);
          const o3 = r2.ShapeUtil.squeezeShape(e3[0].dims, n3);
          return [t3.reshapeUnpacked(e3[0], o3)];
        }, e2.squeezeV13 = (t3, n3) => (o2(n3), (0, e2.squeeze)(t3, [n3[0]], Array.from(n3[1].integerData))), e2.parseSqueezeAttributes = (t3) => t3.attributes.getInts("axes");
        const i2 = (t3) => {
          if (!t3 || t3.length !== 1)
            throw new Error("Squeeze requires 1 input.");
          if (t3[0].type === "string")
            throw new Error("invalid input tensor types.");
        }, o2 = (t3) => {
          if (!t3 || t3.length !== 2)
            throw new Error("Squeeze requires 2 inputs.");
          if (t3[1].type !== "int32")
            throw new Error("Invalid input type.");
        };
      }, 6558: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.sum = void 0;
        const r2 = n2(5060), i2 = n2(2039);
        e2.sum = (t3, e3) => {
          a2(e3);
          const n3 = {name: "Sum", inputNames: e3.map((t4, e4) => `X${e4}`), inputTypes: new Array(e3.length).fill(i2.TextureType.unpacked)};
          return [t3.run(Object.assign(Object.assign({}, n3), {get: () => o2(t3, e3, n3)}), e3)];
        };
        const o2 = (t3, e3, n3) => {
          const o3 = (0, r2.getGlsl)(t3.session.backend.glContext.version), a3 = e3[0].dims.slice(), s2 = `
      void main() {
        vec4 result = ${e3.map((t4, e4) => `${o3.texture2D}(X${e4},TexCoords)`).join(" + ")};
        ${o3.output} = result;
      }
    `;
          return Object.assign(Object.assign({}, n3), {output: {dims: a3, type: e3[0].type, textureType: i2.TextureType.unpacked}, hasMain: true, shaderSource: s2});
        }, a2 = (t3) => {
          if (!t3 || t3.length === 0)
            throw new Error("Sum requires inputs.");
          const e3 = t3[0].dims.length;
          for (let n3 = 1; n3 < t3.length; n3++) {
            if (e3 !== t3[n3].dims.length)
              throw new Error("Input shapes are mismatched.");
            for (let r3 = 0; r3 < e3; r3++)
              if (t3[0].dims[r3] !== t3[n3].dims[r3])
                throw new Error("Input shapes are not matched.");
          }
          if (t3[0].type !== "float32" && t3[0].type !== "float64")
            throw new Error("Invalid input type.");
          for (let e4 = 1; e4 < t3.length; e4++)
            if (t3[0].type !== t3[e4].type)
              throw new Error("Input types are not matched.");
        };
      }, 5723: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.tile = void 0;
        const r2 = n2(782), i2 = n2(2039);
        e2.tile = (t3, e3) => {
          a2(e3);
          const n3 = {name: "Tile", inputNames: ["A"], inputTypes: [i2.TextureType.unpacked]};
          return [t3.run(Object.assign(Object.assign({}, n3), {get: () => o2(t3, e3, n3)}), e3)];
        };
        const o2 = (t3, e3, n3) => {
          const r3 = e3[0].dims.slice(), o3 = new Array(r3.length), a3 = [];
          for (let t4 = 0; t4 < r3.length; t4++)
            o3[t4] = r3[t4] * e3[1].numberData[t4], a3.push(`inputIdx[${t4}] = int(mod(float(outputIdx[${t4}]), ${r3[t4]}.));`);
          const s2 = o3.length, u2 = `
      float process(int outputIdx[${s2}]) {
        int inputIdx[${s2}];
        ${a3.join("\n")}
        return _A(inputIdx);
      }
    `;
          return Object.assign(Object.assign({}, n3), {output: {dims: o3, type: e3[0].type, textureType: i2.TextureType.unpacked}, shaderSource: u2});
        }, a2 = (t3) => {
          if (!t3 || t3.length !== 2)
            throw new Error("Tile requires 2 input.");
          if (t3[1].dims.length !== 1)
            throw new Error("The second input shape must 1 dimension.");
          if (t3[1].dims[0] !== t3[0].dims.length)
            throw new Error("Invalid input shape.");
          if (r2.NUMBER_TYPES.indexOf(t3[0].type) === -1)
            throw new Error("Invalid input type.");
          if (t3[1].type !== "int32" && t3[1].type !== "int16")
            throw new Error("Invalid repeat type.");
        };
      }, 3738: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseTransposeAttributes = e2.transpose = void 0;
        const r2 = n2(246), i2 = n2(2517), o2 = n2(2039), a2 = {name: "Transpose", inputNames: ["A"], inputTypes: [o2.TextureType.unpacked]};
        e2.transpose = (t3, e3, n3) => (p(e3), [t3.run(Object.assign(Object.assign({}, a2), {cacheHint: n3.cacheKey, get: () => s2(t3, e3[0], n3.perm)}), e3)]), e2.parseTransposeAttributes = (t3) => (0, r2.createAttributeWithCacheKey)({perm: t3.attributes.getInts("perm", [])});
        const s2 = (t3, e3, n3) => {
          const r3 = e3.dims;
          n3 = u2(r3, n3);
          const i3 = c2(r3, n3), s3 = r3.length, p2 = `
      ${l2("perm", n3, s3)}
      float process(int indices[${s3}]) {
        int a[${s3}];
        perm(a, indices);
        return _A(a);
      }`;
          return Object.assign(Object.assign({}, a2), {output: {dims: i3, type: e3.type, textureType: o2.TextureType.unpacked}, shaderSource: p2});
        }, u2 = (t3, e3) => (e3 && e3.length !== t3.length && (e3 = [...t3.keys()].reverse()), e3), c2 = (t3, e3) => (e3 = u2(t3, e3), i2.ShapeUtil.sortBasedOnPerm(t3, e3)), l2 = (t3, e3, n3) => {
          const r3 = [];
          r3.push(`void ${t3}(out int a[${n3}], int src[${n3}]) {`);
          for (let t4 = 0; t4 < n3; ++t4)
            r3.push(`	a[${e3[t4]}]=src[${t4}];`);
          return r3.push("	}"), r3.join("\n");
        }, p = (t3) => {
          if (!t3 || t3.length !== 1)
            throw new Error("Transpose requires 1 input.");
          if (t3[0].type !== "float32" && t3[0].type !== "float64")
            throw new Error("input should be float tensor");
        };
      }, 8710: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.encodeAsUint8 = void 0;
        const r2 = n2(5060), i2 = n2(2039);
        e2.encodeAsUint8 = (t3, e3) => {
          const n3 = e3.shape, o2 = (0, r2.getGlsl)(t3.session.backend.glContext.version), a2 = `
    const float FLOAT_MAX = 1.70141184e38;
    const float FLOAT_MIN = 1.17549435e-38;

    bool isNaN(float val) {
      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;
    }

    highp vec4 encodeAsUint8(highp float v) {
      if (isNaN(v)) {
        return vec4(255, 255, 255, 255);
      }

      highp float av = abs(v);

      if(av < FLOAT_MIN) {
        return vec4(0.0, 0.0, 0.0, 0.0);
      } else if(v > FLOAT_MAX) {
        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
      } else if(v < -FLOAT_MAX) {
        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
      }

      highp vec4 c = vec4(0,0,0,0);

      highp float e = floor(log2(av));
      highp float m = exp2(fract(log2(av))) - 1.0;

      c[2] = floor(128.0 * m);
      m -= c[2] / 128.0;
      c[1] = floor(32768.0 * m);
      m -= c[1] / 32768.0;
      c[0] = floor(8388608.0 * m);

      highp float ebias = e + 127.0;
      c[3] = floor(ebias / 2.0);
      ebias -= c[3] * 2.0;
      c[2] += floor(ebias) * 128.0;

      c[3] += 128.0 * step(0.0, -v);

      return c / 255.0;
    }

    void main() {
      float value = ${o2.texture2D}(X,TexCoords).r;
      ${o2.output} = encodeAsUint8(value);
    }`, s2 = {name: "Uint8Encode", inputTypes: [i2.TextureType.unpacked], inputNames: ["X"], output: {dims: n3, type: e3.tensor.type, textureType: i2.TextureType.downloadUint8AsFloat}, shaderSource: a2, hasMain: true};
          return t3.executeProgram(s2, [e3.tensor]);
        };
      }, 4909: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.tanh = e2.tan = e2.sqrt = e2.sin = e2.sigmoid = e2.relu = e2.not = e2.neg = e2.log = e2.parseLeakyReluAttributes = e2.leakyRelu = e2.identity = e2.floor = e2.exp = e2.parseEluAttributes = e2.elu = e2.cos = e2.ceil = e2.clipV11 = e2.parseClipAttributes = e2.clip = e2.atan = e2.asin = e2.acos = e2.abs = e2.glslTanh = e2.glslTan = e2.glslSqrt = e2.glslSigmoid = e2.glslRelu = e2.glslSin = e2.glslNot = e2.glslNeg = e2.glslLog = e2.glslLeakyRelu = e2.glslIdentity = e2.glslClip = e2.glslFloor = e2.glslExp = e2.glslElu = e2.glslCos = e2.glslCeil = e2.glslAtan = e2.glslAsin = e2.glslAcos = e2.glslAbs = void 0;
        const r2 = n2(246), i2 = n2(2517), o2 = n2(8520), a2 = n2(5060), s2 = n2(2039);
        function u2() {
          return P2("abs");
        }
        function c2() {
          return P2("acos");
        }
        function l2() {
          return P2("asin");
        }
        function p() {
          return P2("atan");
        }
        function f() {
          return P2("ceil");
        }
        function d2() {
          return P2("cos");
        }
        function h2(t3) {
          const e3 = "elu";
          return {body: `
  const float alpha = float(${t3});

  float ${e3}_(float a) {
    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;
  }
  vec4 ${e3}_(vec4 v) {
    return vec4(${e3}_(v.x), ${e3}_(v.y), ${e3}_(v.z), ${e3}_(v.w));
  }
  `, name: e3, type: o2.FunctionType.ValueBased};
        }
        function g2() {
          return P2("exp");
        }
        function b2() {
          return P2("floor");
        }
        function m(t3, e3) {
          const n3 = "clip";
          return {body: `
  const float min = float(${t3});
  const float max = float(${e3});

  float ${n3}_(float a) {
    return clamp(a, min, max);
  }
  vec4 ${n3}_(vec4 v) {
    return clamp(v, min, max);
  }
  `, name: n3, type: o2.FunctionType.ValueBased};
        }
        function y2() {
          const t3 = "indentity";
          return {body: `
  float ${t3}_(float a) {
    return a;
  }
  vec4 ${t3}_(vec4 v) {
    return v;
  }
  `, name: t3, type: o2.FunctionType.ValueBased};
        }
        function _2(t3) {
          const e3 = "leakyRelu";
          return {body: `
  const float alpha = float(${t3});

  float ${e3}_(float a) {
    return a < 0.0 ? a * alpha : a;
  }
  vec4 ${e3}_(vec4 v) {
    return vec4(${e3}_(v.x), ${e3}_(v.y), ${e3}_(v.z), ${e3}_(v.w));
  }
  `, name: e3, type: o2.FunctionType.ValueBased};
        }
        function v2() {
          return P2("log");
        }
        function w2() {
          const t3 = "neg";
          return {body: `
  float ${t3}_(float a) {
    return -a;
  }
  vec4 ${t3}_(vec4 v) {
    return -v;
  }
  `, name: t3, type: o2.FunctionType.ValueBased};
        }
        function x2() {
          const t3 = "not";
          return {body: `
  float ${t3}_(float a) {
    return float( ! bool(a) );
  }
  bool ${t3}_(bool a) {
    return !a;
  }
  vec4 ${t3}_(vec4 v) {
    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));
  }
  bvec4 ${t3}_(bvec4 v) {
    return bvec4(!v.x, !v.y, !v.z, !v.w);
  }
  `, name: t3, type: o2.FunctionType.ValueBased};
        }
        function T2() {
          return P2("sin");
        }
        function S2() {
          const t3 = "relu";
          return {body: `
  float ${t3}_(float a) {
    return max( a, 0.0 );
  }
  vec4 ${t3}_(vec4 v) {
    return max( v, 0.0 );
  }
  `, name: t3, type: o2.FunctionType.ValueBased};
        }
        function O() {
          const t3 = "sigmoid";
          return {body: `
  float ${t3}_(float a) {
    return 1.0 / (1.0 + exp(-a));
  }
  vec4 ${t3}_(vec4 v) {
    return 1.0 / (1.0 + exp(-v));
  }
  `, name: t3, type: o2.FunctionType.ValueBased};
        }
        function A2() {
          return P2("sqrt");
        }
        function E2() {
          return P2("tan");
        }
        function I2() {
          const t3 = "tanh";
          return {body: `
  float ${t3}_(float a) {
    a = clamp(a, -10., 10.);
    a = exp(2.*a);
    return (a - 1.) / (a + 1.);
  }
  vec4 ${t3}_(vec4 v) {
    v = clamp(v, -10., 10.);
    v = exp(2.*v);
    return (v - 1.) / (v + 1.);
  }
  `, name: t3, type: o2.FunctionType.ValueBased};
        }
        function P2(t3) {
          return {body: `
  float ${t3}_(float a) {
    return ${t3}(a);
  }
  vec4 ${t3}_(vec4 v) {
    return ${t3}(v);
  }
  `, name: t3, type: o2.FunctionType.ValueBased};
        }
        e2.glslAbs = u2, e2.glslAcos = c2, e2.glslAsin = l2, e2.glslAtan = p, e2.glslCeil = f, e2.glslCos = d2, e2.glslElu = h2, e2.glslExp = g2, e2.glslFloor = b2, e2.glslClip = m, e2.glslIdentity = y2, e2.glslLeakyRelu = _2, e2.glslLog = v2, e2.glslNeg = w2, e2.glslNot = x2, e2.glslSin = T2, e2.glslRelu = S2, e2.glslSigmoid = O, e2.glslSqrt = A2, e2.glslTan = E2, e2.glslTanh = I2;
        const D2 = (t3, e3, n3, r3) => {
          const i3 = t3.session.pack ? s2.TextureType.packed : s2.TextureType.unpacked, o3 = {name: n3.name, inputTypes: [i3], inputNames: ["A"], cacheHint: r3};
          return Object.assign(Object.assign({}, o3), {get: () => ((t4, e4, n4, r4) => {
            const i4 = t4.session.pack ? s2.TextureType.packed : s2.TextureType.unpacked, o4 = (0, a2.getGlsl)(t4.session.backend.glContext.version);
            return Object.assign(Object.assign({}, e4), {output: {dims: n4.dims, type: n4.type, textureType: i4}, shaderSource: `
     ${r4.body}
     void main() {
       vec4 v = ${o4.texture2D}(A, TexCoords);
       v = ${r4.name}_(v);
       ${o4.output} = v;
     }
     `, hasMain: true});
          })(t3, o3, e3, n3)});
        };
        e2.abs = (t3, e3) => [t3.run(D2(t3, e3[0], u2()), e3)], e2.acos = (t3, e3) => [t3.run(D2(t3, e3[0], c2()), e3)], e2.asin = (t3, e3) => [t3.run(D2(t3, e3[0], l2()), e3)], e2.atan = (t3, e3) => [t3.run(D2(t3, e3[0], p()), e3)], e2.clip = (t3, e3, n3) => [t3.run(D2(t3, e3[0], m(n3.min, n3.max), n3.cacheKey), e3)], e2.parseClipAttributes = (t3) => (0, r2.createAttributeWithCacheKey)({min: t3.attributes.getFloat("min", i2.MIN_CLIP), max: t3.attributes.getFloat("max", i2.MAX_CLIP)}), e2.clipV11 = (t3, n3) => {
          const r3 = $2(t3, n3);
          return (0, e2.clip)(t3, [n3[0]], r3);
        };
        const $2 = (t3, e3) => {
          if (e3.length >= 3 && (!t3.session.isInitializer(e3[1].dataId) || !t3.session.isInitializer(e3[2].dataId)))
            throw new Error("dynamic clip attributes are not allowed");
          const n3 = e3.length >= 3 ? e3[1].numberData[0] : i2.MIN_CLIP, o3 = e3.length >= 3 ? e3[2].numberData[0] : i2.MAX_CLIP;
          return (0, r2.createAttributeWithCacheKey)({min: n3, max: o3});
        };
        e2.ceil = (t3, e3) => [t3.run(D2(t3, e3[0], f()), e3)], e2.cos = (t3, e3) => [t3.run(D2(t3, e3[0], d2()), e3)], e2.elu = (t3, e3, n3) => [t3.run(D2(t3, e3[0], h2(n3.alpha), n3.cacheKey), e3)], e2.parseEluAttributes = (t3) => (0, r2.createAttributeWithCacheKey)({alpha: t3.attributes.getFloat("alpha", 1)}), e2.exp = (t3, e3) => [t3.run(D2(t3, e3[0], g2()), e3)], e2.floor = (t3, e3) => [t3.run(D2(t3, e3[0], b2()), e3)], e2.identity = (t3, e3) => [t3.run(D2(t3, e3[0], y2()), e3)], e2.leakyRelu = (t3, e3, n3) => [t3.run(D2(t3, e3[0], _2(n3.alpha), n3.cacheKey), e3)], e2.parseLeakyReluAttributes = (t3) => (0, r2.createAttributeWithCacheKey)({alpha: t3.attributes.getFloat("alpha", 0.01)}), e2.log = (t3, e3) => [t3.run(D2(t3, e3[0], v2()), e3)], e2.neg = (t3, e3) => [t3.run(D2(t3, e3[0], w2()), e3)], e2.not = (t3, e3) => [t3.run(D2(t3, e3[0], x2()), e3)], e2.relu = (t3, e3) => [t3.run(D2(t3, e3[0], S2()), e3)], e2.sigmoid = (t3, e3) => [t3.run(D2(t3, e3[0], O()), e3)], e2.sin = (t3, e3) => [t3.run(D2(t3, e3[0], T2()), e3)], e2.sqrt = (t3, e3) => [t3.run(D2(t3, e3[0], A2()), e3)], e2.tan = (t3, e3) => [t3.run(D2(t3, e3[0], E2()), e3)], e2.tanh = (t3, e3) => [t3.run(D2(t3, e3[0], I2()), e3)];
      }, 5611: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.createUnpackProgramInfoLoader = e2.createUnpackProgramInfo = void 0;
        const r2 = n2(5060), i2 = n2(2039), o2 = n2(9390), a2 = n2(2827), s2 = {name: "unpack", inputNames: ["A"], inputTypes: [i2.TextureType.packed]};
        e2.createUnpackProgramInfo = (t3, e3) => {
          const n3 = e3.dims.length, u2 = (0, a2.getChannels)("rc", n3), c2 = u2.slice(-2), l2 = (0, o2.getCoordsDataType)(n3), p = (0, a2.unpackFromChannel)(), f = e3.dims.length === 0 ? "" : function(t4, e4) {
            if (t4 === 1)
              return "rc";
            let n4 = "";
            for (let r3 = 0; r3 < t4; r3++)
              n4 += e4[r3], r3 < t4 - 1 && (n4 += ",");
            return n4;
          }(n3, u2), d2 = n3 <= 1 ? "rc" : `vec2(${c2.join(",")})`, h2 = `
    ${p}
    void main() {
      ${l2} rc = getOutputCoords();

       // Sample the texture with the coords to get the rgba channel value.
       vec4 packedInput = getA(${f});

       ${(0, r2.getGlsl)(t3.session.backend.glContext.version).output} = vec4(getChannel(packedInput, ${d2}), 0, 0, 0);
     }
   `;
          return Object.assign(Object.assign({}, s2), {hasMain: true, output: {dims: e3.dims, type: e3.type, textureType: i2.TextureType.unpacked}, shaderSource: h2});
        }, e2.createUnpackProgramInfoLoader = (t3, n3) => Object.assign(Object.assign({}, s2), {get: () => (0, e2.createUnpackProgramInfo)(t3, n3)});
      }, 8428: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.parseUnsqueezeAttributes = e2.unsqueezeV13 = e2.unsqueeze = void 0;
        const r2 = n2(2517);
        e2.unsqueeze = (t3, e3, n3) => {
          i2(e3);
          const o3 = r2.ShapeUtil.unsqueezeShape(e3[0].dims, n3);
          return [t3.reshapeUnpacked(e3[0], o3)];
        }, e2.unsqueezeV13 = (t3, n3) => (o2(n3), (0, e2.unsqueeze)(t3, [n3[0]], Array.from(n3[1].integerData))), e2.parseUnsqueezeAttributes = (t3) => t3.attributes.getInts("axes");
        const i2 = (t3) => {
          if (!t3 || t3.length !== 1)
            throw new Error("Unsqueeze requires 1 input.");
          if (t3[0].type === "string")
            throw new Error("invalid input tensor types.");
        }, o2 = (t3) => {
          if (!t3 || t3.length !== 2)
            throw new Error("Unsqueeze requires 2 inputs.");
          if (t3[1].type !== "int32")
            throw new Error("Invalid input type.");
        };
      }, 9793: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.scalesValidation = e2.validateInputs = e2.parseUpsampleAttributes = e2.parseUpsampleAttributesV9 = e2.parseUpsampleAttributesV7 = e2.upsample = void 0;
        const r2 = n2(246), i2 = n2(5060), o2 = n2(2039), a2 = {name: "Upsample", inputNames: ["X"], inputTypes: [o2.TextureType.unpacked]};
        e2.upsample = (t3, n3, r3) => ((0, e2.validateInputs)(n3, r3), [t3.run(Object.assign(Object.assign({}, a2), {cacheHint: r3.cacheKey, get: () => s2(t3, n3, r3)}), n3)]), e2.parseUpsampleAttributesV7 = (t3) => (0, e2.parseUpsampleAttributes)(t3, 7), e2.parseUpsampleAttributesV9 = (t3) => (0, e2.parseUpsampleAttributes)(t3, 9), e2.parseUpsampleAttributes = (t3, n3) => {
          const i3 = n3 >= 10, o3 = t3.attributes.getString("mode", "nearest");
          if (o3 !== "nearest" && o3 !== "linear" && (n3 < 11 || o3 !== "cubic"))
            throw new Error(`unrecognized mode: ${o3}`);
          let a3 = [];
          n3 < 9 && (a3 = t3.attributes.getFloats("scales"), (0, e2.scalesValidation)(a3, o3, i3));
          const s3 = t3.attributes.getFloat("extrapolation_value", 0), u2 = n3 > 10 ? t3.attributes.getString("coordinate_transformation_mode", "half_pixel") : "asymmetric";
          if (["asymmetric", "pytorch_half_pixel", "tf_half_pixel_for_nn", "align_corners", "tf_crop_and_resize", "half_pixel"].indexOf(u2) === -1)
            throw new Error(`coordinate_transform_mode '${u2}' is not supported`);
          const c2 = u2 === "tf_crop_and_resize", l2 = c2, p = o3 === "nearest" && n3 >= 11 ? t3.attributes.getString("nearest_mode", "round_prefer_floor") : "";
          if (["round_prefer_floor", "round_prefer_ceil", "floor", "ceil", ""].indexOf(p) === -1)
            throw new Error(`nearest_mode '${p}' is not supported`);
          const f = t3.attributes.getFloat("cubic_coeff_a", -0.75), d2 = t3.attributes.getInt("exclude_outside", 0) !== 0;
          if (d2 && o3 !== "cubic")
            throw new Error("exclude_outside can be set to 1 only when mode is CUBIC.");
          const h2 = n3 < 11 || o3 === "nearest" && u2 === "asymmetric" && p === "floor";
          let g2 = 0, b2 = 0, m = 0;
          return n3 > 10 ? t3.inputs.length > 2 ? (g2 = 1, b2 = 2, m = 3) : (b2 = 1, m = 2) : n3 === 9 && (b2 = 1), (0, r2.createAttributeWithCacheKey)({opset: n3, isResize: i3, mode: o3, scales: a3, extrapolationValue: s3, coordinateTransformMode: u2, useExtrapolation: l2, needRoiInput: c2, nearestMode: p, cubicCoefficientA: f, excludeOutside: d2, useNearest2xOptimization: h2, roiInputIdx: g2, scalesInputIdx: b2, sizesInputIdx: m});
        };
        const s2 = (t3, e3, n3) => {
          const r3 = (0, i2.getGlsl)(t3.session.backend.glContext.version), [s3, u2] = t3.calculateTextureWidthAndHeight(e3[0].dims, o2.TextureType.unpacked), c2 = e3[0].dims.map((t4, e4) => Math.floor(t4 * n3.scales[e4])), [l2, p] = t3.calculateTextureWidthAndHeight(c2, o2.TextureType.unpacked), f = c2.length, d2 = new Array(f), h2 = new Array(f);
          let g2 = `
      int output_pitches[${f}];
      int input_pitches[${f}];
      `;
          for (let t4 = f - 1; t4 >= 0; t4--)
            d2[t4] = t4 === f - 1 ? 1 : d2[t4 + 1] * c2[t4 + 1], h2[t4] = t4 === f - 1 ? 1 : h2[t4 + 1] * e3[0].dims[t4 + 1], g2 += `
        output_pitches[${t4}] = ${d2[t4]};
        input_pitches[${t4}] = ${h2[t4]};
        `;
          const b2 = `
      float getInputFloat(int index) {
        vec2 coords = offsetToCoords(index, ${s3}, ${u2});
        float value = getColorAsFloat(${r3.texture2D}(X, coords));
        return value;
      }
      `, m = n3.mode === "nearest" ? `
    ${b2}
    float process(int indices[${f}]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${l2}, ${p});

      ${g2}

      int d, m;
      for (int dim = 0; dim < ${f}; ++dim) {
        d = output_index / output_pitches[dim];
        m = output_index - d * output_pitches[dim];
        output_index = m;

        if (scales[dim] != 1 && d > 0) {
          int d2 = d / scales[dim];
          m = d - d2 * scales[dim];
          d = d2;
        }
        input_index += input_pitches[dim] * d;
      }

      return getInputFloat(input_index);
    }` : f === 4 ? `
    ${b2}
    float process(int indices[4]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${l2}, ${p});

      ${g2}

      int m;
      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;
      index_of_dim0 = output_index / output_pitches[0];
      m = output_index - index_of_dim0 * output_pitches[0];
      index_of_dim1 = m / output_pitches[1];
      m = m - index_of_dim1 * output_pitches[1];
      index_of_dim2 = m / output_pitches[2];
      m = m - index_of_dim2 * output_pitches[2];
      index_of_dim3 = m;

      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;
      index_of_input_dim2 = index_of_dim2 / scales[2];
      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];
      index_of_input_dim3 = index_of_dim3 / scales[3];
      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];

      input_index = index_of_dim0 * input_pitches[0] +
            index_of_dim1 * input_pitches[1] +
            index_of_input_dim2 * input_pitches[2] +
            index_of_input_dim3;

      float x00 = getInputFloat(input_index);
      float x10, x01, x11;

      bool end_of_dim2 = false;
      if (index_of_input_dim2 == (${e3[0].dims[2]} - 1)) {
        // It's the end in dimension 2
        x01 = x00;
        end_of_dim2 = true;
      } else {
        x01 = getInputFloat(input_index + input_pitches[2]);
      }

      if (index_of_input_dim3 == (input_pitches[2] - 1)) {
        // It's the end in dimension 3
        x10 = x00;
        x11 = x01;
      }
      else {
        x10 = getInputFloat(input_index + 1);
        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);
      }

      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);
      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);
      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);
    }` : `
    ${b2}
    float process(int indices[2]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${l2}, ${p});

      ${g2}

      int m;
      int index_of_dim0, index_of_dim1;
      index_of_dim0 = output_index / output_pitches[0];
      m = output_index - index_of_dim0 * output_pitches[0];
      index_of_dim1 = m;

      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;
      index_of_input_dim0 = index_of_dim0 / scales[0];
      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];
      index_of_input_dim1 = index_of_dim1 / scales[1];
      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];

      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;

      float x00 = getInputFloat(input_index);
      float x10, x01, x11;

      bool end_of_dim0 = false;
      if (index_of_input_dim0 == (${e3[0].dims[0]} - 1)) {
        // It's the end in dimension 0
        x01 = x00;
        end_of_dim0 = true;
      } else {
        x01 = getInputFloat(input_index + input_pitches[0]);
      }

      if (index_of_input_dim1 == (input_pitches[0] - 1)) {
        // It's the end in dimension 1
        x10 = x00;
        x11 = x01;
      }
      else {
        x10 = getInputFloat(input_index + 1);
        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);
      }

      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);
      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);
      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);
    }`;
          return Object.assign(Object.assign({}, a2), {output: {dims: c2, type: e3[0].type, textureType: o2.TextureType.unpacked}, shaderSource: m, variables: [{name: "scales", type: "int", arrayLength: n3.scales.length, data: n3.scales.map((t4) => Math.ceil(t4))}]});
        };
        e2.validateInputs = (t3, e3) => {
          if (!t3 || e3.opset < 9 && t3.length !== 1 || e3.opset >= 9 && e3.opset < 11 && t3.length !== 2 || e3.opset >= 11 && t3.length < 2)
            throw new Error("invalid inputs.");
          if (e3.scales.length > 0 && t3[0].dims.length !== e3.scales.length)
            throw new Error("Invalid input shape.");
          if (t3[0].type === "string")
            throw new Error("Invalid input tensor types.");
        }, e2.scalesValidation = (t3, e3, n3) => {
          if (n3) {
            for (const e4 of t3)
              if (e4 <= 0)
                throw new Error("Scale value should be greater than 0.");
          } else
            for (const e4 of t3)
              if (e4 < 1)
                throw new Error("Scale value should be greater than or equal to 1.");
          if (!(e3 !== "linear" && e3 !== "cubic" || t3.length === 2 || t3.length === 4 && t3[0] === 1 && t3[1] === 1))
            throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic')         or 4-D inputs with the corresponding outermost 2 scale values being 1         in the ${n3 ? "Resize" : "Upsample"} opeartor.`);
        };
      }, 1958: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.ProgramManager = void 0;
        const r2 = n2(1670), i2 = n2(6231), o2 = n2(8879), a2 = n2(5060);
        e2.ProgramManager = class {
          constructor(t3, e3, n3) {
            this.profiler = t3, this.glContext = e3, this.textureLayoutStrategy = n3, this.repo = new Map(), this.attributesBound = false;
          }
          getArtifact(t3) {
            return this.repo.get(t3);
          }
          setArtifact(t3, e3) {
            this.repo.set(t3, e3);
          }
          run(t3, e3, n3) {
            var r3;
            this.profiler.event("op", `ProgramManager.run ${(r3 = t3.programInfo.name) !== null && r3 !== void 0 ? r3 : "unknown kernel"}`, () => {
              var r4;
              const o3 = this.glContext.gl, a3 = t3.program;
              o3.useProgram(a3);
              try {
                this.bindOutput(n3), this.attributesBound || this.bindAttributes(t3.attribLocations), this.bindUniforms(t3.uniformLocations, (r4 = t3.programInfo.variables) !== null && r4 !== void 0 ? r4 : [], e3);
              } catch (e4) {
                throw i2.Logger.error("ProgramManager", t3.programInfo.shaderSource), e4;
              }
              this.profiler.event("backend", "GlContext.draw()", () => {
                this.glContext.draw();
              });
            }, this.glContext);
          }
          dispose() {
            this.vertexShader && this.glContext.deleteShader(this.vertexShader), this.repo.forEach((t3) => this.glContext.deleteProgram(t3.program));
          }
          build(t3, e3, n3) {
            return this.profiler.event("backend", "ProgramManager.build", () => {
              const r3 = new o2.GlslPreprocessor(this.glContext, t3, e3, n3), i3 = r3.preprocess(), a3 = this.compile(i3);
              return {programInfo: t3, program: a3, uniformLocations: this.getUniformLocations(a3, r3.context.programInfo.inputNames, r3.context.programInfo.variables), attribLocations: this.getAttribLocations(a3)};
            });
          }
          compile(t3) {
            if (!this.vertexShader) {
              i2.Logger.verbose("ProrgramManager", "Compiling and caching Vertex shader for the first time");
              const t4 = (0, a2.getVertexShaderSource)(this.glContext.version);
              this.vertexShader = this.glContext.compileShader(t4, this.glContext.gl.VERTEX_SHADER);
            }
            r2.env.debug && i2.Logger.verbose("ProrgramManager", `FragShader:
${t3}
`);
            const e3 = this.glContext.compileShader(t3, this.glContext.gl.FRAGMENT_SHADER), n3 = this.glContext.createProgram(this.vertexShader, e3);
            return this.glContext.deleteShader(e3), n3;
          }
          bindOutput(t3) {
            const e3 = t3.width, n3 = t3.height;
            i2.Logger.verbose("ProrgramManager", `Binding output texture to Framebuffer: w/h=${e3}/${n3}, shape=${t3.shape}, type=${t3.tensor.type}`), this.glContext.attachFramebuffer(t3.texture, e3, n3);
          }
          bindAttributes(t3) {
            const e3 = t3.position, n3 = t3.textureCoord;
            this.glContext.setVertexAttributes(e3, n3), this.attributesBound = true;
          }
          bindUniforms(t3, e3, n3) {
            var r3;
            const i3 = this.glContext.gl;
            let o3 = 0;
            for (const {name: a3, type: s2, location: u2, arrayLength: c2} of t3) {
              const t4 = (r3 = e3.find((t5) => t5.name === a3)) === null || r3 === void 0 ? void 0 : r3.data;
              if (s2 !== "sampler2D" && !t4)
                throw new Error(`variable '${a3}' does not have data defined in program info`);
              switch (s2) {
                case "sampler2D":
                  this.bindTexture(n3[o3], u2, o3), o3++;
                  break;
                case "float":
                  c2 ? i3.uniform1fv(u2, t4) : i3.uniform1f(u2, t4);
                  break;
                case "int":
                  c2 ? i3.uniform1iv(u2, t4) : i3.uniform1i(u2, t4);
                  break;
                default:
                  throw new Error(`Uniform not implemented: ${s2}`);
              }
            }
          }
          bindTexture(t3, e3, n3) {
            this.glContext.bindTextureToUniform(t3.texture, n3, e3);
          }
          getAttribLocations(t3) {
            return {position: this.getAttribLocation(t3, "position"), textureCoord: this.getAttribLocation(t3, "textureCoord")};
          }
          getUniformLocations(t3, e3, n3) {
            const r3 = [];
            if (e3)
              for (const n4 of e3)
                r3.push({name: n4, type: "sampler2D", location: this.getUniformLocation(t3, n4)});
            if (n3)
              for (const e4 of n3)
                r3.push(Object.assign(Object.assign({}, e4), {location: this.getUniformLocation(t3, e4.name)}));
            return r3;
          }
          getUniformLocation(t3, e3) {
            const n3 = this.glContext.gl.getUniformLocation(t3, e3);
            if (n3 === null)
              throw new Error(`Uniform ${e3} not found.`);
            return n3;
          }
          getAttribLocation(t3, e3) {
            return this.glContext.gl.getAttribLocation(t3, e3);
          }
        };
      }, 6416: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.WebGLSessionHandler = void 0;
        const r2 = n2(6231), i2 = n2(1047), o2 = n2(8316), a2 = n2(1640), s2 = n2(1958), u2 = n2(7859), c2 = n2(5702);
        e2.WebGLSessionHandler = class {
          constructor(t3, e3) {
            this.backend = t3, this.context = e3, this.layoutStrategy = new u2.PreferLogicalStrategy(t3.glContext.maxTextureSize), this.programManager = new s2.ProgramManager(this.context.profiler, t3.glContext, this.layoutStrategy), this.textureManager = new c2.TextureManager(t3.glContext, this.layoutStrategy, this.context.profiler, {reuseTextures: t3.textureCacheMode === "full"}), this.packedTextureDataCache = new Map(), this.unpackedTextureDataCache = new Map(), this.pack = t3.pack, this.pack2unpackMap = new Map(), this.unpack2packMap = new Map();
          }
          createInferenceHandler() {
            return new o2.WebGLInferenceHandler(this);
          }
          onGraphInitialized(t3) {
            const e3 = t3.getValues().filter((t4) => t4.from === -1 && t4.tensor).map((t4) => t4.tensor.dataId);
            this.initializers = new Set(e3);
          }
          isInitializer(t3) {
            return !!this.initializers && this.initializers.has(t3);
          }
          addInitializer(t3) {
            this.initializers.add(t3);
          }
          getTextureData(t3, e3) {
            return e3 ? this.packedTextureDataCache.get(t3) : this.unpackedTextureDataCache.get(t3);
          }
          setTextureData(t3, e3, n3 = false) {
            r2.Logger.verbose("WebGLSessionHandler", "Storing Texture data in cache"), n3 ? this.packedTextureDataCache.set(t3, e3) : this.unpackedTextureDataCache.set(t3, e3);
          }
          dispose() {
            this.programManager.dispose(), this.textureManager.clearActiveTextures(), this.packedTextureDataCache.forEach((t3) => this.textureManager.releaseTexture(t3, true)), this.packedTextureDataCache = new Map(), this.unpackedTextureDataCache.forEach((t3) => this.textureManager.releaseTexture(t3, true)), this.unpackedTextureDataCache = new Map();
          }
          resolve(t3, e3, n3) {
            const r3 = (0, i2.resolveOperator)(t3, e3, a2.WEBGL_OP_RESOLVE_RULES);
            return {impl: r3.opImpl, context: r3.opInit ? r3.opInit(t3, n3) : t3};
          }
        };
      }, 7769: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.Uint8DataEncoder = e2.RGBAFloatDataEncoder = e2.RedFloat32DataEncoder = void 0;
        const r2 = n2(6231);
        e2.RedFloat32DataEncoder = class {
          constructor(t3, e3 = 1) {
            if (e3 === 1)
              this.internalFormat = t3.R32F, this.format = t3.RED, this.textureType = t3.FLOAT, this.channelSize = e3;
            else {
              if (e3 !== 4)
                throw new Error(`Invalid number of channels: ${e3}`);
              this.internalFormat = t3.RGBA32F, this.format = t3.RGBA, this.textureType = t3.FLOAT, this.channelSize = e3;
            }
          }
          encode(t3, e3) {
            let n3, i2;
            return t3.constructor !== Float32Array && (r2.Logger.warning("Encoder", "data was not of type Float32; creating new Float32Array"), i2 = new Float32Array(t3)), e3 * this.channelSize > t3.length ? (r2.Logger.warning("Encoder", "Source data too small. Allocating larger array"), i2 = t3, n3 = this.allocate(e3 * this.channelSize), i2.forEach((t4, e4) => n3[e4] = t4)) : (i2 = t3, n3 = i2), n3;
          }
          allocate(t3) {
            return new Float32Array(4 * t3);
          }
          decode(t3, e3) {
            return this.channelSize === 1 ? t3.filter((t4, e4) => e4 % 4 == 0).subarray(0, e3) : t3.subarray(0, e3);
          }
        }, e2.RGBAFloatDataEncoder = class {
          constructor(t3, e3 = 1, n3) {
            if (e3 !== 1 && e3 !== 4)
              throw new Error(`Invalid number of channels: ${e3}`);
            this.internalFormat = t3.RGBA, this.format = t3.RGBA, this.channelSize = e3, this.textureType = n3 || t3.FLOAT;
          }
          encode(t3, e3) {
            let n3 = t3;
            return this.channelSize === 1 && (r2.Logger.verbose("Encoder", "Exploding into a larger array"), n3 = this.allocate(e3), t3.forEach((t4, e4) => n3[4 * e4] = t4)), n3;
          }
          allocate(t3) {
            return new Float32Array(4 * t3);
          }
          decode(t3, e3) {
            return this.channelSize === 1 ? t3.filter((t4, e4) => e4 % 4 == 0).subarray(0, e3) : t3.subarray(0, e3);
          }
        }, e2.Uint8DataEncoder = class {
          constructor(t3, e3 = 1) {
            if (this.channelSize = 4, e3 === 1)
              this.internalFormat = t3.ALPHA, this.format = t3.ALPHA, this.textureType = t3.UNSIGNED_BYTE, this.channelSize = e3;
            else {
              if (e3 !== 4)
                throw new Error(`Invalid number of channels: ${e3}`);
              this.internalFormat = t3.RGBA, this.format = t3.RGBA, this.textureType = t3.UNSIGNED_BYTE, this.channelSize = e3;
            }
          }
          encode(t3, e3) {
            return new Uint8Array(t3.buffer, t3.byteOffset, t3.byteLength);
          }
          allocate(t3) {
            return new Uint8Array(t3 * this.channelSize);
          }
          decode(t3, e3) {
            if (t3 instanceof Uint8Array)
              return t3.subarray(0, e3);
            throw new Error(`Invalid array type: ${t3.constructor}`);
          }
        };
      }, 7859: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.getBatchDim = e2.sizeToSquarishShape = e2.getRowsCols = e2.sizeFromShape = e2.isInt = e2.parseAxisParam = e2.squeezeShape = e2.PreferLogicalStrategy = e2.AlwaysKeepOriginalSizeStrategy = void 0;
        const r2 = n2(6231), i2 = n2(2517);
        function o2(t3, e3) {
          const n3 = [], r3 = [], i3 = e3 != null && Array.isArray(e3) && e3.length === 0, o3 = e3 == null || i3 ? null : a2(e3, t3).sort();
          let s3 = 0;
          for (let e4 = 0; e4 < t3.length; ++e4) {
            if (o3 != null) {
              if (o3[s3] === e4 && t3[e4] !== 1)
                throw new Error(`Can't squeeze axis ${e4} since its dim '${t3[e4]}' is not 1`);
              (o3[s3] == null || o3[s3] > e4) && t3[e4] === 1 && (n3.push(t3[e4]), r3.push(e4)), o3[s3] <= e4 && s3++;
            }
            t3[e4] !== 1 && (n3.push(t3[e4]), r3.push(e4));
          }
          return {newShape: n3, keptDims: r3};
        }
        function a2(t3, e3) {
          const n3 = e3.length;
          return t3 = t3 == null ? e3.map((t4, e4) => e4) : [].concat(t3), (0, i2.assert)(t3.every((t4) => t4 >= -n3 && t4 < n3), () => `All values in axis param must be in range [-${n3}, ${n3}) but got axis ${t3}`), (0, i2.assert)(t3.every(s2), () => `All values in axis param must be integers but got axis ${t3}`), t3.map((t4) => t4 < 0 ? n3 + t4 : t4);
        }
        function s2(t3) {
          return t3 % 1 == 0;
        }
        function u2(t3) {
          if (t3.length === 0)
            return 1;
          let e3 = t3[0];
          for (let n3 = 1; n3 < t3.length; n3++)
            e3 *= t3[n3];
          return e3;
        }
        function c2(t3) {
          const e3 = Math.ceil(Math.sqrt(t3));
          return [e3, Math.ceil(t3 / e3)];
        }
        e2.AlwaysKeepOriginalSizeStrategy = class {
          constructor(t3) {
            this.maxTextureSize = t3;
          }
          computeTextureWH(t3, e3) {
            if (t3.length === 0)
              return [1, 1];
            const n3 = this.maxTextureSize;
            if (e3 && e3.breakAxis !== void 0) {
              const i4 = e3.breakAxis >= t3.length ? 1 : t3.slice(e3.breakAxis).reduce((t4, e4) => t4 * e4), o4 = e3.breakAxis <= 0 ? 1 : t3.slice(0, e3.breakAxis).reduce((t4, e4) => t4 * e4);
              if (!(i4 > n3 || o4 > n3))
                return [i4, o4];
              r2.Logger.verbose("TextureLayout", `Given width/height preferences were unattainable: shape:${t3}, breakAxis:${e3.breakAxis}`);
            }
            const i3 = t3.reduce((t4, e4) => t4 * e4);
            let o3 = Math.floor(Math.sqrt(i3));
            for (; o3 < n3 && o3 < i3 && i3 % o3 != 0; o3++)
              ;
            if (o3 >= n3 || i3 % o3 != 0)
              throw new Error(`The given dimensions are outside this GPU's boundaries: ${t3}`);
            return [o3, i3 / o3];
          }
        }, e2.PreferLogicalStrategy = class {
          constructor(t3) {
            this.maxTextureSize = t3;
          }
          computeTextureWH(t3, e3) {
            const n3 = this.computeTexture(t3, e3);
            return e3 && e3.isPacked && (n3[0] /= 2, n3[1] /= 2), e3 && e3.reverseWH ? [n3[1], n3[0]] : n3;
          }
          computeTexture(t3, e3) {
            const n3 = e3 && e3.isPacked;
            if (t3.length === 0)
              return n3 ? [2, 2] : [1, 1];
            let i3 = this.maxTextureSize;
            if (e3 && e3.breakAxis !== void 0) {
              const n4 = e3.breakAxis >= t3.length ? 1 : t3.slice(e3.breakAxis).reduce((t4, e4) => t4 * e4), o3 = e3.breakAxis <= 0 ? 1 : t3.slice(0, e3.breakAxis).reduce((t4, e4) => t4 * e4);
              if (!(n4 > i3 || o3 > i3))
                return [n4, o3];
              r2.Logger.verbose("TextureLayout", `Given width/height preferences were unattainable: shape:${t3}, breakAxis:${e3.breakAxis}`);
            }
            let a3 = t3.slice(0);
            if (n3 && (i3 *= 2, a3 = a3.map((t4, e4) => e4 >= a3.length - 2 ? a3[e4] % 2 == 0 ? a3[e4] : a3[e4] + 1 : a3[e4]), a3.length === 1 && (a3 = [2, a3[0]])), a3.length !== 2) {
              const t4 = o2(a3);
              a3 = t4.newShape;
            }
            const s3 = u2(a3);
            return a3.length <= 1 && s3 <= i3 ? [1, s3] : a3.length === 2 && a3[0] <= i3 && a3[1] <= i3 ? a3 : a3.length === 3 && a3[0] * a3[1] <= i3 && a3[2] <= i3 ? [a3[0] * a3[1], a3[2]] : a3.length === 3 && a3[0] <= i3 && a3[1] * a3[2] <= i3 ? [a3[0], a3[1] * a3[2]] : a3.length === 4 && a3[0] * a3[1] * a3[2] <= i3 && a3[3] <= i3 ? [a3[0] * a3[1] * a3[2], a3[3]] : a3.length === 4 && a3[0] <= i3 && a3[1] * a3[2] * a3[3] <= i3 ? [a3[0], a3[1] * a3[2] * a3[3]] : n3 ? c2(s3 / 4).map((t4) => 2 * t4) : c2(s3);
          }
        }, e2.squeezeShape = o2, e2.parseAxisParam = a2, e2.isInt = s2, e2.sizeFromShape = u2, e2.getRowsCols = function(t3) {
          if (t3.length === 0)
            throw Error("Cannot get rows and columns of an empty shape array.");
          return [t3.length > 1 ? t3[t3.length - 2] : 1, t3[t3.length - 1]];
        }, e2.sizeToSquarishShape = c2, e2.getBatchDim = function(t3, e3 = 2) {
          return u2(t3.slice(0, t3.length - e3));
        };
      }, 4057: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.createTextureLayoutFromShape = e2.calculateTextureWidthAndHeight = e2.createTextureLayoutFromTextureType = void 0;
        const r2 = n2(2517), i2 = n2(2039);
        e2.createTextureLayoutFromTextureType = (t3, n3, r3) => {
          const o2 = r3 === i2.TextureType.unpacked || r3 === i2.TextureType.unpackedReversed ? 1 : 4, a2 = r3 === i2.TextureType.packed, s2 = r3 === i2.TextureType.unpackedReversed || r3 === i2.TextureType.packed, u2 = r3 === i2.TextureType.packedLastDimension ? n3.length - 1 : void 0, c2 = r3 === i2.TextureType.packedLastDimension ? n3.map((t4, e3) => e3 === n3.length - 1 ? 4 * t4 : t4) : void 0;
          return (0, e2.createTextureLayoutFromShape)(t3, n3, o2, c2, {isPacked: a2, reverseWH: s2, breakAxis: u2});
        }, e2.calculateTextureWidthAndHeight = (t3, n3, r3) => {
          const i3 = (0, e2.createTextureLayoutFromTextureType)(t3, n3, r3);
          return [i3.width, i3.height];
        }, e2.createTextureLayoutFromShape = (t3, e3, n3 = 1, i3, o2) => {
          const a2 = !(!o2 || !o2.isPacked), [s2, u2] = t3.computeTextureWH(a2 && i3 || e3, o2), c2 = e3.length;
          let l2 = e3.slice(0);
          if (c2 === 0 && (l2 = [1]), n3 === 1)
            i3 = e3;
          else if (a2) {
            if (n3 !== 4)
              throw new Error("a packed texture must be 4-channel");
            i3 = e3, c2 > 0 && (l2[c2 - 1] = Math.ceil(l2[c2 - 1] / 2)), c2 > 1 && (l2[c2 - 2] = Math.ceil(l2[c2 - 2] / 2));
          } else if (!i3)
            throw new Error("Unpacked shape is needed when using channels > 1");
          return {width: s2, height: u2, channels: n3, isPacked: a2, shape: l2, strides: r2.ShapeUtil.computeStrides(l2), unpackedShape: i3, reversedWH: o2 && o2.reverseWH};
        };
      }, 5702: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.TextureManager = void 0;
        const r2 = n2(6231);
        e2.TextureManager = class {
          constructor(t3, e3, n3, r3) {
            this.glContext = t3, this.layoutStrategy = e3, this.profiler = n3, this.config = r3, this.pendingRead = new Map(), r3.reuseTextures && (this.inUseTextures = new Map(), this.idleTextures = new Map(), this.textureLookup = new Map());
          }
          createTextureFromLayout(t3, e3, n3, i2) {
            const o2 = this.toEncoderType(t3), a2 = this.glContext.getEncoder(o2, e3.channels || 1, i2);
            if (e3.isPacked && i2 === 1)
              throw new Error("not implemented");
            const s2 = e3.width, u2 = e3.height;
            let c2, l2;
            if (this.config.reuseTextures) {
              c2 = `${s2}x${u2}_${a2.format}_${a2.internalFormat}_${a2.textureType}`, l2 = this.inUseTextures.get(c2), l2 || (l2 = [], this.inUseTextures.set(c2, l2));
              const e4 = this.idleTextures.get(c2);
              if (e4 && e4.length > 0) {
                const r3 = e4.pop();
                return l2.push(r3), i2 === 1 && this.glContext.updateTexture(r3, s2, u2, a2, this.toTextureData(t3, n3)), r3;
              }
            }
            r2.Logger.verbose("TextureManager", `Creating new texture of size ${e3.width}x${e3.height}`);
            const p = this.glContext.allocateTexture(s2, u2, a2, this.toTextureData(t3, n3));
            return this.config.reuseTextures && (l2.push(p), this.textureLookup.set(p, c2)), p;
          }
          readTexture(t3, e3, n3) {
            return n3 || (n3 = 1), this.profiler.event("backend", "TextureManager.readTexture", () => {
              const r3 = t3.shape.reduce((t4, e4) => t4 * e4) * n3, i2 = this.glContext.readTexture(t3.texture, t3.width, t3.height, r3, this.toEncoderType(e3), n3);
              return this.toTensorData(e3, i2);
            });
          }
          async readTextureAsync(t3, e3, n3) {
            const r3 = t3.tensor.dataId;
            if (n3 || (n3 = 1), this.pendingRead.has(r3)) {
              const t4 = this.pendingRead.get(r3);
              return new Promise((e4) => t4 == null ? void 0 : t4.push(e4));
            }
            return this.profiler.event("backend", "TextureManager.readTextureAsync", async () => {
              this.pendingRead.set(r3, []);
              const i2 = t3.shape.reduce((t4, e4) => t4 * e4) * n3;
              await this.glContext.createAndWaitForFence();
              const o2 = this.glContext.readTexture(t3.texture, t3.width, t3.height, i2, this.toEncoderType(e3), n3), a2 = this.toTensorData(e3, o2), s2 = this.pendingRead.get(r3);
              return this.pendingRead.delete(r3), s2 == null || s2.forEach((t4) => t4(a2)), a2;
            });
          }
          readUint8TextureAsFloat(t3) {
            return this.profiler.event("backend", "TextureManager.readUint8TextureAsFloat", () => {
              const e3 = t3.shape.reduce((t4, e4) => t4 * e4), n3 = this.glContext.readTexture(t3.texture, t3.width, t3.height, 4 * e3, "byte", 4);
              return new Float32Array(n3.buffer, n3.byteOffset, e3);
            });
          }
          releaseTexture(t3, e3) {
            let n3;
            if (this.config.reuseTextures && (n3 = this.textureLookup.get(t3.texture), n3)) {
              e3 && this.textureLookup.delete(n3);
              const r3 = this.inUseTextures.get(n3);
              if (r3) {
                const e4 = r3.indexOf(t3.texture);
                if (e4 !== -1) {
                  r3.splice(e4, 1);
                  let i2 = this.idleTextures.get(n3);
                  i2 || (i2 = [], this.idleTextures.set(n3, i2)), i2.push(t3.texture);
                }
              }
            }
            n3 && !e3 || (r2.Logger.verbose("TextureManager", `Deleting texture of size ${t3.width}x${t3.height}`), this.glContext.deleteTexture(t3.texture));
          }
          toTensorData(t3, e3) {
            switch (t3) {
              case "int16":
                return e3 instanceof Int16Array ? e3 : Int16Array.from(e3);
              case "int32":
                return e3 instanceof Int32Array ? e3 : Int32Array.from(e3);
              case "int8":
                return e3 instanceof Int8Array ? e3 : Int8Array.from(e3);
              case "uint16":
                return e3 instanceof Uint16Array ? e3 : Uint16Array.from(e3);
              case "uint32":
                return e3 instanceof Uint32Array ? e3 : Uint32Array.from(e3);
              case "uint8":
              case "bool":
                return e3 instanceof Uint8Array ? e3 : Uint8Array.from(e3);
              case "float32":
                return e3 instanceof Float32Array ? e3 : Float32Array.from(e3);
              case "float64":
                return e3 instanceof Float64Array ? e3 : Float64Array.from(e3);
              default:
                throw new Error(`TensorData type ${t3} is not supported`);
            }
          }
          toTextureData(t3, e3) {
            if (e3)
              return e3 instanceof Float32Array ? e3 : new Float32Array(e3);
          }
          toEncoderType(t3) {
            return "float";
          }
          clearActiveTextures() {
            this.glContext.clearActiveTextures();
          }
        };
      }, 2039: (t2, e2) => {
        "use strict";
        var n2;
        Object.defineProperty(e2, "__esModule", {value: true}), e2.TextureType = void 0, (n2 = e2.TextureType || (e2.TextureType = {}))[n2.unpacked = 0] = "unpacked", n2[n2.unpackedReversed = 1] = "unpackedReversed", n2[n2.packed = 2] = "packed", n2[n2.downloadUint8AsFloat = 3] = "downloadUint8AsFloat", n2[n2.packedLastDimension = 4] = "packedLastDimension";
      }, 9390: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.getGlChannels = e2.getCoordsDataType = e2.getSqueezedParams = e2.squeezeInputShape = e2.generateShaderFuncNameFromInputSamplerNameAtOutCoords = e2.generateShaderFuncNameFromInputSamplerName = e2.repeatedTry = e2.getPackedShape = void 0;
        const r2 = n2(2517);
        e2.getPackedShape = function(t3) {
          const e3 = t3.length;
          return t3.slice(0, e3 - 1).concat(t3[e3 - 1] / 4);
        }, e2.repeatedTry = async function(t3, e3 = (t4) => 0, n3) {
          return new Promise((r3, i2) => {
            let o2 = 0;
            const a2 = () => {
              if (t3())
                return void r3();
              o2++;
              const s2 = e3(o2);
              n3 != null && o2 >= n3 ? i2() : setTimeout(a2, s2);
            };
            a2();
          });
        }, e2.generateShaderFuncNameFromInputSamplerName = function(t3) {
          return (0, r2.assert)(t3 !== void 0 && t3.length !== 0, () => "empty string found for sampler name"), "get" + t3.charAt(0).toUpperCase() + t3.slice(1);
        }, e2.generateShaderFuncNameFromInputSamplerNameAtOutCoords = function(t3) {
          return (0, r2.assert)(t3 !== void 0 && t3.length !== 0, () => "empty string found for sampler name"), "get" + t3.charAt(0).toUpperCase() + t3.slice(1) + "AtOutCoords";
        }, e2.squeezeInputShape = function(t3, e3) {
          let n3 = JSON.parse(JSON.stringify(t3));
          return n3 = e3, n3;
        }, e2.getSqueezedParams = function(t3, e3) {
          return e3.map((e4) => t3[e4]).join(", ");
        }, e2.getCoordsDataType = function(t3) {
          if (t3 <= 1)
            return "int";
          if (t3 === 2)
            return "ivec2";
          if (t3 === 3)
            return "ivec3";
          if (t3 === 4)
            return "ivec4";
          if (t3 === 5)
            return "ivec5";
          if (t3 === 6)
            return "ivec6";
          throw Error(`GPU for rank ${t3} is not yet supported`);
        }, e2.getGlChannels = function(t3 = 6) {
          return ["x", "y", "z", "w", "u", "v"].slice(0, t3);
        };
      }, 7305: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.createNewWebGLContext = e2.createWebGLContext = void 0;
        const r2 = n2(6231), i2 = n2(1713), o2 = {};
        function a2(t3) {
          const e3 = function() {
            if (typeof document == "undefined") {
              if (typeof OffscreenCanvas == "undefined")
                throw new TypeError("failed to create canvas: OffscreenCanvas is not supported");
              return new OffscreenCanvas(1, 1);
            }
            const t4 = document.createElement("canvas");
            return t4.width = 1, t4.height = 1, t4;
          }();
          let n3;
          const o3 = {alpha: false, depth: false, antialias: false, stencil: false, preserveDrawingBuffer: false, premultipliedAlpha: false, failIfMajorPerformanceCaveat: false};
          if ((!t3 || t3 === "webgl2") && (n3 = e3.getContext("webgl2", o3), n3))
            try {
              return new i2.WebGLContext(n3, 2);
            } catch (t4) {
              r2.Logger.warning("GlContextFactory", `failed to create WebGLContext using contextId 'webgl2'. Error: ${t4}`);
            }
          if ((!t3 || t3 === "webgl") && (n3 = e3.getContext("webgl", o3) || e3.getContext("experimental-webgl", o3), n3))
            try {
              return new i2.WebGLContext(n3, 1);
            } catch (t4) {
              r2.Logger.warning("GlContextFactory", `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${t4}`);
            }
          throw new Error("WebGL is not supported");
        }
        e2.createWebGLContext = function t3(e3) {
          let n3;
          e3 && e3 !== "webgl2" || !("webgl2" in o2) ? e3 && e3 !== "webgl" || !("webgl" in o2) || (n3 = o2.webgl) : n3 = o2.webgl2, n3 = n3 || a2(e3), e3 = e3 || n3.version === 1 ? "webgl" : "webgl2";
          const r3 = n3.gl;
          return o2[e3] = n3, r3.isContextLost() ? (delete o2[e3], t3(e3)) : (r3.disable(r3.DEPTH_TEST), r3.disable(r3.STENCIL_TEST), r3.disable(r3.BLEND), r3.disable(r3.DITHER), r3.disable(r3.POLYGON_OFFSET_FILL), r3.disable(r3.SAMPLE_COVERAGE), r3.enable(r3.SCISSOR_TEST), r3.enable(r3.CULL_FACE), r3.cullFace(r3.BACK), n3);
        }, e2.createNewWebGLContext = a2;
      }, 1713: function(t2, e2, n2) {
        "use strict";
        var r2 = this && this.__createBinding || (Object.create ? function(t3, e3, n3, r3) {
          r3 === void 0 && (r3 = n3);
          var i3 = Object.getOwnPropertyDescriptor(e3, n3);
          i3 && !("get" in i3 ? !e3.__esModule : i3.writable || i3.configurable) || (i3 = {enumerable: true, get: function() {
            return e3[n3];
          }}), Object.defineProperty(t3, r3, i3);
        } : function(t3, e3, n3, r3) {
          r3 === void 0 && (r3 = n3), t3[r3] = e3[n3];
        }), i2 = this && this.__setModuleDefault || (Object.create ? function(t3, e3) {
          Object.defineProperty(t3, "default", {enumerable: true, value: e3});
        } : function(t3, e3) {
          t3.default = e3;
        }), o2 = this && this.__importStar || function(t3) {
          if (t3 && t3.__esModule)
            return t3;
          var e3 = {};
          if (t3 != null)
            for (var n3 in t3)
              n3 !== "default" && Object.prototype.hasOwnProperty.call(t3, n3) && r2(e3, t3, n3);
          return i2(e3, t3), e3;
        };
        Object.defineProperty(e2, "__esModule", {value: true}), e2.WebGLContext = e2.linearSearchLastTrue = void 0;
        const a2 = n2(1670), s2 = o2(n2(7769)), u2 = n2(9390);
        function c2(t3) {
          let e3 = 0;
          for (; e3 < t3.length && t3[e3](); ++e3)
            ;
          return e3 - 1;
        }
        e2.linearSearchLastTrue = c2, e2.WebGLContext = class {
          constructor(t3, e3) {
            this.frameBufferBound = false, this.itemsToPoll = [], this.gl = t3, this.version = e3, this.getExtensions(), this.vertexbuffer = this.createVertexbuffer(), this.framebuffer = this.createFramebuffer(), this.queryVitalParameters();
          }
          allocateTexture(t3, e3, n3, r3) {
            const i3 = this.gl, o3 = i3.createTexture();
            i3.bindTexture(i3.TEXTURE_2D, o3), i3.texParameteri(i3.TEXTURE_2D, i3.TEXTURE_MIN_FILTER, i3.NEAREST), i3.texParameteri(i3.TEXTURE_2D, i3.TEXTURE_MAG_FILTER, i3.NEAREST), i3.texParameteri(i3.TEXTURE_2D, i3.TEXTURE_WRAP_S, i3.CLAMP_TO_EDGE), i3.texParameteri(i3.TEXTURE_2D, i3.TEXTURE_WRAP_T, i3.CLAMP_TO_EDGE);
            const a3 = r3 ? n3.encode(r3, t3 * e3) : null;
            return i3.texImage2D(i3.TEXTURE_2D, 0, n3.internalFormat, t3, e3, 0, n3.format, n3.textureType, a3), this.checkError(), o3;
          }
          updateTexture(t3, e3, n3, r3, i3) {
            const o3 = this.gl;
            o3.bindTexture(o3.TEXTURE_2D, t3);
            const a3 = r3.encode(i3, e3 * n3);
            o3.texSubImage2D(o3.TEXTURE_2D, 0, 0, 0, e3, n3, r3.format, r3.textureType, a3), this.checkError();
          }
          attachFramebuffer(t3, e3, n3) {
            const r3 = this.gl;
            r3.bindTexture(r3.TEXTURE_2D, t3), r3.bindFramebuffer(r3.FRAMEBUFFER, this.framebuffer), r3.framebufferTexture2D(r3.FRAMEBUFFER, r3.COLOR_ATTACHMENT0, r3.TEXTURE_2D, t3, 0), this.checkError(), r3.viewport(0, 0, e3, n3), r3.scissor(0, 0, e3, n3);
          }
          readTexture(t3, e3, n3, r3, i3, o3) {
            const a3 = this.gl;
            o3 || (o3 = 1), this.frameBufferBound || this.attachFramebuffer(t3, e3, n3);
            const s3 = this.getEncoder(i3, o3), u3 = s3.allocate(e3 * n3);
            return a3.bindTexture(a3.TEXTURE_2D, t3), a3.framebufferTexture2D(a3.FRAMEBUFFER, a3.COLOR_ATTACHMENT0, a3.TEXTURE_2D, t3, 0), a3.readPixels(0, 0, e3, n3, a3.RGBA, s3.textureType, u3), this.checkError(), s3.decode(u3, r3);
          }
          isFramebufferReady() {
            return true;
          }
          getActiveTexture() {
            const t3 = this.gl;
            return "TEXTURE" + (t3.getParameter(this.gl.ACTIVE_TEXTURE) - t3.TEXTURE0);
          }
          getTextureBinding() {
            return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);
          }
          getFramebufferBinding() {
            return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);
          }
          setVertexAttributes(t3, e3) {
            const n3 = this.gl;
            n3.vertexAttribPointer(t3, 3, n3.FLOAT, false, 20, 0), n3.enableVertexAttribArray(t3), e3 !== -1 && (n3.vertexAttribPointer(e3, 2, n3.FLOAT, false, 20, 12), n3.enableVertexAttribArray(e3)), this.checkError();
          }
          createProgram(t3, e3) {
            const n3 = this.gl, r3 = n3.createProgram();
            return n3.attachShader(r3, t3), n3.attachShader(r3, e3), n3.linkProgram(r3), r3;
          }
          compileShader(t3, e3) {
            const n3 = this.gl, r3 = n3.createShader(e3);
            if (!r3)
              throw new Error(`createShader() returned null with type ${e3}`);
            if (n3.shaderSource(r3, t3), n3.compileShader(r3), n3.getShaderParameter(r3, n3.COMPILE_STATUS) === false)
              throw new Error(`Failed to compile shader: ${n3.getShaderInfoLog(r3)}
Shader source:
${t3}`);
            return r3;
          }
          deleteShader(t3) {
            this.gl.deleteShader(t3);
          }
          bindTextureToUniform(t3, e3, n3) {
            const r3 = this.gl;
            r3.activeTexture(r3.TEXTURE0 + e3), this.checkError(), r3.bindTexture(r3.TEXTURE_2D, t3), this.checkError(), r3.uniform1i(n3, e3), this.checkError();
          }
          draw() {
            this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4), this.checkError();
          }
          checkError() {
            if (a2.env.debug) {
              const t3 = this.gl, e3 = t3.getError();
              let n3 = "";
              switch (e3) {
                case t3.NO_ERROR:
                  return;
                case t3.INVALID_ENUM:
                  n3 = "INVALID_ENUM";
                  break;
                case t3.INVALID_VALUE:
                  n3 = "INVALID_VALUE";
                  break;
                case t3.INVALID_OPERATION:
                  n3 = "INVALID_OPERATION";
                  break;
                case t3.INVALID_FRAMEBUFFER_OPERATION:
                  n3 = "INVALID_FRAMEBUFFER_OPERATION";
                  break;
                case t3.OUT_OF_MEMORY:
                  n3 = "OUT_OF_MEMORY";
                  break;
                case t3.CONTEXT_LOST_WEBGL:
                  n3 = "CONTEXT_LOST_WEBGL";
                  break;
                default:
                  n3 = `Unknown WebGL Error: ${e3.toString(16)}`;
              }
              throw new Error(n3);
            }
          }
          deleteTexture(t3) {
            this.gl.deleteTexture(t3);
          }
          deleteProgram(t3) {
            this.gl.deleteProgram(t3);
          }
          getEncoder(t3, e3, n3 = 0) {
            if (this.version === 2)
              return new s2.RedFloat32DataEncoder(this.gl, e3);
            switch (t3) {
              case "float":
                return n3 === 1 || this.isRenderFloat32Supported ? new s2.RGBAFloatDataEncoder(this.gl, e3) : new s2.RGBAFloatDataEncoder(this.gl, e3, this.textureHalfFloatExtension.HALF_FLOAT_OES);
              case "int":
                throw new Error("not implemented");
              case "byte":
                return new s2.Uint8DataEncoder(this.gl, e3);
              default:
                throw new Error(`Invalid dataType: ${t3}`);
            }
          }
          clearActiveTextures() {
            const t3 = this.gl;
            for (let e3 = 0; e3 < this.maxTextureImageUnits; ++e3)
              t3.activeTexture(t3.TEXTURE0 + e3), t3.bindTexture(t3.TEXTURE_2D, null);
          }
          dispose() {
            if (this.disposed)
              return;
            const t3 = this.gl;
            t3.bindFramebuffer(t3.FRAMEBUFFER, null), t3.deleteFramebuffer(this.framebuffer), t3.bindBuffer(t3.ARRAY_BUFFER, null), t3.deleteBuffer(this.vertexbuffer), t3.bindBuffer(t3.ELEMENT_ARRAY_BUFFER, null), t3.finish(), this.disposed = true;
          }
          createDefaultGeometry() {
            return new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
          }
          createVertexbuffer() {
            const t3 = this.gl, e3 = t3.createBuffer();
            if (!e3)
              throw new Error("createBuffer() returned null");
            const n3 = this.createDefaultGeometry();
            return t3.bindBuffer(t3.ARRAY_BUFFER, e3), t3.bufferData(t3.ARRAY_BUFFER, n3, t3.STATIC_DRAW), this.checkError(), e3;
          }
          createFramebuffer() {
            const t3 = this.gl.createFramebuffer();
            if (!t3)
              throw new Error("createFramebuffer returned null");
            return t3;
          }
          queryVitalParameters() {
            const t3 = this.gl;
            if (this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer(), this.isRenderFloat32Supported = this.checkRenderFloat32(), this.isFloat32DownloadSupported = this.checkFloat32Download(), this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported)
              throw new Error("both float32 and float16 TextureType are not supported");
            this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend(), this.maxTextureSize = t3.getParameter(t3.MAX_TEXTURE_SIZE), this.maxTextureImageUnits = t3.getParameter(t3.MAX_TEXTURE_IMAGE_UNITS), this.version;
          }
          getExtensions() {
            this.version === 2 ? (this.colorBufferFloatExtension = this.gl.getExtension("EXT_color_buffer_float"), this.disjointTimerQueryWebgl2Extension = this.gl.getExtension("EXT_disjoint_timer_query_webgl2")) : (this.textureFloatExtension = this.gl.getExtension("OES_texture_float"), this.textureHalfFloatExtension = this.gl.getExtension("OES_texture_half_float"));
          }
          checkFloatTextureAttachableToFrameBuffer() {
            const t3 = this.gl, e3 = t3.createTexture();
            t3.bindTexture(t3.TEXTURE_2D, e3);
            const n3 = this.version === 2 ? t3.RGBA32F : t3.RGBA;
            t3.texImage2D(t3.TEXTURE_2D, 0, n3, 1, 1, 0, t3.RGBA, t3.FLOAT, null);
            const r3 = t3.createFramebuffer();
            t3.bindFramebuffer(t3.FRAMEBUFFER, r3), t3.framebufferTexture2D(t3.FRAMEBUFFER, t3.COLOR_ATTACHMENT0, t3.TEXTURE_2D, e3, 0);
            const i3 = t3.checkFramebufferStatus(t3.FRAMEBUFFER) === t3.FRAMEBUFFER_COMPLETE;
            return t3.bindTexture(t3.TEXTURE_2D, null), t3.bindFramebuffer(t3.FRAMEBUFFER, null), t3.deleteTexture(e3), t3.deleteFramebuffer(r3), i3;
          }
          checkRenderFloat32() {
            if (this.version === 2) {
              if (!this.colorBufferFloatExtension)
                return false;
            } else if (!this.textureFloatExtension)
              return false;
            return this.isFloatTextureAttachableToFrameBuffer;
          }
          checkFloat32Download() {
            if (this.version === 2) {
              if (!this.colorBufferFloatExtension)
                return false;
            } else {
              if (!this.textureFloatExtension)
                return false;
              if (!this.gl.getExtension("WEBGL_color_buffer_float"))
                return false;
            }
            return this.isFloatTextureAttachableToFrameBuffer;
          }
          checkFloat32Blend() {
            const t3 = this.gl;
            let e3, n3, r3, i3, o3;
            try {
              e3 = t3.createTexture(), n3 = t3.createFramebuffer(), t3.bindTexture(t3.TEXTURE_2D, e3);
              const a3 = this.version === 2 ? t3.RGBA32F : t3.RGBA;
              return t3.texImage2D(t3.TEXTURE_2D, 0, a3, 1, 1, 0, t3.RGBA, t3.FLOAT, null), t3.bindFramebuffer(t3.FRAMEBUFFER, n3), t3.framebufferTexture2D(t3.FRAMEBUFFER, t3.COLOR_ATTACHMENT0, t3.TEXTURE_2D, e3, 0), t3.enable(t3.BLEND), r3 = t3.createShader(t3.VERTEX_SHADER), !!r3 && (t3.shaderSource(r3, "void main(){}"), t3.compileShader(r3), i3 = t3.createShader(t3.FRAGMENT_SHADER), !!i3 && (t3.shaderSource(i3, "precision highp float;void main(){gl_FragColor=vec4(0.5);}"), t3.compileShader(i3), o3 = t3.createProgram(), !!o3 && (t3.attachShader(o3, r3), t3.attachShader(o3, i3), t3.linkProgram(o3), t3.useProgram(o3), t3.drawArrays(t3.POINTS, 0, 1), t3.getError() === t3.NO_ERROR)));
            } finally {
              t3.disable(t3.BLEND), o3 && t3.deleteProgram(o3), r3 && t3.deleteShader(r3), i3 && t3.deleteShader(i3), n3 && (t3.bindFramebuffer(t3.FRAMEBUFFER, null), t3.deleteFramebuffer(n3)), e3 && (t3.bindTexture(t3.TEXTURE_2D, null), t3.deleteTexture(e3));
            }
          }
          beginTimer() {
            if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {
              const t3 = this.gl, e3 = this.disjointTimerQueryWebgl2Extension, n3 = t3.createQuery();
              return t3.beginQuery(e3.TIME_ELAPSED_EXT, n3), n3;
            }
            throw new Error("WebGL1 profiling currently not supported.");
          }
          endTimer() {
            if (this.version !== 2 || !this.disjointTimerQueryWebgl2Extension)
              throw new Error("WebGL1 profiling currently not supported");
            {
              const t3 = this.gl, e3 = this.disjointTimerQueryWebgl2Extension;
              t3.endQuery(e3.TIME_ELAPSED_EXT);
            }
          }
          isTimerResultAvailable(t3) {
            let e3 = false, n3 = false;
            if (this.version !== 2 || !this.disjointTimerQueryWebgl2Extension)
              throw new Error("WebGL1 profiling currently not supported");
            {
              const r3 = this.gl, i3 = this.disjointTimerQueryWebgl2Extension;
              e3 = r3.getQueryParameter(t3, r3.QUERY_RESULT_AVAILABLE), n3 = r3.getParameter(i3.GPU_DISJOINT_EXT);
            }
            return e3 && !n3;
          }
          getTimerResult(t3) {
            let e3 = 0;
            if (this.version !== 2)
              throw new Error("WebGL1 profiling currently not supported");
            {
              const n3 = this.gl;
              e3 = n3.getQueryParameter(t3, n3.QUERY_RESULT), n3.deleteQuery(t3);
            }
            return e3 / 1e6;
          }
          async waitForQueryAndGetTime(t3) {
            return await (0, u2.repeatedTry)(() => this.isTimerResultAvailable(t3)), this.getTimerResult(t3);
          }
          async createAndWaitForFence() {
            const t3 = this.createFence(this.gl);
            return this.pollFence(t3);
          }
          createFence(t3) {
            let e3;
            const n3 = t3, r3 = n3.fenceSync(n3.SYNC_GPU_COMMANDS_COMPLETE, 0);
            return t3.flush(), e3 = r3 === null ? () => true : () => {
              const t4 = n3.clientWaitSync(r3, 0, 0);
              return t4 === n3.ALREADY_SIGNALED || t4 === n3.CONDITION_SATISFIED;
            }, {query: r3, isFencePassed: e3};
          }
          async pollFence(t3) {
            return new Promise((e3) => {
              this.addItemToPoll(() => t3.isFencePassed(), () => e3());
            });
          }
          pollItems() {
            const t3 = c2(this.itemsToPoll.map((t4) => t4.isDoneFn));
            for (let e3 = 0; e3 <= t3; ++e3) {
              const {resolveFn: t4} = this.itemsToPoll[e3];
              t4();
            }
            this.itemsToPoll = this.itemsToPoll.slice(t3 + 1);
          }
          async addItemToPoll(t3, e3) {
            this.itemsToPoll.push({isDoneFn: t3, resolveFn: e3}), this.itemsToPoll.length > 1 || await (0, u2.repeatedTry)(() => (this.pollItems(), this.itemsToPoll.length === 0));
          }
        };
      }, 1036: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.ExecutionPlan = void 0;
        const r2 = n2(6231);
        class i2 {
          constructor(t3, e3) {
            this.op = t3, this.node = e3;
          }
        }
        e2.ExecutionPlan = class {
          constructor(t3, e3, n3) {
            this.graph = t3, this.profiler = n3, this.initialize(e3);
          }
          initialize(t3) {
            this.profiler.event("session", "ExecutionPlan.initialize", () => {
              const e3 = this.graph.getNodes();
              if (e3.length !== t3.length)
                throw new Error("The size of nodes and OPs do not match.");
              this._ops = t3.map((t4, n3) => new i2(t4, e3[n3])), this.reset(), this._starter = [], this._ops.forEach((t4, e4) => {
                let n3 = true;
                for (const e5 of t4.node.inputs)
                  if (!this._values[e5] && this.graph.getInputIndices().indexOf(e5) === -1) {
                    n3 = false;
                    break;
                  }
                n3 && this._starter.push(e4);
              });
            });
          }
          reset() {
            this._values = this.graph.getValues().map((t3) => t3.tensor);
          }
          async execute(t3, e3) {
            return this.profiler.event("session", "ExecutionPlan.execute", async () => {
              this.reset();
              const n3 = t3.createInferenceHandler(), i3 = this.graph.getInputIndices();
              if (e3.length !== i3.length)
                throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${e3.length} expected: ${i3.length}`);
              e3.forEach((t4, e4) => {
                const n4 = i3[e4];
                this._values[n4] = t4;
              });
              const o2 = this._starter.slice(0), a2 = this.graph.getValues(), s2 = this.graph.getNodes();
              let u2 = 0;
              for (; u2 < o2.length; ) {
                const t4 = o2[u2++], e4 = this._ops[t4], i4 = e4.node.inputs.map((t5) => this._values[t5]);
                if (i4.indexOf(void 0) !== -1)
                  throw new Error(`unresolved input detected: op: ${e4.node}`);
                const c3 = i4;
                r2.Logger.verbose("ExecPlan", `Runing op:${e4.node.name} (${c3.map((t5, n4) => `'${e4.node.inputs[n4]}': ${t5.type}[${t5.dims.join(",")}]`).join(", ")})`);
                const l2 = await this.profiler.event("node", e4.node.name, async () => e4.op.impl(n3, c3, e4.op.context));
                if (l2.length !== e4.node.outputs.length)
                  throw new Error("the size of output does not match model definition.");
                l2.forEach((t5, n4) => {
                  const r3 = e4.node.outputs[n4];
                  if (this._values[r3])
                    throw new Error(`output [${r3}] already has value: op:${e4.node.name}`);
                  this._values[r3] = t5;
                });
                const p = new Set();
                l2.forEach((t5, n4) => {
                  const r3 = e4.node.outputs[n4];
                  for (const t6 of a2[r3].to) {
                    const e5 = s2[t6];
                    let n5 = true;
                    for (const t7 of e5.inputs)
                      if (!this._values[t7]) {
                        n5 = false;
                        break;
                      }
                    n5 && p.add(t6);
                  }
                }), o2.push(...p);
              }
              const c2 = [];
              for (let t4 = 0; t4 < this.graph.getOutputIndices().length; t4++) {
                const e4 = this.graph.getOutputIndices()[t4], n4 = this._values[e4];
                if (n4 === void 0)
                  throw new Error(`required output [${e4}] does not have value`);
                e4 === 0 ? await n4.getData() : n4.data, c2.push(n4);
              }
              return r2.Logger.verbose("ExecPlan", "disposing of inferenceHandler"), n3.dispose(), c2;
            });
          }
        };
      }, 7070: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.Graph = void 0;
        const r2 = n2(1446), i2 = n2(7778), o2 = n2(9395), a2 = n2(9162), s2 = n2(2517);
        var u2 = o2.onnxruntime.experimental.fbs;
        e2.Graph = {from: (t3, e3) => new p(t3, e3)};
        class c2 {
          constructor(t3) {
            this._from = void 0, this._to = [], this.tensor = void 0, this.type = void 0, t3 && (this.type = s2.ProtoUtil.tensorValueTypeFromProto(t3.type.tensorType));
          }
          get from() {
            return this._from;
          }
          get to() {
            return this._to;
          }
        }
        class l2 {
          constructor(t3, e3) {
            t3 instanceof r2.onnx.NodeProto ? (this.name = t3.name, this.opType = t3.opType, this.attributes = new i2.Attribute(t3.attribute)) : t3 instanceof u2.Node && (this.name = e3 != null ? e3 : t3.name(), this.opType = t3.opType(), this.attributes = new i2.Attribute(s2.ProtoUtil.tensorAttributesFromORTFormat(t3))), this.inputs = [], this.outputs = [], this.executeNode = true;
          }
        }
        class p {
          constructor(t3, e3) {
            if (!t3)
              throw new TypeError("graph is empty");
            this.buildGraph(t3), this.transformGraph(e3), this.checkIsAcyclic();
          }
          getInputIndices() {
            return this._allInputIndices;
          }
          getInputNames() {
            return this._allInputNames;
          }
          getOutputIndices() {
            return this._allOutputIndices;
          }
          getOutputNames() {
            return this._allOutputNames;
          }
          getValues() {
            return this._allData;
          }
          getNodes() {
            return this._nodes;
          }
          buildGraph(t3) {
            if (t3 instanceof r2.onnx.GraphProto)
              this.buildGraphFromOnnxFormat(t3);
            else {
              if (!(t3 instanceof u2.Graph))
                throw new TypeError("Graph type is not supported.");
              this.buildGraphFromOrtFormat(t3);
            }
          }
          buildGraphFromOnnxFormat(t3) {
            const e3 = new Map();
            this._allData = [], this._allInputIndices = [], this._allInputNames = [], this._allOutputIndices = [], this._allOutputNames = [], this._nodes = [];
            const n3 = new Map();
            if (!t3.input)
              throw new Error("missing information in graph: input");
            const r3 = [];
            for (const n4 of t3.input) {
              if (e3.has(n4.name))
                throw new Error(`duplicated input name: ${n4.name}`);
              const t4 = this._allData.push(new c2(n4)) - 1;
              e3.set(n4.name, t4), r3.push(n4.name);
            }
            if (!t3.initializer)
              throw new Error("missing information in graph: initializer");
            for (const n4 of t3.initializer) {
              let t4 = e3.get(n4.name);
              if (t4 === void 0) {
                const r4 = new c2();
                r4.type = {shape: {dims: s2.ProtoUtil.tensorDimsFromProto(n4.dims)}, tensorType: s2.ProtoUtil.tensorDataTypeFromProto(n4.dataType)}, t4 = this._allData.push(r4) - 1, e3.set(n4.name, t4);
              }
              this._allData[t4]._from = -1, this._allData[t4].tensor = a2.Tensor.fromProto(n4);
            }
            for (let t4 = 0; t4 < this._allData.length; t4++)
              this._allData[t4].tensor || (this._allInputIndices.push(t4), this._allInputNames.push(r3[t4]));
            if (!t3.output)
              throw new Error("missing information in graph: output");
            for (const n4 of t3.output) {
              if (e3.has(n4.name))
                throw new Error(`duplicated output name: ${n4.name}`);
              const t4 = this._allData.push(new c2(n4)) - 1;
              e3.set(n4.name, t4), this._allOutputIndices.push(t4), this._allOutputNames.push(n4.name);
            }
            if (!t3.node)
              throw new Error("missing information in graph: node");
            for (const e4 of t3.node) {
              if (!e4.name)
                for (let t5 = 0; ; t5++) {
                  const r4 = `unnamed_${e4.opType}_${t5}`;
                  if (!n3.has(r4)) {
                    e4.name = r4;
                    break;
                  }
                }
              if (n3.has(e4.name))
                throw new Error(`duplicated node name: ${e4.name}`);
              const t4 = this._nodes.push(new l2(e4)) - 1;
              n3.set(e4.name, t4);
            }
            for (let n4 = 0; n4 < this._nodes.length; n4++) {
              const r4 = this._nodes[n4], i3 = t3.node[n4];
              if (!i3.output)
                throw new Error(`missing output for node: ${i3.name}`);
              for (const t4 of i3.output) {
                let o3 = e3.get(t4);
                if (o3 === void 0 && (o3 = this._allData.push(new c2()) - 1, e3.set(t4, o3)), r4.outputs.push(o3), this._allData[o3]._from !== void 0)
                  throw new Error(`multiple nodes output to one data value: ${o3}`);
                if (this._allData[o3]._from = n4, i3.opType === "Constant") {
                  if (!i3.attribute || i3.attribute.length !== 1 || !i3.attribute[0].t)
                    throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");
                  if (!i3.output || i3.output.length !== 1)
                    throw new Error("missing output or incorrect number of outputs for this Constant operator");
                  r4.outputs.pop(), r4.executeNode = false, this._allData[o3]._from = -1, this._allData[o3].tensor = a2.Tensor.fromProto(i3.attribute[0].t);
                }
              }
            }
            for (let n4 = 0; n4 < this._nodes.length; n4++) {
              const r4 = this._nodes[n4], i3 = t3.node[n4];
              if (!i3.input)
                throw new Error(`missing input for node: ${i3.name}`);
              for (const t4 of i3.input) {
                const o3 = e3.get(t4);
                if (o3 === void 0) {
                  if (t4 === "" && i3.input.length === 3 && i3.opType === "Resize")
                    continue;
                  throw new Error(`unrecognized input '${t4}' for node: ${i3.name}`);
                }
                r4.inputs.push(o3), this._allData[o3]._to.push(n4);
              }
            }
            return true;
          }
          buildGraphFromOrtFormat(t3) {
            var e3, n3, r3;
            const i3 = new Map();
            this._allData = [], this._allInputIndices = [], this._allInputNames = [], this._allOutputIndices = [], this._allOutputNames = [], this._nodes = [];
            const o3 = new Map(), p2 = [];
            for (let o4 = 0; o4 < t3.inputsLength(); o4++) {
              const a3 = t3.inputs(o4);
              if (i3.has(a3))
                throw new Error(`duplicated input name: ${a3}`);
              for (let o5 = 0; o5 < t3.nodeArgsLength(); o5++)
                if (((e3 = t3.nodeArgs(o5)) === null || e3 === void 0 ? void 0 : e3.name()) === a3) {
                  const e4 = new c2();
                  if (((r3 = (n3 = t3.nodeArgs(o5)) === null || n3 === void 0 ? void 0 : n3.type()) === null || r3 === void 0 ? void 0 : r3.valueType()) !== u2.TypeInfoValue.tensor_type)
                    throw new Error("Unexpected value type for the nodeArg.");
                  const l3 = t3.nodeArgs(o5).type().value(new u2.TensorTypeAndShape()), f = s2.ProtoUtil.tensorDataTypeFromProto(l3.elemType()), d2 = l3.shape(), h2 = [];
                  for (let t4 = 0; t4 < d2.dimLength(); t4++)
                    h2.push(s2.LongUtil.longToNumber(d2.dim(t4).value().dimValue()));
                  e4.type = {shape: {dims: h2}, tensorType: f};
                  const g2 = this._allData.push(e4) - 1;
                  i3.set(a3, g2), p2.push(a3);
                }
            }
            for (let e4 = 0; e4 < t3.initializersLength(); e4++) {
              const n4 = t3.initializers(e4);
              let r4 = i3.get(n4.name());
              if (r4 === void 0) {
                const t4 = new c2(), e5 = s2.ProtoUtil.tensorDimsFromORTFormat(n4), o4 = s2.ProtoUtil.tensorDataTypeFromProto(n4.dataType());
                t4.type = {shape: {dims: e5}, tensorType: o4}, r4 = this._allData.push(t4) - 1, i3.set(n4.name(), r4);
              }
              this._allData[r4]._from = -1, this._allData[r4].tensor = a2.Tensor.fromOrtTensor(n4);
            }
            for (let t4 = 0; t4 < this._allData.length; t4++)
              this._allData[t4].tensor || (this._allInputIndices.push(t4), this._allInputNames.push(p2[t4]));
            for (let e4 = 0; e4 < t3.outputsLength(); e4++) {
              const n4 = t3.outputs(e4);
              if (i3.has(n4))
                throw new Error(`duplicated output name: ${n4}`);
              const r4 = this._allData.push(new c2()) - 1;
              i3.set(n4, r4), this._allOutputIndices.push(r4), this._allOutputNames.push(n4);
            }
            if (!t3.nodes)
              throw new Error("missing information in graph: node");
            for (let e4 = 0; e4 < t3.nodesLength(); e4++) {
              const n4 = t3.nodes(e4);
              let r4 = n4.name();
              if (!r4)
                for (let t4 = 0; r4 = `unnamed_${n4.opType()}_${t4}`, o3.has(r4); t4++)
                  ;
              if (o3.has(r4))
                throw new Error(`duplicated node name: ${r4}`);
              const i4 = this._nodes.push(new l2(n4, r4)) - 1;
              o3.set(r4, i4);
            }
            for (let e4 = 0; e4 < this._nodes.length; e4++) {
              const n4 = this._nodes[e4], r4 = t3.nodes(e4);
              if (r4 == null)
                throw new Error(`No node exists at index ${e4}`);
              if ((r4 == null ? void 0 : r4.outputsLength()) === 0)
                throw new Error(`missing output for node: ${r4.name}`);
              for (let t4 = 0; t4 < (r4 == null ? void 0 : r4.outputsLength()); t4++) {
                const o4 = r4 == null ? void 0 : r4.outputs(t4);
                let s3 = i3.get(o4);
                if (s3 === void 0 && (s3 = this._allData.push(new c2()) - 1, i3.set(o4, s3)), n4.outputs.push(s3), this._allData[s3]._from !== void 0)
                  throw new Error(`multiple nodes output to one data value: ${s3}`);
                if (this._allData[s3]._from = e4, r4.opType() === "Constant") {
                  if (r4.attributesLength() !== 1 || !r4.attributes(0).t())
                    throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");
                  if (r4.outputsLength() !== 1)
                    throw new Error("missing output or incorrect number of outputs for this Constant operator");
                  n4.outputs.pop(), n4.executeNode = false, this._allData[s3]._from = -1, this._allData[s3].tensor = a2.Tensor.fromOrtTensor(r4.attributes(0).t());
                }
              }
            }
            for (let e4 = 0; e4 < this._nodes.length; e4++) {
              const n4 = this._nodes[e4], r4 = t3.nodes(e4);
              if (r4.inputsLength() === 0)
                throw new Error(`missing input for node: ${r4.name}`);
              for (let t4 = 0; t4 < r4.inputsLength(); t4++) {
                const o4 = r4.inputs(t4), a3 = i3.get(o4);
                if (a3 === void 0)
                  throw new Error(`unrecognized input '${o4}' for node: ${r4.name()}`);
                n4.inputs.push(a3), this._allData[a3]._to.push(e4);
              }
            }
          }
          checkIsAcyclic() {
            const t3 = new Set();
            this._allInputIndices.forEach((e4) => {
              this._allData[e4]._to.forEach((e5) => {
                t3.add(e5);
              });
            });
            const e3 = Array.from(t3), n3 = new Array(this._nodes.length).fill("white");
            for (; e3.length > 0; ) {
              const t4 = e3.pop();
              n3[t4] === "gray" ? n3[t4] = "black" : (e3.push(t4), n3[t4] = "gray", this._nodes[t4].outputs.forEach((r3) => {
                const i3 = this._allData[r3];
                if (i3.tensor !== void 0)
                  throw new Error("node outputs should not be initialized");
                if (i3._from !== t4)
                  throw new Error("from property of the Value object doesn't match index of Node being processed");
                i3._to.forEach((t5) => {
                  if (n3[t5] === "gray")
                    throw new Error("model graph is cyclic");
                  n3[t5] === "white" && e3.push(t5);
                });
              }));
            }
          }
          transformGraph(t3) {
            this.removeAllIdentityNodes(), this.removeAllDropoutNodes(), this.fuseConvActivationNodes(), t3 && t3.transformGraph(this), this.finalizeGraph();
          }
          finalizeGraph() {
            let t3 = 0;
            for (let e3 = 0; e3 < this._nodes.length; e3++)
              this._nodes[e3].executeNode ? t3 > 0 && (this._nodes[e3].inputs.forEach((n3) => {
                const r3 = this._allData[n3]._to.indexOf(e3 + t3);
                r3 !== -1 && (this._allData[n3]._to[r3] = e3);
              }), this._nodes[e3].outputs.forEach((n3) => {
                this._allData[n3]._from && this._allData[n3]._from === e3 + t3 && (this._allData[n3]._from = e3);
              })) : (t3++, this._nodes[e3].outputs.forEach((t4) => {
                this._allData[t4]._from = -2;
              }), this._nodes.splice(e3, 1), e3--);
            t3 = 0;
            for (let e3 = 0; e3 < this._allData.length; e3++)
              if (this._allData[e3].from !== -2 || this._allOutputIndices.indexOf(e3 + t3) !== -1) {
                if (t3 > 0) {
                  let n3 = -1;
                  this._allData[e3].from !== void 0 && this._allData[e3].from !== -1 ? (n3 = this._nodes[this._allData[e3].from].outputs.indexOf(e3 + t3), n3 !== -1 && (this._nodes[this._allData[e3].from].outputs[n3] = e3)) : (n3 = this._allInputIndices.indexOf(e3 + t3), n3 !== -1 && (this._allInputIndices[n3] = e3)), this._allData[e3].to.forEach((r3) => {
                    n3 = this._nodes[r3].inputs.indexOf(e3 + t3), n3 !== -1 && (this._nodes[r3].inputs[n3] = e3);
                  }), this._allData[e3].to.length === 0 && (n3 = this._allOutputIndices.indexOf(e3 + t3), n3 !== -1 && (this._allOutputIndices[n3] = e3));
                }
              } else
                t3++, this._allData.splice(e3, 1), e3--;
          }
          deleteNode(t3) {
            const e3 = this._nodes[t3];
            if (e3.outputs.length > 1) {
              for (let t4 = 1; t4 < e3.outputs.length; t4++)
                if (this._allData[e3.outputs[t4]].to.length > 0)
                  throw new Error("Node deletion with more than one output connected to other nodes is not supported. ");
            }
            e3.executeNode = false;
            const n3 = e3.inputs[0], r3 = e3.outputs[0], i3 = this._allData[r3].to, o3 = this._allData[n3].to.indexOf(t3);
            if (o3 === -1)
              throw new Error("The Value object doesn't have the current Node in it's 'to' property ");
            this._allData[n3].to.splice(o3, 1), this._allData[r3]._to = [];
            const a3 = this._allOutputIndices.indexOf(r3);
            if (a3 !== -1 && (this._allOutputIndices[a3] = n3), i3 && i3.length > 0)
              for (const t4 of i3) {
                const e4 = this._nodes[t4].inputs.indexOf(r3);
                if (e4 === -1)
                  throw new Error("The Node object doesn't have the output Value in it's 'inputs' property ");
                this._nodes[t4].inputs[e4] = n3, this._allData[n3].to.push(t4);
              }
          }
          removeAllDropoutNodes() {
            let t3 = 0;
            for (const e3 of this._nodes) {
              if (e3.opType === "Dropout") {
                if (e3.inputs.length !== 1)
                  throw new Error("Dropout nodes should only contain one input. ");
                if (e3.outputs.length !== 1 && e3.outputs.length !== 2)
                  throw new Error("Dropout nodes should contain either 1 or 2 output(s)");
                if (e3.outputs.length === 2 && this._allData[e3.outputs[1]]._to.length !== 0)
                  throw new Error("Dropout nodes's second output should not be referenced by other nodes");
                this.deleteNode(t3);
              }
              t3++;
            }
          }
          removeAllIdentityNodes() {
            let t3 = 0;
            for (const e3 of this._nodes)
              e3.opType === "Identity" && this.deleteNode(t3), t3++;
          }
          isActivation(t3) {
            switch (t3.opType) {
              case "Relu":
              case "Sigmoid":
              case "Clip":
                return true;
              default:
                return false;
            }
          }
          fuseConvActivationNodes() {
            for (const t3 of this._nodes)
              if (t3.opType === "Conv") {
                const e3 = this._allData[t3.outputs[0]]._to;
                if (e3.length === 1 && this.isActivation(this._nodes[e3[0]])) {
                  const n3 = this._nodes[e3[0]];
                  if (n3.opType === "Clip")
                    if (n3.inputs.length === 1)
                      try {
                        t3.attributes.set("activation_params", "floats", [n3.attributes.getFloat("min"), n3.attributes.getFloat("max")]);
                      } catch (e4) {
                        t3.attributes.set("activation_params", "floats", [s2.MIN_CLIP, s2.MAX_CLIP]);
                      }
                    else {
                      if (!(n3.inputs.length >= 3 && this._allData[n3.inputs[1]].tensor !== void 0 && this._allData[n3.inputs[2]].tensor !== void 0))
                        continue;
                      t3.attributes.set("activation_params", "floats", [this._allData[n3.inputs[1]].tensor.floatData[0], this._allData[n3.inputs[2]].tensor.floatData[0]]);
                    }
                  t3.attributes.set("activation", "string", n3.opType), this.deleteNode(e3[0]);
                }
              }
          }
        }
      }, 6231: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.now = e2.Profiler = e2.Logger = void 0;
        const n2 = {verbose: 1e3, info: 2e3, warning: 4e3, error: 5e3, fatal: 6e3}, r2 = {none: new class {
          log(t3, e3, n3) {
          }
        }(), console: new class {
          log(t3, e3, n3) {
            console.log(`${this.color(t3)} ${n3 ? "[35m" + n3 + "[0m " : ""}${e3}`);
          }
          color(t3) {
            switch (t3) {
              case "verbose":
                return "[34;40mv[0m";
              case "info":
                return "[32mi[0m";
              case "warning":
                return "[30;43mw[0m";
              case "error":
                return "[31;40me[0m";
              case "fatal":
                return "[101mf[0m";
              default:
                throw new Error(`unsupported severity: ${t3}`);
            }
          }
        }()}, i2 = {provider: "console", minimalSeverity: "warning", logDateTime: true, logSourceLocation: false};
        let o2 = {"": i2};
        function a2(t3, e3, n3, r3) {
          if (e3 === void 0)
            return i3 = t3, {verbose: a2.verbose.bind(null, i3), info: a2.info.bind(null, i3), warning: a2.warning.bind(null, i3), error: a2.error.bind(null, i3), fatal: a2.fatal.bind(null, i3)};
          if (n3 === void 0)
            s2(t3, e3);
          else if (typeof n3 == "number" && r3 === void 0)
            s2(t3, e3);
          else if (typeof n3 == "string" && r3 === void 0)
            s2(t3, n3, 0, e3);
          else {
            if (typeof n3 != "string" || typeof r3 != "number")
              throw new TypeError("input is valid");
            s2(t3, n3, 0, e3);
          }
          var i3;
        }
        function s2(t3, e3, i3, a3) {
          const s3 = o2[a3 || ""] || o2[""];
          n2[t3] < n2[s3.minimalSeverity] || (s3.logDateTime && (e3 = `${new Date().toISOString()}|${e3}`), s3.logSourceLocation, r2[s3.provider].log(t3, e3, a3));
        }
        !function(t3) {
          function e3(t4) {
            o2 = {}, n3("", t4 || {});
          }
          function n3(t4, n4) {
            if (t4 === "*")
              e3(n4);
            else {
              const e4 = o2[t4] || i2;
              o2[t4] = {provider: n4.provider || e4.provider, minimalSeverity: n4.minimalSeverity || e4.minimalSeverity, logDateTime: n4.logDateTime === void 0 ? e4.logDateTime : n4.logDateTime, logSourceLocation: n4.logSourceLocation === void 0 ? e4.logSourceLocation : n4.logSourceLocation};
            }
          }
          t3.verbose = function(e4, n4) {
            t3("verbose", e4, n4);
          }, t3.info = function(e4, n4) {
            t3("info", e4, n4);
          }, t3.warning = function(e4, n4) {
            t3("warning", e4, n4);
          }, t3.error = function(e4, n4) {
            t3("error", e4, n4);
          }, t3.fatal = function(e4, n4) {
            t3("fatal", e4, n4);
          }, t3.reset = e3, t3.set = n3, t3.setWithEnv = function(t4) {
            const e4 = {};
            t4.logLevel && (e4.minimalSeverity = t4.logLevel), n3("", e4);
          };
        }(a2 || (a2 = {})), e2.Logger = a2;
        class u2 {
          constructor(t3, e3, n3, r3, i3, o3) {
            this.category = t3, this.name = e3, this.startTime = n3, this.endCallback = r3, this.timer = i3, this.ctx = o3;
          }
          end() {
            return this.endCallback(this);
          }
          async checkTimer() {
            if (this.ctx === void 0 || this.timer === void 0)
              throw new Error("No webgl timer found");
            return this.ctx.endTimer(), this.ctx.waitForQueryAndGetTime(this.timer);
          }
        }
        class c2 {
          constructor(t3, e3, n3, r3) {
            this.category = t3, this.name = e3, this.startTime = n3, this.endTime = r3;
          }
        }
        e2.Profiler = class {
          static create(t3) {
            return t3 === void 0 ? new this() : new this(t3.maxNumberEvents, t3.flushBatchSize, t3.flushIntervalInMilliseconds);
          }
          constructor(t3, e3, n3) {
            this._started = false, this._flushPointer = 0, this._started = false, this._maxNumberEvents = t3 === void 0 ? 1e4 : t3, this._flushBatchSize = e3 === void 0 ? 10 : e3, this._flushIntervalInMilliseconds = n3 === void 0 ? 5e3 : n3;
          }
          start() {
            this._started = true, this._timingEvents = [], this._flushTime = (0, e2.now)(), this._flushPointer = 0;
          }
          stop() {
            for (this._started = false; this._flushPointer < this._timingEvents.length; this._flushPointer++)
              this.logOneEvent(this._timingEvents[this._flushPointer]);
          }
          event(t3, e3, n3, r3) {
            const i3 = this._started ? this.begin(t3, e3, r3) : void 0;
            let o3 = false;
            const a3 = n3();
            if (a3 && typeof a3.then == "function")
              return o3 = true, new Promise((t4, e4) => {
                a3.then(async (e5) => {
                  i3 && await i3.end(), t4(e5);
                }, async (t5) => {
                  i3 && await i3.end(), e4(t5);
                });
              });
            if (!o3 && i3) {
              const t4 = i3.end();
              if (t4 && typeof t4.then == "function")
                return new Promise((e4, n4) => {
                  t4.then(() => {
                    e4(a3);
                  }, (t5) => {
                    n4(t5);
                  });
                });
            }
            return a3;
          }
          begin(t3, n3, r3) {
            if (!this._started)
              throw new Error("profiler is not started yet");
            if (r3 === void 0) {
              const r4 = (0, e2.now)();
              return this.flush(r4), new u2(t3, n3, r4, (t4) => this.endSync(t4));
            }
            {
              const e3 = r3.beginTimer();
              return new u2(t3, n3, 0, async (t4) => this.end(t4), e3, r3);
            }
          }
          async end(t3) {
            const e3 = await t3.checkTimer();
            this._timingEvents.length < this._maxNumberEvents && (this._timingEvents.push(new c2(t3.category, t3.name, t3.startTime, e3)), this.flush(e3));
          }
          endSync(t3) {
            const n3 = (0, e2.now)();
            this._timingEvents.length < this._maxNumberEvents && (this._timingEvents.push(new c2(t3.category, t3.name, t3.startTime, n3)), this.flush(n3));
          }
          logOneEvent(t3) {
            e2.Logger.verbose(`Profiler.${t3.category}`, `${(t3.endTime - t3.startTime).toFixed(2)}ms on event '${t3.name}' at ${t3.endTime.toFixed(2)}`);
          }
          flush(t3) {
            if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize || t3 - this._flushTime >= this._flushIntervalInMilliseconds) {
              for (const t4 = this._flushPointer; this._flushPointer < t4 + this._flushBatchSize && this._flushPointer < this._timingEvents.length; this._flushPointer++)
                this.logOneEvent(this._timingEvents[this._flushPointer]);
              this._flushTime = (0, e2.now)();
            }
          }
          get started() {
            return this._started;
          }
        }, e2.now = typeof performance != "undefined" && performance.now ? () => performance.now() : Date.now;
      }, 2644: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.Model = void 0;
        const r2 = n2(5686), i2 = n2(1446), o2 = n2(7070), a2 = n2(9395), s2 = n2(2517);
        var u2 = a2.onnxruntime.experimental.fbs;
        e2.Model = class {
          constructor() {
          }
          load(t3, e3, n3) {
            if (!n3)
              try {
                return void this.loadFromOnnxFormat(t3, e3);
              } catch (t4) {
                if (n3 !== void 0)
                  throw t4;
              }
            this.loadFromOrtFormat(t3, e3);
          }
          loadFromOnnxFormat(t3, e3) {
            const n3 = i2.onnx.ModelProto.decode(t3);
            if (s2.LongUtil.longToNumber(n3.irVersion) < 3)
              throw new Error("only support ONNX model with IR_VERSION>=3");
            this._opsets = n3.opsetImport.map((t4) => ({domain: t4.domain, version: s2.LongUtil.longToNumber(t4.version)})), this._graph = o2.Graph.from(n3.graph, e3);
          }
          loadFromOrtFormat(t3, e3) {
            const n3 = new r2.flatbuffers.ByteBuffer(t3), i3 = u2.InferenceSession.getRootAsInferenceSession(n3).model();
            if (s2.LongUtil.longToNumber(i3.irVersion()) < 3)
              throw new Error("only support ONNX model with IR_VERSION>=3");
            this._opsets = [];
            for (let t4 = 0; t4 < i3.opsetImportLength(); t4++) {
              const e4 = i3.opsetImport(t4);
              this._opsets.push({domain: e4 == null ? void 0 : e4.domain(), version: s2.LongUtil.longToNumber(e4.version())});
            }
            this._graph = o2.Graph.from(i3.graph(), e3);
          }
          get graph() {
            return this._graph;
          }
          get opsets() {
            return this._opsets;
          }
        };
      }, 782: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.FLOAT_TYPES = e2.INT_TYPES = e2.NUMBER_TYPES = void 0, e2.NUMBER_TYPES = ["float32", "float64", "int32", "int16", "int8", "uint16", "uint32", "uint8"], e2.INT_TYPES = ["int32", "int16", "int8", "uint16", "uint32", "uint8"], e2.FLOAT_TYPES = ["float32", "float64"];
      }, 1047: (t2, e2) => {
        "use strict";
        function n2(t3, e3) {
          if (e3.endsWith("+")) {
            const n3 = Number.parseInt(e3.substring(0, e3.length - 1), 10);
            return !isNaN(n3) && n3 <= t3;
          }
          if (e3.split("-").length === 2) {
            const n3 = e3.split("-"), r2 = Number.parseInt(n3[0], 10), i2 = Number.parseInt(n3[1], 10);
            return !isNaN(r2) && !isNaN(i2) && r2 <= t3 && t3 <= i2;
          }
          return Number.parseInt(e3, 10) === t3;
        }
        Object.defineProperty(e2, "__esModule", {value: true}), e2.resolveOperator = void 0, e2.resolveOperator = function(t3, e3, r2) {
          for (const i2 of r2) {
            const r3 = i2[0], o2 = i2[1], a2 = i2[2], s2 = i2[3], u2 = i2[4];
            if (t3.opType === r3) {
              for (const t4 of e3)
                if ((t4.domain === o2 || t4.domain === "ai.onnx" && o2 === "") && n2(t4.version, a2))
                  return {opImpl: s2, opInit: u2};
            }
          }
          throw new TypeError(`cannot resolve operator '${t3.opType}' with opsets: ${e3.map((t4) => `${t4.domain || "ai.onnx"} v${t4.version}`).join(", ")}`);
        };
      }, 9395: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.onnxruntime = void 0;
        const r2 = n2(5686);
        var i2, o2;
        i2 = e2.onnxruntime || (e2.onnxruntime = {}), function(t3) {
          let e3;
          !function(t4) {
            t4[t4.UNDEFINED = 0] = "UNDEFINED", t4[t4.FLOAT = 1] = "FLOAT", t4[t4.INT = 2] = "INT", t4[t4.STRING = 3] = "STRING", t4[t4.TENSOR = 4] = "TENSOR", t4[t4.GRAPH = 5] = "GRAPH", t4[t4.FLOATS = 6] = "FLOATS", t4[t4.INTS = 7] = "INTS", t4[t4.STRINGS = 8] = "STRINGS", t4[t4.TENSORS = 9] = "TENSORS", t4[t4.GRAPHS = 10] = "GRAPHS", t4[t4.SPARSE_TENSOR = 11] = "SPARSE_TENSOR", t4[t4.SPARSE_TENSORS = 12] = "SPARSE_TENSORS";
          }(e3 = t3.AttributeType || (t3.AttributeType = {}));
        }((o2 = i2.experimental || (i2.experimental = {})).fbs || (o2.fbs = {})), function(t3) {
          !function(t4) {
            !function(t5) {
              let e3;
              !function(t6) {
                t6[t6.UNKNOWN = 0] = "UNKNOWN", t6[t6.VALUE = 1] = "VALUE", t6[t6.PARAM = 2] = "PARAM";
              }(e3 = t5.DimensionValueType || (t5.DimensionValueType = {}));
            }(t4.fbs || (t4.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(t4) {
            !function(t5) {
              let e3;
              !function(t6) {
                t6[t6.UNDEFINED = 0] = "UNDEFINED", t6[t6.FLOAT = 1] = "FLOAT", t6[t6.UINT8 = 2] = "UINT8", t6[t6.INT8 = 3] = "INT8", t6[t6.UINT16 = 4] = "UINT16", t6[t6.INT16 = 5] = "INT16", t6[t6.INT32 = 6] = "INT32", t6[t6.INT64 = 7] = "INT64", t6[t6.STRING = 8] = "STRING", t6[t6.BOOL = 9] = "BOOL", t6[t6.FLOAT16 = 10] = "FLOAT16", t6[t6.DOUBLE = 11] = "DOUBLE", t6[t6.UINT32 = 12] = "UINT32", t6[t6.UINT64 = 13] = "UINT64", t6[t6.COMPLEX64 = 14] = "COMPLEX64", t6[t6.COMPLEX128 = 15] = "COMPLEX128", t6[t6.BFLOAT16 = 16] = "BFLOAT16";
              }(e3 = t5.TensorDataType || (t5.TensorDataType = {}));
            }(t4.fbs || (t4.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(t4) {
            !function(t5) {
              let e3;
              !function(t6) {
                t6[t6.Primitive = 0] = "Primitive", t6[t6.Fused = 1] = "Fused";
              }(e3 = t5.NodeType || (t5.NodeType = {}));
            }(t4.fbs || (t4.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(t4) {
            !function(t5) {
              let e3;
              !function(t6) {
                t6[t6.NONE = 0] = "NONE", t6[t6.tensor_type = 1] = "tensor_type", t6[t6.sequence_type = 2] = "sequence_type", t6[t6.map_type = 3] = "map_type";
              }(e3 = t5.TypeInfoValue || (t5.TypeInfoValue = {}));
            }(t4.fbs || (t4.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsShape(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsShape(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                dim(e5, n4) {
                  let r3 = this.bb.__offset(this.bb_pos, 4);
                  return r3 ? (n4 || new t3.experimental.fbs.Dimension()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r3) + 4 * e5), this.bb) : null;
                }
                dimLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 4);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                static startShape(t4) {
                  t4.startObject(1);
                }
                static addDim(t4, e5) {
                  t4.addFieldOffset(0, e5, 0);
                }
                static createDimVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startDimVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static endShape(t4) {
                  return t4.endObject();
                }
                static createShape(t4, e5) {
                  return n3.startShape(t4), n3.addDim(t4, e5), n3.endShape(t4);
                }
              }
              e4.Shape = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsDimension(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsDimension(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                value(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 4);
                  return n4 ? (e5 || new t3.experimental.fbs.DimensionValue()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                denotation(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 6);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                static startDimension(t4) {
                  t4.startObject(2);
                }
                static addValue(t4, e5) {
                  t4.addFieldOffset(0, e5, 0);
                }
                static addDenotation(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static endDimension(t4) {
                  return t4.endObject();
                }
                static createDimension(t4, e5, r3) {
                  return n3.startDimension(t4), n3.addValue(t4, e5), n3.addDenotation(t4, r3), n3.endDimension(t4);
                }
              }
              e4.Dimension = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsDimensionValue(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsDimensionValue(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                dimType() {
                  let e5 = this.bb.__offset(this.bb_pos, 4);
                  return e5 ? this.bb.readInt8(this.bb_pos + e5) : t3.experimental.fbs.DimensionValueType.UNKNOWN;
                }
                dimValue() {
                  let t4 = this.bb.__offset(this.bb_pos, 6);
                  return t4 ? this.bb.readInt64(this.bb_pos + t4) : this.bb.createLong(0, 0);
                }
                dimParam(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 8);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                static startDimensionValue(t4) {
                  t4.startObject(3);
                }
                static addDimType(e5, n4) {
                  e5.addFieldInt8(0, n4, t3.experimental.fbs.DimensionValueType.UNKNOWN);
                }
                static addDimValue(t4, e5) {
                  t4.addFieldInt64(1, e5, t4.createLong(0, 0));
                }
                static addDimParam(t4, e5) {
                  t4.addFieldOffset(2, e5, 0);
                }
                static endDimensionValue(t4) {
                  return t4.endObject();
                }
                static createDimensionValue(t4, e5, r3, i3) {
                  return n3.startDimensionValue(t4), n3.addDimType(t4, e5), n3.addDimValue(t4, r3), n3.addDimParam(t4, i3), n3.endDimensionValue(t4);
                }
              }
              e4.DimensionValue = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsTensorTypeAndShape(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsTensorTypeAndShape(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                elemType() {
                  let e5 = this.bb.__offset(this.bb_pos, 4);
                  return e5 ? this.bb.readInt32(this.bb_pos + e5) : t3.experimental.fbs.TensorDataType.UNDEFINED;
                }
                shape(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 6);
                  return n4 ? (e5 || new t3.experimental.fbs.Shape()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                static startTensorTypeAndShape(t4) {
                  t4.startObject(2);
                }
                static addElemType(e5, n4) {
                  e5.addFieldInt32(0, n4, t3.experimental.fbs.TensorDataType.UNDEFINED);
                }
                static addShape(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static endTensorTypeAndShape(t4) {
                  return t4.endObject();
                }
                static createTensorTypeAndShape(t4, e5, r3) {
                  return n3.startTensorTypeAndShape(t4), n3.addElemType(t4, e5), n3.addShape(t4, r3), n3.endTensorTypeAndShape(t4);
                }
              }
              e4.TensorTypeAndShape = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsMapType(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsMapType(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                keyType() {
                  let e5 = this.bb.__offset(this.bb_pos, 4);
                  return e5 ? this.bb.readInt32(this.bb_pos + e5) : t3.experimental.fbs.TensorDataType.UNDEFINED;
                }
                valueType(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 6);
                  return n4 ? (e5 || new t3.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                static startMapType(t4) {
                  t4.startObject(2);
                }
                static addKeyType(e5, n4) {
                  e5.addFieldInt32(0, n4, t3.experimental.fbs.TensorDataType.UNDEFINED);
                }
                static addValueType(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static endMapType(t4) {
                  return t4.endObject();
                }
                static createMapType(t4, e5, r3) {
                  return n3.startMapType(t4), n3.addKeyType(t4, e5), n3.addValueType(t4, r3), n3.endMapType(t4);
                }
              }
              e4.MapType = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsSequenceType(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsSequenceType(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                elemType(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 4);
                  return n4 ? (e5 || new t3.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                static startSequenceType(t4) {
                  t4.startObject(1);
                }
                static addElemType(t4, e5) {
                  t4.addFieldOffset(0, e5, 0);
                }
                static endSequenceType(t4) {
                  return t4.endObject();
                }
                static createSequenceType(t4, e5) {
                  return n3.startSequenceType(t4), n3.addElemType(t4, e5), n3.endSequenceType(t4);
                }
              }
              e4.SequenceType = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(t4) {
            (t4.fbs || (t4.fbs = {})).EdgeEnd = class {
              constructor() {
                this.bb = null, this.bb_pos = 0;
              }
              __init(t5, e3) {
                return this.bb_pos = t5, this.bb = e3, this;
              }
              nodeIndex() {
                return this.bb.readUint32(this.bb_pos);
              }
              srcArgIndex() {
                return this.bb.readInt32(this.bb_pos + 4);
              }
              dstArgIndex() {
                return this.bb.readInt32(this.bb_pos + 8);
              }
              static createEdgeEnd(t5, e3, n3, r3) {
                return t5.prep(4, 12), t5.writeInt32(r3), t5.writeInt32(n3), t5.writeInt32(e3), t5.offset();
              }
            };
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsNodeEdge(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsNodeEdge(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                nodeIndex() {
                  let t4 = this.bb.__offset(this.bb_pos, 4);
                  return t4 ? this.bb.readUint32(this.bb_pos + t4) : 0;
                }
                inputEdges(e5, n4) {
                  let r3 = this.bb.__offset(this.bb_pos, 6);
                  return r3 ? (n4 || new t3.experimental.fbs.EdgeEnd()).__init(this.bb.__vector(this.bb_pos + r3) + 12 * e5, this.bb) : null;
                }
                inputEdgesLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 6);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                outputEdges(e5, n4) {
                  let r3 = this.bb.__offset(this.bb_pos, 8);
                  return r3 ? (n4 || new t3.experimental.fbs.EdgeEnd()).__init(this.bb.__vector(this.bb_pos + r3) + 12 * e5, this.bb) : null;
                }
                outputEdgesLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 8);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                static startNodeEdge(t4) {
                  t4.startObject(3);
                }
                static addNodeIndex(t4, e5) {
                  t4.addFieldInt32(0, e5, 0);
                }
                static addInputEdges(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static startInputEdgesVector(t4, e5) {
                  t4.startVector(12, e5, 4);
                }
                static addOutputEdges(t4, e5) {
                  t4.addFieldOffset(2, e5, 0);
                }
                static startOutputEdgesVector(t4, e5) {
                  t4.startVector(12, e5, 4);
                }
                static endNodeEdge(t4) {
                  return t4.endObject();
                }
                static createNodeEdge(t4, e5, r3, i3) {
                  return n3.startNodeEdge(t4), n3.addNodeIndex(t4, e5), n3.addInputEdges(t4, r3), n3.addOutputEdges(t4, i3), n3.endNodeEdge(t4);
                }
              }
              e4.NodeEdge = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsNode(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsNode(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                name(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 4);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                docString(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 6);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                domain(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 8);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                sinceVersion() {
                  let t4 = this.bb.__offset(this.bb_pos, 10);
                  return t4 ? this.bb.readInt32(this.bb_pos + t4) : 0;
                }
                index() {
                  let t4 = this.bb.__offset(this.bb_pos, 12);
                  return t4 ? this.bb.readUint32(this.bb_pos + t4) : 0;
                }
                opType(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 14);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                type() {
                  let e5 = this.bb.__offset(this.bb_pos, 16);
                  return e5 ? this.bb.readInt32(this.bb_pos + e5) : t3.experimental.fbs.NodeType.Primitive;
                }
                executionProviderType(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 18);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                inputs(t4, e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 20);
                  return n4 ? this.bb.__string(this.bb.__vector(this.bb_pos + n4) + 4 * t4, e5) : null;
                }
                inputsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 20);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                outputs(t4, e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 22);
                  return n4 ? this.bb.__string(this.bb.__vector(this.bb_pos + n4) + 4 * t4, e5) : null;
                }
                outputsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 22);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                attributes(e5, n4) {
                  let r3 = this.bb.__offset(this.bb_pos, 24);
                  return r3 ? (n4 || new t3.experimental.fbs.Attribute()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r3) + 4 * e5), this.bb) : null;
                }
                attributesLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 24);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                inputArgCounts(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 26);
                  return e5 ? this.bb.readInt32(this.bb.__vector(this.bb_pos + e5) + 4 * t4) : 0;
                }
                inputArgCountsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 26);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                inputArgCountsArray() {
                  let t4 = this.bb.__offset(this.bb_pos, 26);
                  return t4 ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + t4), this.bb.__vector_len(this.bb_pos + t4)) : null;
                }
                implicitInputs(t4, e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 28);
                  return n4 ? this.bb.__string(this.bb.__vector(this.bb_pos + n4) + 4 * t4, e5) : null;
                }
                implicitInputsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 28);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                static startNode(t4) {
                  t4.startObject(13);
                }
                static addName(t4, e5) {
                  t4.addFieldOffset(0, e5, 0);
                }
                static addDocString(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static addDomain(t4, e5) {
                  t4.addFieldOffset(2, e5, 0);
                }
                static addSinceVersion(t4, e5) {
                  t4.addFieldInt32(3, e5, 0);
                }
                static addIndex(t4, e5) {
                  t4.addFieldInt32(4, e5, 0);
                }
                static addOpType(t4, e5) {
                  t4.addFieldOffset(5, e5, 0);
                }
                static addType(e5, n4) {
                  e5.addFieldInt32(6, n4, t3.experimental.fbs.NodeType.Primitive);
                }
                static addExecutionProviderType(t4, e5) {
                  t4.addFieldOffset(7, e5, 0);
                }
                static addInputs(t4, e5) {
                  t4.addFieldOffset(8, e5, 0);
                }
                static createInputsVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startInputsVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addOutputs(t4, e5) {
                  t4.addFieldOffset(9, e5, 0);
                }
                static createOutputsVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startOutputsVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addAttributes(t4, e5) {
                  t4.addFieldOffset(10, e5, 0);
                }
                static createAttributesVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startAttributesVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addInputArgCounts(t4, e5) {
                  t4.addFieldOffset(11, e5, 0);
                }
                static createInputArgCountsVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addInt32(e5[n4]);
                  return t4.endVector();
                }
                static startInputArgCountsVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addImplicitInputs(t4, e5) {
                  t4.addFieldOffset(12, e5, 0);
                }
                static createImplicitInputsVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startImplicitInputsVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static endNode(t4) {
                  return t4.endObject();
                }
                static createNode(t4, e5, r3, i3, o3, a2, s2, u2, c2, l2, p, f, d2, h2) {
                  return n3.startNode(t4), n3.addName(t4, e5), n3.addDocString(t4, r3), n3.addDomain(t4, i3), n3.addSinceVersion(t4, o3), n3.addIndex(t4, a2), n3.addOpType(t4, s2), n3.addType(t4, u2), n3.addExecutionProviderType(t4, c2), n3.addInputs(t4, l2), n3.addOutputs(t4, p), n3.addAttributes(t4, f), n3.addInputArgCounts(t4, d2), n3.addImplicitInputs(t4, h2), n3.endNode(t4);
                }
              }
              e4.Node = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsValueInfo(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsValueInfo(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                name(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 4);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                docString(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 6);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                type(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 8);
                  return n4 ? (e5 || new t3.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                static startValueInfo(t4) {
                  t4.startObject(3);
                }
                static addName(t4, e5) {
                  t4.addFieldOffset(0, e5, 0);
                }
                static addDocString(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static addType(t4, e5) {
                  t4.addFieldOffset(2, e5, 0);
                }
                static endValueInfo(t4) {
                  return t4.endObject();
                }
                static createValueInfo(t4, e5, r3, i3) {
                  return n3.startValueInfo(t4), n3.addName(t4, e5), n3.addDocString(t4, r3), n3.addType(t4, i3), n3.endValueInfo(t4);
                }
              }
              e4.ValueInfo = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsTypeInfo(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsTypeInfo(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                denotation(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 4);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                valueType() {
                  let e5 = this.bb.__offset(this.bb_pos, 6);
                  return e5 ? this.bb.readUint8(this.bb_pos + e5) : t3.experimental.fbs.TypeInfoValue.NONE;
                }
                value(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 8);
                  return e5 ? this.bb.__union(t4, this.bb_pos + e5) : null;
                }
                static startTypeInfo(t4) {
                  t4.startObject(3);
                }
                static addDenotation(t4, e5) {
                  t4.addFieldOffset(0, e5, 0);
                }
                static addValueType(e5, n4) {
                  e5.addFieldInt8(1, n4, t3.experimental.fbs.TypeInfoValue.NONE);
                }
                static addValue(t4, e5) {
                  t4.addFieldOffset(2, e5, 0);
                }
                static endTypeInfo(t4) {
                  return t4.endObject();
                }
                static createTypeInfo(t4, e5, r3, i3) {
                  return n3.startTypeInfo(t4), n3.addDenotation(t4, e5), n3.addValueType(t4, r3), n3.addValue(t4, i3), n3.endTypeInfo(t4);
                }
              }
              e4.TypeInfo = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(t4) {
            !function(t5) {
              class e3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t6, e4) {
                  return this.bb_pos = t6, this.bb = e4, this;
                }
                static getRootAsOperatorSetId(t6, n3) {
                  return (n3 || new e3()).__init(t6.readInt32(t6.position()) + t6.position(), t6);
                }
                static getSizePrefixedRootAsOperatorSetId(t6, n3) {
                  return t6.setPosition(t6.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (n3 || new e3()).__init(t6.readInt32(t6.position()) + t6.position(), t6);
                }
                domain(t6) {
                  let e4 = this.bb.__offset(this.bb_pos, 4);
                  return e4 ? this.bb.__string(this.bb_pos + e4, t6) : null;
                }
                version() {
                  let t6 = this.bb.__offset(this.bb_pos, 6);
                  return t6 ? this.bb.readInt64(this.bb_pos + t6) : this.bb.createLong(0, 0);
                }
                static startOperatorSetId(t6) {
                  t6.startObject(2);
                }
                static addDomain(t6, e4) {
                  t6.addFieldOffset(0, e4, 0);
                }
                static addVersion(t6, e4) {
                  t6.addFieldInt64(1, e4, t6.createLong(0, 0));
                }
                static endOperatorSetId(t6) {
                  return t6.endObject();
                }
                static createOperatorSetId(t6, n3, r3) {
                  return e3.startOperatorSetId(t6), e3.addDomain(t6, n3), e3.addVersion(t6, r3), e3.endOperatorSetId(t6);
                }
              }
              t5.OperatorSetId = e3;
            }(t4.fbs || (t4.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsTensor(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsTensor(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                name(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 4);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                docString(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 6);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                dims(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 8);
                  return e5 ? this.bb.readInt64(this.bb.__vector(this.bb_pos + e5) + 8 * t4) : this.bb.createLong(0, 0);
                }
                dimsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 8);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                dataType() {
                  let e5 = this.bb.__offset(this.bb_pos, 10);
                  return e5 ? this.bb.readInt32(this.bb_pos + e5) : t3.experimental.fbs.TensorDataType.UNDEFINED;
                }
                rawData(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 12);
                  return e5 ? this.bb.readUint8(this.bb.__vector(this.bb_pos + e5) + t4) : 0;
                }
                rawDataLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 12);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                rawDataArray() {
                  let t4 = this.bb.__offset(this.bb_pos, 12);
                  return t4 ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + t4), this.bb.__vector_len(this.bb_pos + t4)) : null;
                }
                stringData(t4, e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 14);
                  return n4 ? this.bb.__string(this.bb.__vector(this.bb_pos + n4) + 4 * t4, e5) : null;
                }
                stringDataLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 14);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                static startTensor(t4) {
                  t4.startObject(6);
                }
                static addName(t4, e5) {
                  t4.addFieldOffset(0, e5, 0);
                }
                static addDocString(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static addDims(t4, e5) {
                  t4.addFieldOffset(2, e5, 0);
                }
                static createDimsVector(t4, e5) {
                  t4.startVector(8, e5.length, 8);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addInt64(e5[n4]);
                  return t4.endVector();
                }
                static startDimsVector(t4, e5) {
                  t4.startVector(8, e5, 8);
                }
                static addDataType(e5, n4) {
                  e5.addFieldInt32(3, n4, t3.experimental.fbs.TensorDataType.UNDEFINED);
                }
                static addRawData(t4, e5) {
                  t4.addFieldOffset(4, e5, 0);
                }
                static createRawDataVector(t4, e5) {
                  t4.startVector(1, e5.length, 1);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addInt8(e5[n4]);
                  return t4.endVector();
                }
                static startRawDataVector(t4, e5) {
                  t4.startVector(1, e5, 1);
                }
                static addStringData(t4, e5) {
                  t4.addFieldOffset(5, e5, 0);
                }
                static createStringDataVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startStringDataVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static endTensor(t4) {
                  return t4.endObject();
                }
                static createTensor(t4, e5, r3, i3, o3, a2, s2) {
                  return n3.startTensor(t4), n3.addName(t4, e5), n3.addDocString(t4, r3), n3.addDims(t4, i3), n3.addDataType(t4, o3), n3.addRawData(t4, a2), n3.addStringData(t4, s2), n3.endTensor(t4);
                }
              }
              e4.Tensor = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsSparseTensor(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsSparseTensor(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                values(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 4);
                  return n4 ? (e5 || new t3.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                indices(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 6);
                  return n4 ? (e5 || new t3.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                dims(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 8);
                  return e5 ? this.bb.readInt64(this.bb.__vector(this.bb_pos + e5) + 8 * t4) : this.bb.createLong(0, 0);
                }
                dimsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 8);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                static startSparseTensor(t4) {
                  t4.startObject(3);
                }
                static addValues(t4, e5) {
                  t4.addFieldOffset(0, e5, 0);
                }
                static addIndices(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static addDims(t4, e5) {
                  t4.addFieldOffset(2, e5, 0);
                }
                static createDimsVector(t4, e5) {
                  t4.startVector(8, e5.length, 8);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addInt64(e5[n4]);
                  return t4.endVector();
                }
                static startDimsVector(t4, e5) {
                  t4.startVector(8, e5, 8);
                }
                static endSparseTensor(t4) {
                  return t4.endObject();
                }
                static createSparseTensor(t4, e5, r3, i3) {
                  return n3.startSparseTensor(t4), n3.addValues(t4, e5), n3.addIndices(t4, r3), n3.addDims(t4, i3), n3.endSparseTensor(t4);
                }
              }
              e4.SparseTensor = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsAttribute(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsAttribute(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                name(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 4);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                docString(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 6);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                type() {
                  let e5 = this.bb.__offset(this.bb_pos, 8);
                  return e5 ? this.bb.readInt32(this.bb_pos + e5) : t3.experimental.fbs.AttributeType.UNDEFINED;
                }
                f() {
                  let t4 = this.bb.__offset(this.bb_pos, 10);
                  return t4 ? this.bb.readFloat32(this.bb_pos + t4) : 0;
                }
                i() {
                  let t4 = this.bb.__offset(this.bb_pos, 12);
                  return t4 ? this.bb.readInt64(this.bb_pos + t4) : this.bb.createLong(0, 0);
                }
                s(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 14);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                t(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 16);
                  return n4 ? (e5 || new t3.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                g(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 18);
                  return n4 ? (e5 || new t3.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                floats(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 20);
                  return e5 ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + e5) + 4 * t4) : 0;
                }
                floatsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 20);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                floatsArray() {
                  let t4 = this.bb.__offset(this.bb_pos, 20);
                  return t4 ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + t4), this.bb.__vector_len(this.bb_pos + t4)) : null;
                }
                ints(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 22);
                  return e5 ? this.bb.readInt64(this.bb.__vector(this.bb_pos + e5) + 8 * t4) : this.bb.createLong(0, 0);
                }
                intsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 22);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                strings(t4, e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 24);
                  return n4 ? this.bb.__string(this.bb.__vector(this.bb_pos + n4) + 4 * t4, e5) : null;
                }
                stringsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 24);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                tensors(e5, n4) {
                  let r3 = this.bb.__offset(this.bb_pos, 26);
                  return r3 ? (n4 || new t3.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r3) + 4 * e5), this.bb) : null;
                }
                tensorsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 26);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                graphs(e5, n4) {
                  let r3 = this.bb.__offset(this.bb_pos, 28);
                  return r3 ? (n4 || new t3.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r3) + 4 * e5), this.bb) : null;
                }
                graphsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 28);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                static startAttribute(t4) {
                  t4.startObject(13);
                }
                static addName(t4, e5) {
                  t4.addFieldOffset(0, e5, 0);
                }
                static addDocString(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static addType(e5, n4) {
                  e5.addFieldInt32(2, n4, t3.experimental.fbs.AttributeType.UNDEFINED);
                }
                static addF(t4, e5) {
                  t4.addFieldFloat32(3, e5, 0);
                }
                static addI(t4, e5) {
                  t4.addFieldInt64(4, e5, t4.createLong(0, 0));
                }
                static addS(t4, e5) {
                  t4.addFieldOffset(5, e5, 0);
                }
                static addT(t4, e5) {
                  t4.addFieldOffset(6, e5, 0);
                }
                static addG(t4, e5) {
                  t4.addFieldOffset(7, e5, 0);
                }
                static addFloats(t4, e5) {
                  t4.addFieldOffset(8, e5, 0);
                }
                static createFloatsVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addFloat32(e5[n4]);
                  return t4.endVector();
                }
                static startFloatsVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addInts(t4, e5) {
                  t4.addFieldOffset(9, e5, 0);
                }
                static createIntsVector(t4, e5) {
                  t4.startVector(8, e5.length, 8);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addInt64(e5[n4]);
                  return t4.endVector();
                }
                static startIntsVector(t4, e5) {
                  t4.startVector(8, e5, 8);
                }
                static addStrings(t4, e5) {
                  t4.addFieldOffset(10, e5, 0);
                }
                static createStringsVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startStringsVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addTensors(t4, e5) {
                  t4.addFieldOffset(11, e5, 0);
                }
                static createTensorsVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startTensorsVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addGraphs(t4, e5) {
                  t4.addFieldOffset(12, e5, 0);
                }
                static createGraphsVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startGraphsVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static endAttribute(t4) {
                  return t4.endObject();
                }
                static createAttribute(t4, e5, r3, i3, o3, a2, s2, u2, c2, l2, p, f, d2, h2) {
                  return n3.startAttribute(t4), n3.addName(t4, e5), n3.addDocString(t4, r3), n3.addType(t4, i3), n3.addF(t4, o3), n3.addI(t4, a2), n3.addS(t4, s2), n3.addT(t4, u2), n3.addG(t4, c2), n3.addFloats(t4, l2), n3.addInts(t4, p), n3.addStrings(t4, f), n3.addTensors(t4, d2), n3.addGraphs(t4, h2), n3.endAttribute(t4);
                }
              }
              e4.Attribute = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsGraph(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsGraph(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                initializers(e5, n4) {
                  let r3 = this.bb.__offset(this.bb_pos, 4);
                  return r3 ? (n4 || new t3.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r3) + 4 * e5), this.bb) : null;
                }
                initializersLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 4);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                nodeArgs(e5, n4) {
                  let r3 = this.bb.__offset(this.bb_pos, 6);
                  return r3 ? (n4 || new t3.experimental.fbs.ValueInfo()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r3) + 4 * e5), this.bb) : null;
                }
                nodeArgsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 6);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                nodes(e5, n4) {
                  let r3 = this.bb.__offset(this.bb_pos, 8);
                  return r3 ? (n4 || new t3.experimental.fbs.Node()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r3) + 4 * e5), this.bb) : null;
                }
                nodesLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 8);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                maxNodeIndex() {
                  let t4 = this.bb.__offset(this.bb_pos, 10);
                  return t4 ? this.bb.readUint32(this.bb_pos + t4) : 0;
                }
                nodeEdges(e5, n4) {
                  let r3 = this.bb.__offset(this.bb_pos, 12);
                  return r3 ? (n4 || new t3.experimental.fbs.NodeEdge()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r3) + 4 * e5), this.bb) : null;
                }
                nodeEdgesLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 12);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                inputs(t4, e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 14);
                  return n4 ? this.bb.__string(this.bb.__vector(this.bb_pos + n4) + 4 * t4, e5) : null;
                }
                inputsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 14);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                outputs(t4, e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 16);
                  return n4 ? this.bb.__string(this.bb.__vector(this.bb_pos + n4) + 4 * t4, e5) : null;
                }
                outputsLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 16);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                sparseInitializers(e5, n4) {
                  let r3 = this.bb.__offset(this.bb_pos, 18);
                  return r3 ? (n4 || new t3.experimental.fbs.SparseTensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r3) + 4 * e5), this.bb) : null;
                }
                sparseInitializersLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 18);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                static startGraph(t4) {
                  t4.startObject(8);
                }
                static addInitializers(t4, e5) {
                  t4.addFieldOffset(0, e5, 0);
                }
                static createInitializersVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startInitializersVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addNodeArgs(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static createNodeArgsVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startNodeArgsVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addNodes(t4, e5) {
                  t4.addFieldOffset(2, e5, 0);
                }
                static createNodesVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startNodesVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addMaxNodeIndex(t4, e5) {
                  t4.addFieldInt32(3, e5, 0);
                }
                static addNodeEdges(t4, e5) {
                  t4.addFieldOffset(4, e5, 0);
                }
                static createNodeEdgesVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startNodeEdgesVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addInputs(t4, e5) {
                  t4.addFieldOffset(5, e5, 0);
                }
                static createInputsVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startInputsVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addOutputs(t4, e5) {
                  t4.addFieldOffset(6, e5, 0);
                }
                static createOutputsVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startOutputsVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addSparseInitializers(t4, e5) {
                  t4.addFieldOffset(7, e5, 0);
                }
                static createSparseInitializersVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startSparseInitializersVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static endGraph(t4) {
                  return t4.endObject();
                }
                static createGraph(t4, e5, r3, i3, o3, a2, s2, u2, c2) {
                  return n3.startGraph(t4), n3.addInitializers(t4, e5), n3.addNodeArgs(t4, r3), n3.addNodes(t4, i3), n3.addMaxNodeIndex(t4, o3), n3.addNodeEdges(t4, a2), n3.addInputs(t4, s2), n3.addOutputs(t4, u2), n3.addSparseInitializers(t4, c2), n3.endGraph(t4);
                }
              }
              e4.Graph = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsModel(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsModel(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                irVersion() {
                  let t4 = this.bb.__offset(this.bb_pos, 4);
                  return t4 ? this.bb.readInt64(this.bb_pos + t4) : this.bb.createLong(0, 0);
                }
                opsetImport(e5, n4) {
                  let r3 = this.bb.__offset(this.bb_pos, 6);
                  return r3 ? (n4 || new t3.experimental.fbs.OperatorSetId()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r3) + 4 * e5), this.bb) : null;
                }
                opsetImportLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 6);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                producerName(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 8);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                producerVersion(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 10);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                domain(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 12);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                modelVersion() {
                  let t4 = this.bb.__offset(this.bb_pos, 14);
                  return t4 ? this.bb.readInt64(this.bb_pos + t4) : this.bb.createLong(0, 0);
                }
                docString(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 16);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                graph(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 18);
                  return n4 ? (e5 || new t3.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                graphDocString(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 20);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                static startModel(t4) {
                  t4.startObject(9);
                }
                static addIrVersion(t4, e5) {
                  t4.addFieldInt64(0, e5, t4.createLong(0, 0));
                }
                static addOpsetImport(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static createOpsetImportVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startOpsetImportVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static addProducerName(t4, e5) {
                  t4.addFieldOffset(2, e5, 0);
                }
                static addProducerVersion(t4, e5) {
                  t4.addFieldOffset(3, e5, 0);
                }
                static addDomain(t4, e5) {
                  t4.addFieldOffset(4, e5, 0);
                }
                static addModelVersion(t4, e5) {
                  t4.addFieldInt64(5, e5, t4.createLong(0, 0));
                }
                static addDocString(t4, e5) {
                  t4.addFieldOffset(6, e5, 0);
                }
                static addGraph(t4, e5) {
                  t4.addFieldOffset(7, e5, 0);
                }
                static addGraphDocString(t4, e5) {
                  t4.addFieldOffset(8, e5, 0);
                }
                static endModel(t4) {
                  return t4.endObject();
                }
                static createModel(t4, e5, r3, i3, o3, a2, s2, u2, c2, l2) {
                  return n3.startModel(t4), n3.addIrVersion(t4, e5), n3.addOpsetImport(t4, r3), n3.addProducerName(t4, i3), n3.addProducerVersion(t4, o3), n3.addDomain(t4, a2), n3.addModelVersion(t4, s2), n3.addDocString(t4, u2), n3.addGraph(t4, c2), n3.addGraphDocString(t4, l2), n3.endModel(t4);
                }
              }
              e4.Model = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(t4) {
            !function(t5) {
              class e3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t6, e4) {
                  return this.bb_pos = t6, this.bb = e4, this;
                }
                static getRootAsKernelCreateInfos(t6, n3) {
                  return (n3 || new e3()).__init(t6.readInt32(t6.position()) + t6.position(), t6);
                }
                static getSizePrefixedRootAsKernelCreateInfos(t6, n3) {
                  return t6.setPosition(t6.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (n3 || new e3()).__init(t6.readInt32(t6.position()) + t6.position(), t6);
                }
                nodeIndices(t6) {
                  let e4 = this.bb.__offset(this.bb_pos, 4);
                  return e4 ? this.bb.readUint32(this.bb.__vector(this.bb_pos + e4) + 4 * t6) : 0;
                }
                nodeIndicesLength() {
                  let t6 = this.bb.__offset(this.bb_pos, 4);
                  return t6 ? this.bb.__vector_len(this.bb_pos + t6) : 0;
                }
                nodeIndicesArray() {
                  let t6 = this.bb.__offset(this.bb_pos, 4);
                  return t6 ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + t6), this.bb.__vector_len(this.bb_pos + t6)) : null;
                }
                kernelDefHashes(t6) {
                  let e4 = this.bb.__offset(this.bb_pos, 6);
                  return e4 ? this.bb.readUint64(this.bb.__vector(this.bb_pos + e4) + 8 * t6) : this.bb.createLong(0, 0);
                }
                kernelDefHashesLength() {
                  let t6 = this.bb.__offset(this.bb_pos, 6);
                  return t6 ? this.bb.__vector_len(this.bb_pos + t6) : 0;
                }
                static startKernelCreateInfos(t6) {
                  t6.startObject(2);
                }
                static addNodeIndices(t6, e4) {
                  t6.addFieldOffset(0, e4, 0);
                }
                static createNodeIndicesVector(t6, e4) {
                  t6.startVector(4, e4.length, 4);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--)
                    t6.addInt32(e4[n3]);
                  return t6.endVector();
                }
                static startNodeIndicesVector(t6, e4) {
                  t6.startVector(4, e4, 4);
                }
                static addKernelDefHashes(t6, e4) {
                  t6.addFieldOffset(1, e4, 0);
                }
                static createKernelDefHashesVector(t6, e4) {
                  t6.startVector(8, e4.length, 8);
                  for (let n3 = e4.length - 1; n3 >= 0; n3--)
                    t6.addInt64(e4[n3]);
                  return t6.endVector();
                }
                static startKernelDefHashesVector(t6, e4) {
                  t6.startVector(8, e4, 8);
                }
                static endKernelCreateInfos(t6) {
                  return t6.endObject();
                }
                static createKernelCreateInfos(t6, n3, r3) {
                  return e3.startKernelCreateInfos(t6), e3.addNodeIndices(t6, n3), e3.addKernelDefHashes(t6, r3), e3.endKernelCreateInfos(t6);
                }
              }
              t5.KernelCreateInfos = e3;
            }(t4.fbs || (t4.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsSubGraphSessionState(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsSubGraphSessionState(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                graphId(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 4);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                sessionState(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 6);
                  return n4 ? (e5 || new t3.experimental.fbs.SessionState()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                static startSubGraphSessionState(t4) {
                  t4.startObject(2);
                }
                static addGraphId(t4, e5) {
                  t4.addFieldOffset(0, e5, 0);
                }
                static addSessionState(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static endSubGraphSessionState(t4) {
                  let e5 = t4.endObject();
                  return t4.requiredField(e5, 4), e5;
                }
                static createSubGraphSessionState(t4, e5, r3) {
                  return n3.startSubGraphSessionState(t4), n3.addGraphId(t4, e5), n3.addSessionState(t4, r3), n3.endSubGraphSessionState(t4);
                }
              }
              e4.SubGraphSessionState = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsSessionState(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsSessionState(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                kernels(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 4);
                  return n4 ? (e5 || new t3.experimental.fbs.KernelCreateInfos()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                subGraphSessionStates(e5, n4) {
                  let r3 = this.bb.__offset(this.bb_pos, 6);
                  return r3 ? (n4 || new t3.experimental.fbs.SubGraphSessionState()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + r3) + 4 * e5), this.bb) : null;
                }
                subGraphSessionStatesLength() {
                  let t4 = this.bb.__offset(this.bb_pos, 6);
                  return t4 ? this.bb.__vector_len(this.bb_pos + t4) : 0;
                }
                static startSessionState(t4) {
                  t4.startObject(2);
                }
                static addKernels(t4, e5) {
                  t4.addFieldOffset(0, e5, 0);
                }
                static addSubGraphSessionStates(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static createSubGraphSessionStatesVector(t4, e5) {
                  t4.startVector(4, e5.length, 4);
                  for (let n4 = e5.length - 1; n4 >= 0; n4--)
                    t4.addOffset(e5[n4]);
                  return t4.endVector();
                }
                static startSubGraphSessionStatesVector(t4, e5) {
                  t4.startVector(4, e5, 4);
                }
                static endSessionState(t4) {
                  return t4.endObject();
                }
                static createSessionState(t4, e5, r3) {
                  return n3.startSessionState(t4), n3.addKernels(t4, e5), n3.addSubGraphSessionStates(t4, r3), n3.endSessionState(t4);
                }
              }
              e4.SessionState = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {})), function(t3) {
          !function(e3) {
            !function(e4) {
              class n3 {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(t4, e5) {
                  return this.bb_pos = t4, this.bb = e5, this;
                }
                static getRootAsInferenceSession(t4, e5) {
                  return (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static getSizePrefixedRootAsInferenceSession(t4, e5) {
                  return t4.setPosition(t4.position() + r2.flatbuffers.SIZE_PREFIX_LENGTH), (e5 || new n3()).__init(t4.readInt32(t4.position()) + t4.position(), t4);
                }
                static bufferHasIdentifier(t4) {
                  return t4.__has_identifier("ORTM");
                }
                ortVersion(t4) {
                  let e5 = this.bb.__offset(this.bb_pos, 4);
                  return e5 ? this.bb.__string(this.bb_pos + e5, t4) : null;
                }
                model(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 6);
                  return n4 ? (e5 || new t3.experimental.fbs.Model()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                sessionState(e5) {
                  let n4 = this.bb.__offset(this.bb_pos, 8);
                  return n4 ? (e5 || new t3.experimental.fbs.SessionState()).__init(this.bb.__indirect(this.bb_pos + n4), this.bb) : null;
                }
                static startInferenceSession(t4) {
                  t4.startObject(3);
                }
                static addOrtVersion(t4, e5) {
                  t4.addFieldOffset(0, e5, 0);
                }
                static addModel(t4, e5) {
                  t4.addFieldOffset(1, e5, 0);
                }
                static addSessionState(t4, e5) {
                  t4.addFieldOffset(2, e5, 0);
                }
                static endInferenceSession(t4) {
                  return t4.endObject();
                }
                static finishInferenceSessionBuffer(t4, e5) {
                  t4.finish(e5, "ORTM");
                }
                static finishSizePrefixedInferenceSessionBuffer(t4, e5) {
                  t4.finish(e5, "ORTM", true);
                }
                static createInferenceSession(t4, e5, r3, i3) {
                  return n3.startInferenceSession(t4), n3.addOrtVersion(t4, e5), n3.addModel(t4, r3), n3.addSessionState(t4, i3), n3.endInferenceSession(t4);
                }
              }
              e4.InferenceSession = n3;
            }(e3.fbs || (e3.fbs = {}));
          }(t3.experimental || (t3.experimental = {}));
        }(e2.onnxruntime || (e2.onnxruntime = {}));
      }, 7448: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.OnnxjsSessionHandler = void 0;
        const r2 = n2(1670), i2 = n2(9162);
        e2.OnnxjsSessionHandler = class {
          constructor(t3) {
            this.session = t3, this.inputNames = this.session.inputNames, this.outputNames = this.session.outputNames;
          }
          async dispose() {
          }
          async run(t3, e3, n3) {
            const o2 = new Map();
            for (const e4 in t3)
              if (Object.hasOwnProperty.call(t3, e4)) {
                const n4 = t3[e4];
                o2.set(e4, new i2.Tensor(n4.dims, n4.type, void 0, void 0, n4.data));
              }
            const a2 = await this.session.run(o2), s2 = {};
            return a2.forEach((t4, e4) => {
              s2[e4] = new r2.Tensor(t4.type, t4.data, t4.dims);
            }), s2;
          }
          startProfiling() {
            this.session.startProfiling();
          }
          endProfiling() {
            this.session.endProfiling();
          }
        };
      }, 6919: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.Session = void 0;
        const r2 = n2(7067), i2 = n2(1296), o2 = n2(7091), a2 = n2(1036), s2 = n2(6231), u2 = n2(2644);
        e2.Session = class {
          constructor(t3 = {}) {
            this._initialized = false, this.backendHint = t3.backendHint, this.profiler = s2.Profiler.create(t3.profiler), this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};
          }
          get inputNames() {
            return this._model.graph.getInputNames();
          }
          get outputNames() {
            return this._model.graph.getOutputNames();
          }
          startProfiling() {
            this.profiler.start();
          }
          endProfiling() {
            this.profiler.stop();
          }
          async loadModel(t3, e3, n3) {
            await this.profiler.event("session", "Session.loadModel", async () => {
              const a3 = await (0, o2.resolveBackend)(this.backendHint);
              if (this.sessionHandler = a3.createSessionHandler(this.context), this._model = new u2.Model(), typeof t3 == "string") {
                const e4 = t3.endsWith(".ort");
                if (typeof fetch == "undefined") {
                  const n4 = await (0, i2.promisify)(r2.readFile)(t3);
                  this.initialize(n4, e4);
                } else {
                  const n4 = await fetch(t3), r3 = await n4.arrayBuffer();
                  this.initialize(new Uint8Array(r3), e4);
                }
              } else if (ArrayBuffer.isView(t3))
                this.initialize(t3);
              else {
                const r3 = new Uint8Array(t3, e3 || 0, n3 || t3.byteLength);
                this.initialize(r3);
              }
            });
          }
          initialize(t3, e3) {
            if (this._initialized)
              throw new Error("already initialized");
            this.profiler.event("session", "Session.initialize", () => {
              const n3 = this.sessionHandler.transformGraph ? this.sessionHandler : void 0;
              this._model.load(t3, n3, e3), this.sessionHandler.onGraphInitialized && this.sessionHandler.onGraphInitialized(this._model.graph), this.initializeOps(this._model.graph), this._executionPlan = new a2.ExecutionPlan(this._model.graph, this._ops, this.profiler);
            }), this._initialized = true;
          }
          async run(t3) {
            if (!this._initialized)
              throw new Error("session not initialized yet");
            return this.profiler.event("session", "Session.run", async () => {
              const e3 = this.normalizeAndValidateInputs(t3), n3 = await this._executionPlan.execute(this.sessionHandler, e3);
              return this.createOutput(n3);
            });
          }
          normalizeAndValidateInputs(t3) {
            const e3 = this._model.graph.getInputNames();
            if (Array.isArray(t3)) {
              if (t3.length !== e3.length)
                throw new Error(`incorrect input array length: expected ${e3.length} but got ${t3.length}`);
            } else {
              if (t3.size !== e3.length)
                throw new Error(`incorrect input map size: expected ${e3.length} but got ${t3.size}`);
              const n3 = new Array(t3.size);
              let r3 = 0;
              for (let i3 = 0; i3 < e3.length; ++i3) {
                const o3 = t3.get(e3[i3]);
                if (!o3)
                  throw new Error(`missing input tensor for: '${name}'`);
                n3[r3++] = o3;
              }
              t3 = n3;
            }
            if (this.context.graphInputTypes && this.context.graphInputTypes.length !== 0 && this.context.graphInputDims && this.context.graphInputDims.length !== 0)
              this.validateInputTensorDims(this.context.graphInputDims, t3, false);
            else {
              const e4 = this._model.graph.getInputIndices(), n3 = this._model.graph.getValues(), r3 = new Array(e4.length);
              for (let i3 = 0; i3 < e4.length; ++i3) {
                const o3 = n3[e4[i3]];
                r3[i3] = o3.type.shape.dims, this.context.graphInputTypes.push(o3.type.tensorType), this.context.graphInputDims.push(t3[i3].dims);
              }
              this.validateInputTensorDims(r3, t3, true);
            }
            return this.validateInputTensorTypes(this.context.graphInputTypes, t3), t3;
          }
          validateInputTensorTypes(t3, e3) {
            for (let n3 = 0; n3 < e3.length; n3++) {
              const r3 = t3[n3], i3 = e3[n3].type;
              if (r3 !== i3)
                throw new Error(`input tensor[${n3}] check failed: expected type '${r3}' but got ${i3}`);
            }
          }
          validateInputTensorDims(t3, e3, n3) {
            for (let r3 = 0; r3 < e3.length; r3++) {
              const i3 = t3[r3], o3 = e3[r3].dims;
              if (!this.compareTensorDims(i3, o3, n3))
                throw new Error(`input tensor[${r3}] check failed: expected shape '[${i3.join(",")}]' but got [${o3.join(",")}]`);
            }
          }
          compareTensorDims(t3, e3, n3) {
            if (t3.length !== e3.length)
              return false;
            for (let r3 = 0; r3 < t3.length; ++r3)
              if (t3[r3] !== e3[r3] && (!n3 || t3[r3] !== 0))
                return false;
            return true;
          }
          createOutput(t3) {
            const e3 = this._model.graph.getOutputNames();
            if (t3.length !== e3.length)
              throw new Error("expected number of outputs do not match number of generated outputs");
            const n3 = new Map();
            for (let r3 = 0; r3 < e3.length; ++r3)
              n3.set(e3[r3], t3[r3]);
            return n3;
          }
          initializeOps(t3) {
            const e3 = t3.getNodes();
            this._ops = new Array(e3.length);
            for (let n3 = 0; n3 < e3.length; n3++)
              this._ops[n3] = this.sessionHandler.resolve(e3[n3], this._model.opsets, t3);
          }
        };
      }, 9162: function(t2, e2, n2) {
        "use strict";
        var r2 = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : {default: t3};
        };
        Object.defineProperty(e2, "__esModule", {value: true}), e2.Tensor = void 0;
        const i2 = n2(3442), o2 = r2(n2(3720)), a2 = n2(1446), s2 = n2(9395), u2 = n2(2517);
        var c2 = s2.onnxruntime.experimental.fbs;
        class l2 {
          get data() {
            if (this.cache === void 0) {
              const t3 = this.dataProvider(this.dataId);
              if (t3.length !== this.size)
                throw new Error("Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.");
              this.cache = t3;
            }
            return this.cache;
          }
          get stringData() {
            if (this.type !== "string")
              throw new TypeError("data type is not string");
            return this.data;
          }
          get integerData() {
            switch (this.type) {
              case "uint8":
              case "int8":
              case "uint16":
              case "int16":
              case "int32":
              case "uint32":
              case "bool":
                return this.data;
              default:
                throw new TypeError("data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)");
            }
          }
          get floatData() {
            switch (this.type) {
              case "float32":
              case "float64":
                return this.data;
              default:
                throw new TypeError("data type is not float (float32, float64)");
            }
          }
          get numberData() {
            if (this.type !== "string")
              return this.data;
            throw new TypeError("type cannot be non-number (string)");
          }
          get(t3) {
            return this.data[u2.ShapeUtil.indicesToOffset(t3, this.strides)];
          }
          set(t3, e3) {
            this.data[u2.ShapeUtil.indicesToOffset(t3, this.strides)] = e3;
          }
          async getData() {
            return this.cache === void 0 && (this.cache = await this.asyncDataProvider(this.dataId)), this.cache;
          }
          get strides() {
            return this._strides || (this._strides = u2.ShapeUtil.computeStrides(this.dims)), this._strides;
          }
          constructor(t3, e3, n3, r3, o3, a3 = i2.Guid.create()) {
            this.dims = t3, this.type = e3, this.dataProvider = n3, this.asyncDataProvider = r3, this.cache = o3, this.dataId = a3, this.size = u2.ShapeUtil.validateDimsAndCalcSize(t3);
            const s3 = this.size, c3 = n3 === void 0 && r3 === void 0 && o3 === void 0;
            if (o3 !== void 0 && o3.length !== s3)
              throw new RangeError("Input dims doesn't match data length.");
            if (e3 === "string") {
              if (!(o3 === void 0 || Array.isArray(o3) && o3.every((t4) => typeof t4 == "string")))
                throw new TypeError("cache should be a string array");
              c3 && (this.cache = new Array(s3));
            } else {
              if (o3 !== void 0) {
                const t4 = f(e3);
                if (!(o3 instanceof t4))
                  throw new TypeError(`cache should be type ${t4.name}`);
              }
              if (c3) {
                const t4 = new ArrayBuffer(s3 * function(t5) {
                  switch (t5) {
                    case "bool":
                    case "int8":
                    case "uint8":
                      return 1;
                    case "int16":
                    case "uint16":
                      return 2;
                    case "int32":
                    case "uint32":
                    case "float32":
                      return 4;
                    case "float64":
                      return 8;
                    default:
                      throw new Error(`cannot calculate sizeof() on type ${t5}`);
                  }
                }(e3));
                this.cache = function(t5, e4) {
                  return new (f(e4))(t5);
                }(t4, e3);
              }
            }
          }
          static fromProto(t3) {
            if (!t3)
              throw new Error("cannot construct Value from an empty tensor");
            const e3 = u2.ProtoUtil.tensorDataTypeFromProto(t3.dataType), n3 = u2.ProtoUtil.tensorDimsFromProto(t3.dims), r3 = new l2(n3, e3);
            if (e3 === "string")
              t3.stringData.forEach((t4, e4) => {
                r3.data[e4] = (0, u2.decodeUtf8String)(t4);
              });
            else if (t3.rawData && typeof t3.rawData.byteLength == "number" && t3.rawData.byteLength > 0) {
              const e4 = r3.data, n4 = new DataView(t3.rawData.buffer, t3.rawData.byteOffset, t3.rawData.byteLength), i3 = p(t3.dataType), o3 = t3.rawData.byteLength / i3;
              if (t3.rawData.byteLength % i3 != 0)
                throw new Error("invalid buffer length");
              if (e4.length !== o3)
                throw new Error("buffer length mismatch");
              for (let r4 = 0; r4 < o3; r4++) {
                const o4 = h2(n4, t3.dataType, r4 * i3);
                e4[r4] = o4;
              }
            } else {
              let e4;
              switch (t3.dataType) {
                case a2.onnx.TensorProto.DataType.FLOAT:
                  e4 = t3.floatData;
                  break;
                case a2.onnx.TensorProto.DataType.INT32:
                case a2.onnx.TensorProto.DataType.INT16:
                case a2.onnx.TensorProto.DataType.UINT16:
                case a2.onnx.TensorProto.DataType.INT8:
                case a2.onnx.TensorProto.DataType.UINT8:
                case a2.onnx.TensorProto.DataType.BOOL:
                  e4 = t3.int32Data;
                  break;
                case a2.onnx.TensorProto.DataType.INT64:
                  e4 = t3.int64Data;
                  break;
                case a2.onnx.TensorProto.DataType.DOUBLE:
                  e4 = t3.doubleData;
                  break;
                case a2.onnx.TensorProto.DataType.UINT32:
                case a2.onnx.TensorProto.DataType.UINT64:
                  e4 = t3.uint64Data;
                  break;
                default:
                  throw new Error("unspecific error");
              }
              if (e4 == null)
                throw new Error("failed to populate data from a tensorproto value");
              const n4 = r3.data;
              if (n4.length !== e4.length)
                throw new Error("array length mismatch");
              for (let r4 = 0; r4 < e4.length; r4++) {
                const i3 = e4[r4];
                o2.default.isLong(i3) ? n4[r4] = d2(i3, t3.dataType) : n4[r4] = i3;
              }
            }
            return r3;
          }
          static fromData(t3, e3, n3) {
            return new l2(e3, n3, void 0, void 0, t3);
          }
          static fromOrtTensor(t3) {
            if (!t3)
              throw new Error("cannot construct Value from an empty tensor");
            const e3 = u2.ProtoUtil.tensorDimsFromORTFormat(t3), n3 = u2.ProtoUtil.tensorDataTypeFromProto(t3.dataType()), r3 = new l2(e3, n3);
            if (n3 === "string")
              for (let e4 = 0; e4 < t3.stringDataLength(); e4++)
                r3.data[e4] = t3.stringData(e4);
            else if (t3.rawDataArray() && typeof t3.rawDataLength() == "number" && t3.rawDataLength() > 0) {
              const e4 = r3.data, n4 = new DataView(t3.rawDataArray().buffer, t3.rawDataArray().byteOffset, t3.rawDataLength()), i3 = p(t3.dataType()), o3 = t3.rawDataLength() / i3;
              if (t3.rawDataLength() % i3 != 0)
                throw new Error("invalid buffer length");
              if (e4.length !== o3)
                throw new Error("buffer length mismatch");
              for (let r4 = 0; r4 < o3; r4++) {
                const o4 = h2(n4, t3.dataType(), r4 * i3);
                e4[r4] = o4;
              }
            }
            return r3;
          }
        }
        function p(t3) {
          switch (t3) {
            case a2.onnx.TensorProto.DataType.UINT8:
            case a2.onnx.TensorProto.DataType.INT8:
            case a2.onnx.TensorProto.DataType.BOOL:
              return 1;
            case a2.onnx.TensorProto.DataType.UINT16:
            case a2.onnx.TensorProto.DataType.INT16:
              return 2;
            case a2.onnx.TensorProto.DataType.FLOAT:
            case a2.onnx.TensorProto.DataType.INT32:
            case a2.onnx.TensorProto.DataType.UINT32:
              return 4;
            case a2.onnx.TensorProto.DataType.INT64:
            case a2.onnx.TensorProto.DataType.DOUBLE:
            case a2.onnx.TensorProto.DataType.UINT64:
              return 8;
            default:
              throw new Error(`cannot calculate sizeof() on type ${a2.onnx.TensorProto.DataType[t3]}`);
          }
        }
        function f(t3) {
          switch (t3) {
            case "bool":
            case "uint8":
              return Uint8Array;
            case "int8":
              return Int8Array;
            case "int16":
              return Int16Array;
            case "uint16":
              return Uint16Array;
            case "int32":
              return Int32Array;
            case "uint32":
              return Uint32Array;
            case "float32":
              return Float32Array;
            case "float64":
              return Float64Array;
            default:
              throw new Error("unspecified error");
          }
        }
        function d2(t3, e3) {
          if (e3 === a2.onnx.TensorProto.DataType.INT64 || e3 === c2.TensorDataType.INT64) {
            if (t3.greaterThanOrEqual(2147483648) || t3.lessThan(-2147483648))
              throw new TypeError("int64 is not supported");
          } else {
            if (e3 !== a2.onnx.TensorProto.DataType.UINT32 && e3 !== c2.TensorDataType.UINT32 && e3 !== a2.onnx.TensorProto.DataType.UINT64 && e3 !== c2.TensorDataType.UINT64)
              throw new TypeError(`not a LONG type: ${a2.onnx.TensorProto.DataType[e3]}`);
            if (t3.greaterThanOrEqual(4294967296) || t3.lessThan(0))
              throw new TypeError("uint64 is not supported");
          }
          return t3.toNumber();
        }
        function h2(t3, e3, n3) {
          switch (e3) {
            case a2.onnx.TensorProto.DataType.BOOL:
            case a2.onnx.TensorProto.DataType.UINT8:
              return t3.getUint8(n3);
            case a2.onnx.TensorProto.DataType.INT8:
              return t3.getInt8(n3);
            case a2.onnx.TensorProto.DataType.UINT16:
              return t3.getUint16(n3, true);
            case a2.onnx.TensorProto.DataType.INT16:
              return t3.getInt16(n3, true);
            case a2.onnx.TensorProto.DataType.FLOAT:
              return t3.getFloat32(n3, true);
            case a2.onnx.TensorProto.DataType.INT32:
              return t3.getInt32(n3, true);
            case a2.onnx.TensorProto.DataType.UINT32:
              return t3.getUint32(n3, true);
            case a2.onnx.TensorProto.DataType.INT64:
              return d2(o2.default.fromBits(t3.getUint32(n3, true), t3.getUint32(n3 + 4, true), false), e3);
            case a2.onnx.TensorProto.DataType.DOUBLE:
              return t3.getFloat64(n3, true);
            case a2.onnx.TensorProto.DataType.UINT64:
              return d2(o2.default.fromBits(t3.getUint32(n3, true), t3.getUint32(n3 + 4, true), true), e3);
            default:
              throw new Error(`cannot read from DataView for type ${a2.onnx.TensorProto.DataType[e3]}`);
          }
        }
        e2.Tensor = l2;
      }, 2517: function(t2, e2, n2) {
        "use strict";
        var r2 = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : {default: t3};
        };
        Object.defineProperty(e2, "__esModule", {value: true}), e2.decodeUtf8String = e2.MAX_CLIP = e2.MIN_CLIP = e2.PoolConvUtil = e2.ReduceUtil = e2.SplitUtil = e2.MathUtil = e2.ShapeUtil = e2.LongUtil = e2.ProtoUtil = e2.GemmUtil = e2.arrayCopyHelper = e2.BroadcastUtil = e2.MatMulUtil = e2.ArrayUtil = e2.assert = e2.checkInputsShape = void 0;
        const i2 = n2(5686), o2 = r2(n2(3720)), a2 = n2(1446), s2 = n2(9162);
        e2.checkInputsShape = function(t3, ...e3) {
          if (!t3 || t3.length !== e3.length)
            return false;
          for (let n3 = 0; n3 < t3.length; n3++)
            if (!t3[n3].dims || t3[n3].dims.length !== e3[n3])
              return false;
          return true;
        }, e2.assert = function(t3, e3) {
          if (!t3)
            throw new Error(typeof e3 == "string" ? e3 : e3());
        }, e2.ArrayUtil = class {
          static arraysEqual(t3, e3) {
            if (t3.length !== e3.length)
              return false;
            for (let n3 = 0; n3 < t3.length; n3++)
              if (t3[n3] !== e3[n3])
                return false;
            return true;
          }
        };
        class u2 {
          static preprocessInputShapes(t3, e3) {
            return [t3.length === 1 ? [1, t3[0]] : t3, e3.length === 1 ? [e3[0], 1] : e3];
          }
          static postprocessOutputShape(t3, e3, n3) {
            e3 === 1 && t3.splice(t3.length - 2, 1), n3 === 1 && t3.pop();
          }
          static calcMatMulShape(t3, e3) {
            return t3[1] !== e3[0] ? void 0 : [t3[0], e3[1]];
          }
        }
        e2.MatMulUtil = u2;
        class c2 {
          static calcShape(t3, e3, n3 = false) {
            const r3 = t3.length, i3 = e3.length;
            if (r3 === 0)
              return e3;
            if (i3 === 0)
              return t3;
            const o3 = Math.max(t3.length, e3.length), a3 = new Array(o3);
            if (n3) {
              if (r3 < 2 || i3 < 2)
                return;
              const n4 = u2.calcMatMulShape([t3[r3 - 2], t3[r3 - 1]], [e3[i3 - 2], e3[i3 - 1]]);
              if (n4 === void 0)
                return;
              [a3[o3 - 2], a3[o3 - 1]] = n4;
            }
            for (let s3 = n3 ? 3 : 1; s3 <= o3; s3++) {
              const n4 = r3 - s3 < 0 ? 1 : t3[r3 - s3], u3 = i3 - s3 < 0 ? 1 : e3[i3 - s3];
              if (n4 !== u3 && n4 > 1 && u3 > 1)
                return;
              a3[o3 - s3] = Math.max(n4, u3);
            }
            return a3;
          }
          static index(t3, e3) {
            const n3 = new Array(e3.length);
            return c2.fillIndex(t3, e3, n3), n3;
          }
          static fillIndex(t3, e3, n3) {
            const r3 = t3.length - e3.length;
            for (let i3 = 0; i3 < e3.length; i3++)
              n3[i3] = t3[r3 + i3] % e3[i3];
          }
          static calc(t3, e3, n3, r3, i3) {
            const o3 = c2.calcShape(t3.dims, e3.dims);
            if (o3) {
              if (r3 && !f.areEqual(o3, t3.dims))
                return;
              const a3 = f.size(o3), u3 = r3 ? t3 : new s2.Tensor(o3, i3 || t3.type);
              if (o3.length === 0)
                u3.set([], n3(t3.get([]), e3.get([])));
              else {
                const r4 = new Array(o3.length), i4 = new Array(t3.dims.length), s3 = new Array(e3.dims.length);
                let l3, p2 = 0, f2 = 0, d3 = false, h3 = false;
                t3.dims.length === 0 && (p2 = t3.get([]), d3 = true), e3.dims.length === 0 && (f2 = e3.get([]), h3 = true);
                for (let g3 = 0; g3 < a3; g3++) {
                  l3 = g3;
                  for (let t4 = o3.length - 1; t4 >= 0; t4--)
                    r4[t4] = l3 % o3[t4], l3 = Math.floor(l3 / o3[t4]);
                  d3 || (c2.fillIndex(r4, t3.dims, i4), p2 = t3.get(i4)), h3 || (c2.fillIndex(r4, e3.dims, s3), f2 = e3.get(s3)), u3.set(r4, n3(p2, f2));
                }
              }
              return u3;
            }
          }
          static isValidBroadcast(t3, e3) {
            const n3 = t3.length, r3 = e3.length;
            if (n3 > r3)
              return false;
            for (let i3 = 1; i3 <= n3; i3++)
              if (t3[n3 - i3] !== 1 && t3[n3 - i3] !== e3[r3 - i3])
                return false;
            return true;
          }
          static getBroadcastDims(t3, e3) {
            const n3 = t3.length, r3 = [];
            for (let i3 = 0; i3 < n3; i3++) {
              const o3 = n3 - 1 - i3, a3 = t3[o3] || 1;
              (e3[e3.length - 1 - i3] || 1) > 1 && a3 === 1 && r3.unshift(o3);
            }
            return r3;
          }
        }
        e2.BroadcastUtil = c2, e2.arrayCopyHelper = function(t3, e3, n3, r3, i3) {
          if (r3 < 0 || r3 >= e3.length)
            throw new Error("sourceIndex out of bounds");
          if (n3 < 0 || n3 >= t3.length)
            throw new Error("targetIndex out of bounds");
          if (r3 + i3 > e3.length)
            throw new Error("source indices to be copied are outside bounds");
          if (n3 + i3 > t3.length)
            throw new Error("target array is too small to hold result");
          for (let o3 = 0; o3 < i3; o3++)
            t3[n3 + o3] = e3[r3 + o3];
        }, e2.GemmUtil = class {
          static getShapeOfGemmResult(t3, e3, n3, r3, i3) {
            if (t3.length !== 2 || n3.length !== 2)
              throw new Error("shape need to be of size 2");
            let o3, a3, s3;
            e3 ? (o3 = t3[1], a3 = t3[0]) : (o3 = t3[0], a3 = t3[1]);
            let u3 = -1;
            if (r3 ? (s3 = n3[0], u3 = 1) : (s3 = n3[1], u3 = 0), n3[u3] !== a3)
              throw new Error("dimension mismatch");
            if (o3 <= 0 || s3 <= 0 || a3 <= 0)
              throw new Error("invalid shape specified");
            if (i3 && !c2.isValidBroadcast(i3, [o3, s3]))
              throw new Error("gemm: invalid bias shape for broadcast");
            return [o3, s3, a3];
          }
        };
        class l2 {
          static tensorDataTypeFromProto(t3) {
            switch (t3) {
              case a2.onnx.TensorProto.DataType.INT8:
                return "int8";
              case a2.onnx.TensorProto.DataType.UINT8:
                return "uint8";
              case a2.onnx.TensorProto.DataType.BOOL:
                return "bool";
              case a2.onnx.TensorProto.DataType.INT16:
                return "int16";
              case a2.onnx.TensorProto.DataType.UINT16:
                return "uint16";
              case a2.onnx.TensorProto.DataType.INT32:
                return "int32";
              case a2.onnx.TensorProto.DataType.UINT32:
                return "uint32";
              case a2.onnx.TensorProto.DataType.FLOAT:
                return "float32";
              case a2.onnx.TensorProto.DataType.DOUBLE:
                return "float64";
              case a2.onnx.TensorProto.DataType.STRING:
                return "string";
              case a2.onnx.TensorProto.DataType.INT64:
                return "int32";
              case a2.onnx.TensorProto.DataType.UINT64:
                return "uint32";
              default:
                throw new Error(`unsupported data type: ${a2.onnx.TensorProto.DataType[t3]}`);
            }
          }
          static tensorDataTypeStringToEnum(t3) {
            switch (t3) {
              case "int8":
                return a2.onnx.TensorProto.DataType.INT8;
              case "uint8":
                return a2.onnx.TensorProto.DataType.UINT8;
              case "bool":
                return a2.onnx.TensorProto.DataType.BOOL;
              case "int16":
                return a2.onnx.TensorProto.DataType.INT16;
              case "uint16":
                return a2.onnx.TensorProto.DataType.UINT16;
              case "int32":
                return a2.onnx.TensorProto.DataType.INT32;
              case "uint32":
                return a2.onnx.TensorProto.DataType.UINT32;
              case "float32":
                return a2.onnx.TensorProto.DataType.FLOAT;
              case "float64":
                return a2.onnx.TensorProto.DataType.DOUBLE;
              case "string":
                return a2.onnx.TensorProto.DataType.STRING;
              case "int64":
                return a2.onnx.TensorProto.DataType.INT64;
              case "uint64":
                return a2.onnx.TensorProto.DataType.UINT64;
              default:
                throw new Error(`unsupported data type: ${t3}`);
            }
          }
          static tensorDimsFromProto(t3) {
            return t3.map((t4) => o2.default.isLong(t4) ? t4.toNumber() : t4);
          }
          static tensorValueTypeFromProto(t3) {
            return {tensorType: l2.tensorDataTypeFromProto(t3.elemType), shape: {dims: l2.tensorDimsFromProto(t3.shape.dim.map((t4) => t4.dimValue))}};
          }
          static tensorDimsFromORTFormat(t3) {
            const e3 = [];
            for (let n3 = 0; n3 < t3.dimsLength(); n3++)
              e3.push(p.longToNumber(t3.dims(n3)));
            return e3;
          }
          static tensorAttributesFromORTFormat(t3) {
            const e3 = [];
            for (let n3 = 0; n3 < t3.attributesLength(); n3++)
              e3.push(t3.attributes(n3));
            return e3;
          }
        }
        e2.ProtoUtil = l2;
        class p {
          static longToNumber(t3, e3) {
            return o2.default.isLong(t3) ? t3.toNumber() : t3 instanceof i2.flatbuffers.Long ? o2.default.fromValue({low: t3.low, high: t3.high, unsigned: e3 != null && e3}).toNumber() : t3;
          }
          static isLong(t3) {
            return o2.default.isLong(t3) || t3 instanceof i2.flatbuffers.Long;
          }
        }
        e2.LongUtil = p;
        class f {
          static size(t3) {
            return f.getSizeFromDimensionRange(t3, 0, t3.length);
          }
          static sizeFromDimension(t3, e3) {
            if (e3 < 0 || e3 > t3.length)
              throw new Error(`invalid dimension of ${e3} for sizeFromDimension as Tensor has ${t3.length} dimensions.`);
            return f.getSizeFromDimensionRange(t3, e3, t3.length);
          }
          static sizeToDimension(t3, e3) {
            if (e3 < 0 || e3 > t3.length)
              throw new Error(`invalid dimension of ${e3} for sizeToDimension as Tensor has ${t3.length} dimensions.`);
            return f.getSizeFromDimensionRange(t3, 0, e3);
          }
          static getSizeFromDimensionRange(t3, e3, n3) {
            let r3 = 1;
            for (let i3 = e3; i3 < n3; i3++) {
              if (t3[i3] <= 0)
                throw new Error("cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.");
              r3 *= t3[i3];
            }
            return r3;
          }
          static computeStrides(t3) {
            const e3 = t3.length;
            if (e3 === 0)
              return [];
            if (e3 === 1)
              return [1];
            const n3 = new Array(e3);
            n3[e3 - 1] = 1, n3[e3 - 2] = t3[e3 - 1];
            for (let r3 = e3 - 3; r3 >= 0; --r3)
              n3[r3] = n3[r3 + 1] * t3[r3 + 1];
            return n3;
          }
          static transpose(t3) {
            return t3.slice().reverse();
          }
          static indicesToOffset(t3, e3, n3) {
            n3 === void 0 && (n3 = t3.length);
            let r3 = 0;
            for (let i3 = 0; i3 < n3; ++i3)
              r3 += e3[i3] * t3[i3];
            return r3;
          }
          static offsetToIndices(t3, e3) {
            const n3 = e3.length;
            if (n3 === 0)
              return [];
            if (n3 === 1)
              return [t3 * e3[0]];
            const r3 = new Array(e3.length);
            for (let n4 = 0; n4 < r3.length - 1; ++n4)
              r3[n4] = Math.floor(t3 / e3[n4]), t3 -= r3[n4] * e3[n4];
            return r3[r3.length - 1] = t3, r3;
          }
          static normalizeAxis(t3, e3) {
            if (t3 < -e3 && t3 >= e3)
              throw new Error("unsupported axis for this operation.");
            return t3 < 0 ? t3 + e3 : t3;
          }
          static normalizeAxes(t3, e3) {
            return t3.map((t4) => this.normalizeAxis(t4, e3));
          }
          static incrementIndex(t3, e3, n3) {
            if (e3.length === 0 || t3.length === 0)
              throw new Error("Index incrementing unsupported for scalar Tensor");
            if (n3 === void 0)
              n3 = e3.length;
            else if (n3 <= 0 || n3 > e3.length)
              throw new Error("Incorrect axis to increment on");
            for (let r3 = n3 - 1; r3 >= 0 && (t3[r3]++, !(t3[r3] < e3[r3])); --r3)
              t3[r3] = 0;
          }
          static calculateReshapedDims(t3, e3) {
            if (e3.length === 0) {
              if (t3.length === 0 || f.size(t3) === 1)
                return [];
              throw new Error("cannot reshape to a scalar Tensor");
            }
            const n3 = e3.length, r3 = new Array(n3);
            let i3 = -1, o3 = 1;
            for (let a4 = 0; a4 < n3; a4++) {
              if (e3[a4] < -1)
                throw new Error("a dimension in shape hints cannot be less than -1");
              if (e3[a4] === -1) {
                if (i3 !== -1)
                  throw new Error("at most one dimension in shape hints can be -1");
                i3 = a4;
              } else {
                if (e3[a4] === 0) {
                  if (a4 >= t3.length)
                    throw new Error("the dimension with value zero exceeds the dimension size of the input tensor");
                  r3[a4] = t3[a4];
                } else
                  r3[a4] = e3[a4];
                o3 *= r3[a4];
              }
            }
            const a3 = f.size(t3);
            if (i3 !== -1) {
              if (a3 % o3 != 0)
                throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${t3}] Output shape: [${e3}]`);
              r3[i3] = a3 / o3;
            } else if (o3 !== a3)
              throw new Error("reshapedDims and originalDims don't have matching sizes");
            return r3;
          }
          static sortBasedOnPerm(t3, e3) {
            return e3 ? e3.map((e4) => t3[e4]) : t3.slice().reverse();
          }
          static padShape(t3, e3) {
            const n3 = t3.length;
            return t3.map((t4, r3) => t4 + e3[r3] + e3[r3 + n3]);
          }
          static areEqual(t3, e3) {
            return t3.length === e3.length && t3.every((t4, n3) => t4 === e3[n3]);
          }
          static validateDimsAndCalcSize(t3) {
            if (t3.length > 6)
              throw new TypeError("Only rank 0 to 6 is supported for tensor shape.");
            let e3 = 1;
            for (const n3 of t3) {
              if (!Number.isInteger(n3))
                throw new TypeError(`Invalid shape: ${n3} is not an integer`);
              if (n3 < 0 || n3 > 2147483647)
                throw new TypeError(`Invalid shape: length ${n3} is not allowed`);
              e3 *= n3;
            }
            return e3;
          }
          static flattenShape(t3, e3) {
            e3 < 0 && (e3 += t3.length);
            const n3 = t3.reduce((t4, e4) => t4 * e4, 1), r3 = t3.slice(e3).reduce((t4, e4) => t4 * e4, 1);
            return [n3 / r3, r3];
          }
          static squeezeShape(t3, e3) {
            const n3 = new Array();
            e3 = f.normalizeAxes(e3, t3.length);
            for (let r3 = 0; r3 < t3.length; r3++) {
              const i3 = e3.indexOf(r3) >= 0;
              if (i3 && t3[r3] !== 1)
                throw new Error("squeeze an axis of size different than 1");
              (e3.length === 0 && t3[r3] > 1 || e3.length > 0 && !i3) && n3.push(t3[r3]);
            }
            return n3;
          }
          static unsqueezeShape(t3, e3) {
            const n3 = new Array(t3.length + e3.length);
            n3.fill(0);
            for (let t4 = 0; t4 < e3.length; t4++) {
              const r4 = f.normalizeAxis(e3[t4], n3.length);
              if (r4 >= n3.length)
                throw new Error("'axes' has an out of range axis");
              if (n3[r4] !== 0)
                throw new Error("'axes' has a duplicate axis");
              n3[r4] = 1;
            }
            let r3 = 0;
            for (let e4 = 0; e4 < n3.length; e4++)
              n3[e4] === 0 && (n3[e4] = t3[r3++]);
            if (r3 !== t3.length)
              throw new Error("the unsqueezed dimension could not be established");
            return n3;
          }
        }
        e2.ShapeUtil = f, e2.MathUtil = class {
          static sqr(t3, e3, n3, r3, i3) {
            if (r3 < 0 || r3 >= e3.length)
              throw new Error("sourceIndex out of bounds");
            if (n3 < 0 || n3 >= t3.length)
              throw new Error("targetIndex out of bounds");
            if (r3 + i3 > e3.length)
              throw new Error("source indices to be copied are outside bounds");
            if (n3 + i3 > t3.length)
              throw new Error("target array is too small to hold result");
            for (let o3 = 0; o3 < i3; o3++)
              t3[n3 + o3] += Math.pow(e3[r3 + o3], 2);
          }
          static axpy(t3, e3, n3, r3, i3, o3) {
            if (r3 < 0 || r3 >= e3.length)
              throw new Error("sourceIndex out of bounds");
            if (n3 < 0 || n3 >= t3.length)
              throw new Error("targetIndex out of bounds");
            if (r3 + i3 > e3.length)
              throw new Error("source indices to be copied are outside bounds");
            if (n3 + i3 > t3.length)
              throw new Error("target array is too small to hold result");
            for (let a3 = 0; a3 < i3; a3++)
              t3[n3 + a3] += o3 * e3[r3 + a3];
          }
          static powx(t3, e3, n3, r3, i3, o3) {
            if (r3 < 0 || r3 >= e3.length)
              throw new Error("sourceIndex out of bounds");
            if (n3 < 0 || n3 >= t3.length)
              throw new Error("targetIndex out of bounds");
            if (r3 + i3 > e3.length)
              throw new Error("source indices to be copied are outside bounds");
            if (n3 + i3 > t3.length)
              throw new Error("target array is too small to hold result");
            for (let a3 = 0; a3 < i3; a3++)
              t3[n3 + a3] = Math.pow(e3[r3 + a3], o3);
          }
          static mul(t3, e3, n3, r3, i3) {
            if (r3 < 0 || r3 >= e3.length)
              throw new Error("sourceIndex out of bounds");
            if (n3 < 0 || n3 >= t3.length)
              throw new Error("targetIndex out of bounds");
            if (r3 + i3 > e3.length)
              throw new Error("source indices to be copied are outside bounds");
            if (n3 + i3 > t3.length)
              throw new Error("target array is too small to hold result");
            for (let o3 = 0; o3 < i3; o3++)
              t3[n3 + o3] = e3[r3 + o3] * t3[n3 + o3];
          }
        };
        class d2 {
          static splitShape(t3, e3, n3, r3) {
            if (n3.length === 0) {
              if (!r3)
                throw new Error("need to know number of outputs when the 'split' attribute is not specified");
              d2.determineSplit(t3[e3], r3, n3);
            }
            const i3 = [], o3 = [0];
            for (let r4 = 0; r4 < n3.length; ++r4) {
              r4 !== 0 && o3.push(o3[r4 - 1] + n3[r4 - 1]);
              const a3 = t3.slice();
              a3[e3] = n3[r4], i3.push(a3);
            }
            return [i3, o3];
          }
          static determineSplit(t3, e3, n3) {
            if (t3 % e3 != 0)
              throw new Error("cannot split tensor to equal sized parts");
            for (let r3 = 0; r3 < e3; ++r3)
              n3.push(t3 / e3);
          }
        }
        e2.SplitUtil = d2;
        class h2 {
          static calcReduce(t3, e3, n3, r3, i3) {
            const o3 = t3.dims.slice(0);
            e3.length === 0 && o3.forEach((t4, n4) => e3.push(n4));
            const a3 = h2.calcReduceShape(o3, e3, true), u3 = f.size(a3), l3 = new s2.Tensor(a3, t3.type), p2 = f.computeStrides(a3), d3 = f.computeStrides(o3), g3 = new Array(o3.length);
            for (let n4 = 0; n4 < u3; n4++) {
              const a4 = f.offsetToIndices(n4, p2);
              c2.fillIndex(a4, o3, g3), l3.set(a4, h2.calcReduceByAxis(t3.numberData, e3, o3, 0, f.indicesToOffset(g3, d3), r3, i3));
            }
            return n3 ? l3 : new s2.Tensor(h2.calcReduceShape(o3, e3, n3), l3.type, void 0, void 0, l3.data, l3.dataId);
          }
          static calcReduceByAxis(t3, e3, n3, r3, i3, o3, a3) {
            let s3 = 0;
            if (r3 >= e3.length)
              return o3(t3[i3]);
            const u3 = e3[r3], c3 = u3 >= n3.length ? 1 : f.size(n3.slice(u3 + 1));
            for (let l3 = 0; l3 < n3[u3]; l3++)
              s3 = l3 === 0 ? h2.calcReduceByAxis(t3, e3, n3, r3 + 1, i3, o3, a3) : a3(s3, h2.calcReduceByAxis(t3, e3, n3, r3 + 1, i3, o3, a3)), i3 += c3;
            return s3;
          }
          static calcReduceShape(t3, e3, n3) {
            const r3 = t3.slice();
            for (let t4 = 0; t4 < e3.length; t4++)
              r3[e3[t4]] = n3 ? 1 : 0;
            return r3.filter((t4) => t4 !== 0);
          }
        }
        e2.ReduceUtil = h2;
        class g2 {
          static adjustPoolAttributes(t3, e3, n3, r3, i3, o3) {
            if (!t3 && n3.length !== e3.length - 2)
              throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");
            if (t3)
              for (let t4 = 0; t4 < e3.length - 2; t4++)
                t4 >= n3.length ? n3.push(e3[t4 + 2]) : n3[t4] = e3[t4 + 2];
            for (let t4 = 0; t4 < n3.length; t4++)
              if (t4 < r3.length) {
                if (r3[t4] < 0)
                  throw new Error("strides should be greater than or equal to 1");
              } else
                r3.push(1);
            for (let t4 = 0; t4 < n3.length; t4++)
              if (t4 < i3.length) {
                if (i3[t4] < 0)
                  throw new Error("dilations should be greater than or equal to 1");
              } else
                i3.push(1);
            for (let t4 = 0; t4 < 2 * n3.length; t4++)
              if (t4 < o3.length) {
                if (o3[t4] < 0)
                  throw new Error("pad should be greater than or equal to 1");
              } else
                o3.push(0);
            for (let t4 = 0; t4 < n3.length; t4++) {
              if (n3[t4] <= 0)
                throw new Error("kernel shapes need to be greater than 0");
              if (o3[t4] >= n3[t4] || o3[t4 + n3.length] >= n3[t4])
                throw new Error("pads should be smaller than kernel");
            }
          }
          static adjustPadsBasedOnAutoPad(t3, e3, n3, r3, i3, o3) {
            if (o3) {
              if (i3.length !== 2 * (t3.length - 2))
                throw new Error("length of pads should be twice the length of data dimensions");
              if (e3.length !== t3.length - 2)
                throw new Error("length of strides should be the length of data dimensions");
              if (r3.length !== t3.length - 2)
                throw new Error("length of kernel shapes should be the length of data dimensions");
              for (let a3 = 0; a3 < t3.length - 2; a3++)
                g2.adjustPadAndReturnShape(t3[a3 + 2], e3[a3], n3[a3], r3[a3], i3, a3, a3 + t3.length - 2, o3);
            }
          }
          static computePoolOutputShape(t3, e3, n3, r3, i3, o3, a3) {
            if (e3.length <= 0)
              throw new Error("input shape must be of size greater than 0");
            const s3 = [e3[0], e3[1]];
            return g2.computeShapeHelper(t3, e3, s3, n3, r3, i3, o3, a3), s3;
          }
          static computeConvOutputShape(t3, e3, n3, r3, i3, o3, a3) {
            if (t3.length <= 0 || e3.length <= 0)
              throw new Error("invalid input tensor dims or invalid filter tensor dims");
            const s3 = [t3[0], e3[0]];
            return g2.computeShapeHelper(false, t3, s3, n3, r3, i3, o3, a3), s3;
          }
          static computeShapeHelper(t3, e3, n3, r3, i3, o3, a3, s3) {
            if (t3)
              for (let t4 = 0; t4 < e3.length - 2; t4++)
                n3.push(1);
            else
              for (let t4 = 0; t4 < e3.length - 2; t4++)
                n3.push(g2.adjustPadAndReturnShape(e3[t4 + 2], r3[t4], i3[t4], o3[t4], a3, t4, t4 + e3.length - 2, s3));
          }
          static adjustPadAndReturnShape(t3, e3, n3, r3, i3, o3, a3, s3) {
            const u3 = n3 * (r3 - 1) + 1;
            if (!s3 || s3 === "NOTSET")
              return Math.floor((t3 + i3[o3] + i3[a3] - u3) / e3 + 1);
            switch (s3) {
              case "VALID":
                return i3[o3] = 0, i3[a3] = 0, Math.floor((t3 - u3) / e3 + 1);
              case "SAME_LOWER":
              case "SAME_UPPER":
                if (n3 !== 1)
                  throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");
                {
                  const n4 = ((t3 + e3 - 1) / e3 - 1) * e3 + r3 - t3;
                  return i3[o3] = s3 === "SAME_LOWER" ? Math.floor((n4 + 1) / 2) : Math.floor(n4 / 2), i3[a3] = n4 - i3[o3], Math.floor((t3 + n4 - r3) / e3 + 1);
                }
              default:
                throw new Error("Unsupported AutoPad type");
            }
          }
        }
        e2.PoolConvUtil = g2, e2.MIN_CLIP = -34028234663852886e22, e2.MAX_CLIP = 34028234663852886e22, e2.decodeUtf8String = function(t3) {
          return new TextDecoder().decode(t3);
        };
      }, 7967: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.iterateExtraOptions = void 0, e2.iterateExtraOptions = (t3, n2, r2, i2) => {
          if (typeof t3 == "object" && t3 !== null) {
            if (r2.has(t3))
              throw new Error("Circular reference in options");
            r2.add(t3);
          }
          Object.entries(t3).forEach(([t4, o2]) => {
            const a2 = n2 ? n2 + t4 : t4;
            if (typeof o2 == "object")
              (0, e2.iterateExtraOptions)(o2, a2 + ".", r2, i2);
            else if (typeof o2 == "string" || typeof o2 == "number")
              i2(a2, o2.toString());
            else {
              if (typeof o2 != "boolean")
                throw new Error("Can't handle extra config type: " + typeof o2);
              i2(a2, o2 ? "1" : "0");
            }
          });
        };
      }, 2157: function(t2, e2, n2) {
        "use strict";
        var r2, i2 = this && this.__createBinding || (Object.create ? function(t3, e3, n3, r3) {
          r3 === void 0 && (r3 = n3);
          var i3 = Object.getOwnPropertyDescriptor(e3, n3);
          i3 && !("get" in i3 ? !e3.__esModule : i3.writable || i3.configurable) || (i3 = {enumerable: true, get: function() {
            return e3[n3];
          }}), Object.defineProperty(t3, r3, i3);
        } : function(t3, e3, n3, r3) {
          r3 === void 0 && (r3 = n3), t3[r3] = e3[n3];
        }), o2 = this && this.__setModuleDefault || (Object.create ? function(t3, e3) {
          Object.defineProperty(t3, "default", {enumerable: true, value: e3});
        } : function(t3, e3) {
          t3.default = e3;
        }), a2 = this && this.__importStar || function(t3) {
          if (t3 && t3.__esModule)
            return t3;
          var e3 = {};
          if (t3 != null)
            for (var n3 in t3)
              n3 !== "default" && Object.prototype.hasOwnProperty.call(t3, n3) && i2(e3, t3, n3);
          return o2(e3, t3), e3;
        };
        Object.defineProperty(e2, "__esModule", {value: true}), e2.endProfiling = e2.run = e2.releaseSession = e2.createSession = e2.createSessionFinalize = e2.createSessionAllocate = e2.initOrt = e2.initWasm = void 0;
        const s2 = n2(1670), u2 = a2(n2(349)), c2 = n2(6361), l2 = () => !!s2.env.wasm.proxy && typeof document != "undefined";
        let p, f, d2, h2 = false, g2 = false, b2 = false;
        const m = [], y2 = [], _2 = [], v2 = [], w2 = [], x2 = [], T2 = () => {
          if (h2 || !g2 || b2 || !p)
            throw new Error("worker not ready");
        }, S2 = (t3) => {
          switch (t3.data.type) {
            case "init-wasm":
              h2 = false, t3.data.err ? (b2 = true, f[1](t3.data.err)) : (g2 = true, f[0]());
              break;
            case "init-ort":
              t3.data.err ? d2[1](t3.data.err) : d2[0]();
              break;
            case "create_allocate":
              t3.data.err ? m.shift()[1](t3.data.err) : m.shift()[0](t3.data.out);
              break;
            case "create_finalize":
              t3.data.err ? y2.shift()[1](t3.data.err) : y2.shift()[0](t3.data.out);
              break;
            case "create":
              t3.data.err ? _2.shift()[1](t3.data.err) : _2.shift()[0](t3.data.out);
              break;
            case "release":
              t3.data.err ? v2.shift()[1](t3.data.err) : v2.shift()[0]();
              break;
            case "run":
              t3.data.err ? w2.shift()[1](t3.data.err) : w2.shift()[0](t3.data.out);
              break;
            case "end-profiling":
              t3.data.err ? x2.shift()[1](t3.data.err) : x2.shift()[0]();
          }
        }, O = typeof document != "undefined" ? (r2 = document === null || document === void 0 ? void 0 : document.currentScript) === null || r2 === void 0 ? void 0 : r2.src : void 0;
        e2.initWasm = async () => {
          if (l2()) {
            if (g2)
              return;
            if (h2)
              throw new Error("multiple calls to 'initWasm()' detected.");
            if (b2)
              throw new Error("previous call to 'initWasm()' failed.");
            return h2 = true, s2.env.wasm.wasmPaths === void 0 && O && O.indexOf("blob:") !== 0 && (s2.env.wasm.wasmPaths = O.substr(0, +O.lastIndexOf("/") + 1)), new Promise((t3, e3) => {
              p == null || p.terminate(), p = n2(9710).Z(), p.onmessage = S2, f = [t3, e3];
              const r3 = {type: "init-wasm", in: s2.env.wasm};
              p.postMessage(r3);
            });
          }
          return (0, c2.initializeWebAssembly)(s2.env.wasm);
        }, e2.initOrt = async (t3, e3) => {
          if (l2())
            return T2(), new Promise((n3, r3) => {
              d2 = [n3, r3];
              const i3 = {type: "init-ort", in: {numThreads: t3, loggingLevel: e3}};
              p.postMessage(i3);
            });
          u2.initOrt(t3, e3);
        }, e2.createSessionAllocate = async (t3) => l2() ? (T2(), new Promise((e3, n3) => {
          m.push([e3, n3]);
          const r3 = {type: "create_allocate", in: {model: t3}};
          p.postMessage(r3, [t3.buffer]);
        })) : u2.createSessionAllocate(t3), e2.createSessionFinalize = async (t3, e3) => l2() ? (T2(), new Promise((n3, r3) => {
          y2.push([n3, r3]);
          const i3 = {type: "create_finalize", in: {modeldata: t3, options: e3}};
          p.postMessage(i3);
        })) : u2.createSessionFinalize(t3, e3), e2.createSession = async (t3, e3) => l2() ? (T2(), new Promise((n3, r3) => {
          _2.push([n3, r3]);
          const i3 = {type: "create", in: {model: t3, options: e3}};
          p.postMessage(i3, [t3.buffer]);
        })) : u2.createSession(t3, e3), e2.releaseSession = async (t3) => {
          if (l2())
            return T2(), new Promise((e3, n3) => {
              v2.push([e3, n3]);
              const r3 = {type: "release", in: t3};
              p.postMessage(r3);
            });
          u2.releaseSession(t3);
        }, e2.run = async (t3, e3, n3, r3, i3) => l2() ? (T2(), new Promise((o3, a3) => {
          w2.push([o3, a3]);
          const s3 = {type: "run", in: {sessionId: t3, inputIndices: e3, inputs: n3, outputIndices: r3, options: i3}};
          p.postMessage(s3, u2.extractTransferableBuffers(n3));
        })) : u2.run(t3, e3, n3, r3, i3), e2.endProfiling = async (t3) => {
          if (l2())
            return T2(), new Promise((e3, n3) => {
              x2.push([e3, n3]);
              const r3 = {type: "end-profiling", in: t3};
              p.postMessage(r3);
            });
          u2.endProfiling(t3);
        };
      }, 586: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.setRunOptions = void 0;
        const r2 = n2(7967), i2 = n2(4983), o2 = n2(6361);
        e2.setRunOptions = (t3) => {
          const e3 = (0, o2.getInstance)();
          let n3 = 0;
          const a2 = [], s2 = t3 || {};
          try {
            if ((t3 == null ? void 0 : t3.logSeverityLevel) === void 0)
              s2.logSeverityLevel = 2;
            else if (typeof t3.logSeverityLevel != "number" || !Number.isInteger(t3.logSeverityLevel) || t3.logSeverityLevel < 0 || t3.logSeverityLevel > 4)
              throw new Error(`log serverity level is not valid: ${t3.logSeverityLevel}`);
            if ((t3 == null ? void 0 : t3.logVerbosityLevel) === void 0)
              s2.logVerbosityLevel = 0;
            else if (typeof t3.logVerbosityLevel != "number" || !Number.isInteger(t3.logVerbosityLevel))
              throw new Error(`log verbosity level is not valid: ${t3.logVerbosityLevel}`);
            (t3 == null ? void 0 : t3.terminate) === void 0 && (s2.terminate = false);
            let o3 = 0;
            if ((t3 == null ? void 0 : t3.tag) !== void 0 && (o3 = (0, i2.allocWasmString)(t3.tag, a2)), n3 = e3._OrtCreateRunOptions(s2.logSeverityLevel, s2.logVerbosityLevel, !!s2.terminate, o3), n3 === 0)
              throw new Error("Can't create run options");
            return (t3 == null ? void 0 : t3.extra) !== void 0 && (0, r2.iterateExtraOptions)(t3.extra, "", new WeakSet(), (t4, r3) => {
              const o4 = (0, i2.allocWasmString)(t4, a2), s3 = (0, i2.allocWasmString)(r3, a2);
              if (e3._OrtAddRunConfigEntry(n3, o4, s3) !== 0)
                throw new Error(`Can't set a run config entry: ${t4} - ${r3}`);
            }), [n3, a2];
          } catch (t4) {
            throw n3 !== 0 && e3._OrtReleaseRunOptions(n3), a2.forEach(e3._free), t4;
          }
        };
      }, 2306: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.OnnxruntimeWebAssemblySessionHandler = void 0;
        const r2 = n2(2806), i2 = n2(1670), o2 = n2(2850), a2 = n2(2157);
        let s2;
        e2.OnnxruntimeWebAssemblySessionHandler = class {
          async createSessionAllocate(t3) {
            const e3 = await fetch(t3), n3 = await e3.arrayBuffer();
            return (0, a2.createSessionAllocate)(new Uint8Array(n3));
          }
          async loadModel(t3, e3) {
            if (s2 || (await (0, a2.initOrt)(i2.env.wasm.numThreads, ((t4) => {
              switch (t4) {
                case "verbose":
                  return 0;
                case "info":
                  return 1;
                case "warning":
                  return 2;
                case "error":
                  return 3;
                case "fatal":
                  return 4;
                default:
                  throw new Error(`unsupported logging level: ${t4}`);
              }
            })(i2.env.logLevel)), s2 = true), typeof t3 == "string")
              if (typeof fetch == "undefined") {
                const n3 = await (0, o2.promisify)(r2.readFile)(t3);
                [this.sessionId, this.inputNames, this.outputNames] = await (0, a2.createSession)(n3, e3);
              } else {
                const n3 = await this.createSessionAllocate(t3);
                [this.sessionId, this.inputNames, this.outputNames] = await (0, a2.createSessionFinalize)(n3, e3);
              }
            else
              [this.sessionId, this.inputNames, this.outputNames] = await (0, a2.createSession)(t3, e3);
          }
          async dispose() {
            return (0, a2.releaseSession)(this.sessionId);
          }
          async run(t3, e3, n3) {
            const r3 = [], o3 = [];
            Object.entries(t3).forEach((t4) => {
              const e4 = t4[0], n4 = t4[1], i3 = this.inputNames.indexOf(e4);
              if (i3 === -1)
                throw new Error(`invalid input '${e4}'`);
              r3.push(n4), o3.push(i3);
            });
            const s3 = [];
            Object.entries(e3).forEach((t4) => {
              const e4 = t4[0], n4 = this.outputNames.indexOf(e4);
              if (n4 === -1)
                throw new Error(`invalid output '${e4}'`);
              s3.push(n4);
            });
            const u2 = await (0, a2.run)(this.sessionId, o3, r3.map((t4) => [t4.type, t4.dims, t4.data]), s3, n3), c2 = {};
            for (let t4 = 0; t4 < u2.length; t4++)
              c2[this.outputNames[s3[t4]]] = new i2.Tensor(u2[t4][0], u2[t4][2], u2[t4][1]);
            return c2;
          }
          startProfiling() {
          }
          endProfiling() {
            (0, a2.endProfiling)(this.sessionId);
          }
        };
      }, 4919: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.setSessionOptions = void 0;
        const r2 = n2(7967), i2 = n2(4983), o2 = n2(6361);
        e2.setSessionOptions = (t3) => {
          const e3 = (0, o2.getInstance)();
          let n3 = 0;
          const a2 = [], s2 = t3 || {};
          ((t4) => {
            t4.extra || (t4.extra = {}), t4.extra.session || (t4.extra.session = {});
            const e4 = t4.extra.session;
            e4.use_ort_model_bytes_directly || (e4.use_ort_model_bytes_directly = "1");
          })(s2);
          try {
            (t3 == null ? void 0 : t3.graphOptimizationLevel) === void 0 && (s2.graphOptimizationLevel = "all");
            const u2 = ((t4) => {
              switch (t4) {
                case "disabled":
                  return 0;
                case "basic":
                  return 1;
                case "extended":
                  return 2;
                case "all":
                  return 99;
                default:
                  throw new Error(`unsupported graph optimization level: ${t4}`);
              }
            })(s2.graphOptimizationLevel);
            (t3 == null ? void 0 : t3.enableCpuMemArena) === void 0 && (s2.enableCpuMemArena = true), (t3 == null ? void 0 : t3.enableMemPattern) === void 0 && (s2.enableMemPattern = true), (t3 == null ? void 0 : t3.executionMode) === void 0 && (s2.executionMode = "sequential");
            const c2 = ((t4) => {
              switch (t4) {
                case "sequential":
                  return 0;
                case "parallel":
                  return 1;
                default:
                  throw new Error(`unsupported execution mode: ${t4}`);
              }
            })(s2.executionMode);
            let l2 = 0;
            if ((t3 == null ? void 0 : t3.logId) !== void 0 && (l2 = (0, i2.allocWasmString)(t3.logId, a2)), (t3 == null ? void 0 : t3.logSeverityLevel) === void 0)
              s2.logSeverityLevel = 2;
            else if (typeof t3.logSeverityLevel != "number" || !Number.isInteger(t3.logSeverityLevel) || t3.logSeverityLevel < 0 || t3.logSeverityLevel > 4)
              throw new Error(`log serverity level is not valid: ${t3.logSeverityLevel}`);
            if ((t3 == null ? void 0 : t3.logVerbosityLevel) === void 0)
              s2.logVerbosityLevel = 0;
            else if (typeof t3.logVerbosityLevel != "number" || !Number.isInteger(t3.logVerbosityLevel))
              throw new Error(`log verbosity level is not valid: ${t3.logVerbosityLevel}`);
            if ((t3 == null ? void 0 : t3.enableProfiling) === void 0 && (s2.enableProfiling = false), n3 = e3._OrtCreateSessionOptions(u2, !!s2.enableCpuMemArena, !!s2.enableMemPattern, c2, !!s2.enableProfiling, 0, l2, s2.logSeverityLevel, s2.logVerbosityLevel), n3 === 0)
              throw new Error("Can't create session options");
            return (t3 == null ? void 0 : t3.executionProviders) && ((t4, e4, n4) => {
              for (const r3 of e4) {
                let e5 = typeof r3 == "string" ? r3 : r3.name;
                switch (e5) {
                  case "xnnpack":
                    e5 = "XNNPACK";
                    break;
                  case "wasm":
                  case "cpu":
                    continue;
                  default:
                    throw new Error(`not supported EP: ${e5}`);
                }
                const a3 = (0, i2.allocWasmString)(e5, n4);
                if ((0, o2.getInstance)()._OrtAppendExecutionProvider(t4, a3) !== 0)
                  throw new Error(`Can't append execution provider: ${e5}`);
              }
            })(n3, t3.executionProviders, a2), (t3 == null ? void 0 : t3.extra) !== void 0 && (0, r2.iterateExtraOptions)(t3.extra, "", new WeakSet(), (t4, r3) => {
              const o3 = (0, i2.allocWasmString)(t4, a2), s3 = (0, i2.allocWasmString)(r3, a2);
              if (e3._OrtAddSessionConfigEntry(n3, o3, s3) !== 0)
                throw new Error(`Can't set a session config entry: ${t4} - ${r3}`);
            }), [n3, a2];
          } catch (t4) {
            throw n3 !== 0 && e3._OrtReleaseSessionOptions(n3), a2.forEach(e3._free), t4;
          }
        };
      }, 4983: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.allocWasmString = void 0;
        const r2 = n2(6361);
        e2.allocWasmString = (t3, e3) => {
          const n3 = (0, r2.getInstance)(), i2 = n3.lengthBytesUTF8(t3) + 1, o2 = n3._malloc(i2);
          return n3.stringToUTF8(t3, o2, i2), e3.push(o2), o2;
        };
      }, 349: (t2, e2, n2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", {value: true}), e2.extractTransferableBuffers = e2.endProfiling = e2.run = e2.releaseSession = e2.createSession = e2.createSessionFinalize = e2.createSessionAllocate = e2.initOrt = void 0;
        const r2 = n2(586), i2 = n2(4919), o2 = n2(4983), a2 = n2(6361);
        e2.initOrt = (t3, e3) => {
          const n3 = (0, a2.getInstance)()._OrtInit(t3, e3);
          if (n3 !== 0)
            throw new Error(`Can't initialize onnxruntime. error code = ${n3}`);
        };
        const s2 = new Map();
        e2.createSessionAllocate = (t3) => {
          const e3 = (0, a2.getInstance)(), n3 = e3._malloc(t3.byteLength);
          return e3.HEAPU8.set(t3, n3), [n3, t3.byteLength];
        }, e2.createSessionFinalize = (t3, e3) => {
          const n3 = (0, a2.getInstance)();
          let r3 = 0, o3 = 0, u3 = [];
          try {
            if ([o3, u3] = (0, i2.setSessionOptions)(e3), r3 = n3._OrtCreateSession(t3[0], t3[1], o3), r3 === 0)
              throw new Error("Can't create a session");
          } finally {
            n3._free(t3[0]), n3._OrtReleaseSessionOptions(o3), u3.forEach(n3._free);
          }
          const c3 = n3._OrtGetInputCount(r3), l3 = n3._OrtGetOutputCount(r3), p = [], f = [], d2 = [], h2 = [];
          for (let t4 = 0; t4 < c3; t4++) {
            const e4 = n3._OrtGetInputName(r3, t4);
            if (e4 === 0)
              throw new Error("Can't get an input name");
            f.push(e4), p.push(n3.UTF8ToString(e4));
          }
          for (let t4 = 0; t4 < l3; t4++) {
            const e4 = n3._OrtGetOutputName(r3, t4);
            if (e4 === 0)
              throw new Error("Can't get an output name");
            h2.push(e4), d2.push(n3.UTF8ToString(e4));
          }
          return s2.set(r3, [r3, f, h2]), [r3, p, d2];
        }, e2.createSession = (t3, n3) => {
          const r3 = (0, e2.createSessionAllocate)(t3);
          return (0, e2.createSessionFinalize)(r3, n3);
        }, e2.releaseSession = (t3) => {
          const e3 = (0, a2.getInstance)(), n3 = s2.get(t3);
          if (!n3)
            throw new Error("invalid session id");
          const r3 = n3[0], i3 = n3[1], o3 = n3[2];
          i3.forEach(e3._OrtFree), o3.forEach(e3._OrtFree), e3._OrtReleaseSession(r3), s2.delete(t3);
        };
        const u2 = (t3) => {
          switch (t3) {
            case "int8":
              return 3;
            case "uint8":
              return 2;
            case "bool":
              return 9;
            case "int16":
              return 5;
            case "uint16":
              return 4;
            case "int32":
              return 6;
            case "uint32":
              return 12;
            case "float32":
              return 1;
            case "float64":
              return 11;
            case "string":
              return 8;
            case "int64":
              return 7;
            case "uint64":
              return 13;
            default:
              throw new Error(`unsupported data type: ${t3}`);
          }
        }, c2 = (t3) => {
          switch (t3) {
            case 3:
              return "int8";
            case 2:
              return "uint8";
            case 9:
              return "bool";
            case 5:
              return "int16";
            case 4:
              return "uint16";
            case 6:
              return "int32";
            case 12:
              return "uint32";
            case 1:
              return "float32";
            case 11:
              return "float64";
            case 8:
              return "string";
            case 7:
              return "int64";
            case 13:
              return "uint64";
            default:
              throw new Error(`unsupported data type: ${t3}`);
          }
        }, l2 = (t3) => {
          switch (t3) {
            case "float32":
              return Float32Array;
            case "uint8":
            case "bool":
              return Uint8Array;
            case "int8":
              return Int8Array;
            case "uint16":
              return Uint16Array;
            case "int16":
              return Int16Array;
            case "int32":
              return Int32Array;
            case "float64":
              return Float64Array;
            case "uint32":
              return Uint32Array;
            case "int64":
              return BigInt64Array;
            case "uint64":
              return BigUint64Array;
            default:
              throw new Error(`unsupported type: ${t3}`);
          }
        };
        e2.run = (t3, e3, n3, i3, p) => {
          const f = (0, a2.getInstance)(), d2 = s2.get(t3);
          if (!d2)
            throw new Error("invalid session id");
          const h2 = d2[0], g2 = d2[1], b2 = d2[2], m = e3.length, y2 = i3.length;
          let _2 = 0, v2 = [];
          const w2 = [], x2 = [];
          try {
            [_2, v2] = (0, r2.setRunOptions)(p);
            for (let t5 = 0; t5 < m; t5++) {
              const e4 = n3[t5][0], r3 = n3[t5][1], i4 = n3[t5][2];
              let a4, s4;
              if (Array.isArray(i4)) {
                s4 = 4 * i4.length, a4 = f._malloc(s4), x2.push(a4);
                let t6 = a4 / 4;
                for (let e5 = 0; e5 < i4.length; e5++) {
                  if (typeof i4[e5] != "string")
                    throw new TypeError(`tensor data at index ${e5} is not a string`);
                  f.HEAPU32[t6++] = (0, o2.allocWasmString)(i4[e5], x2);
                }
              } else
                s4 = i4.byteLength, a4 = f._malloc(s4), x2.push(a4), f.HEAPU8.set(new Uint8Array(i4.buffer, i4.byteOffset, s4), a4);
              const c3 = f.stackSave(), l3 = f.stackAlloc(4 * r3.length);
              try {
                let t6 = l3 / 4;
                r3.forEach((e5) => f.HEAP32[t6++] = e5);
                const n4 = f._OrtCreateTensor(u2(e4), a4, s4, l3, r3.length);
                if (n4 === 0)
                  throw new Error("Can't create a tensor");
                w2.push(n4);
              } finally {
                f.stackRestore(c3);
              }
            }
            const t4 = f.stackSave(), a3 = f.stackAlloc(4 * m), s3 = f.stackAlloc(4 * m), d3 = f.stackAlloc(4 * y2), T2 = f.stackAlloc(4 * y2);
            try {
              let n4 = a3 / 4, r3 = s3 / 4, o3 = d3 / 4, u3 = T2 / 4;
              for (let t5 = 0; t5 < m; t5++)
                f.HEAPU32[n4++] = w2[t5], f.HEAPU32[r3++] = g2[e3[t5]];
              for (let t5 = 0; t5 < y2; t5++)
                f.HEAPU32[o3++] = 0, f.HEAPU32[u3++] = b2[i3[t5]];
              let p2 = f._OrtRun(h2, s3, a3, m, T2, y2, d3, _2);
              const v3 = [];
              if (p2 === 0)
                for (let t5 = 0; t5 < y2; t5++) {
                  const e4 = f.HEAPU32[d3 / 4 + t5], n5 = f.stackSave(), r4 = f.stackAlloc(16);
                  let i4, o4 = 0;
                  try {
                    if (p2 = f._OrtGetTensorData(e4, r4, r4 + 4, r4 + 8, r4 + 12), p2 !== 0)
                      throw new Error(`Can't access output tensor data. error code = ${p2}`);
                    let t6 = r4 / 4;
                    const a4 = f.HEAPU32[t6++];
                    o4 = f.HEAPU32[t6++];
                    const s4 = f.HEAPU32[t6++], u4 = f.HEAPU32[t6++], d4 = [];
                    for (let t7 = 0; t7 < u4; t7++)
                      d4.push(f.HEAPU32[s4 / 4 + t7]);
                    f._OrtFree(s4);
                    const h3 = d4.length === 0 ? 1 : d4.reduce((t7, e5) => t7 * e5);
                    if (i4 = c2(a4), i4 === "string") {
                      const t7 = [];
                      let e5 = o4 / 4;
                      for (let n6 = 0; n6 < h3; n6++) {
                        const r5 = f.HEAPU32[e5++], i5 = n6 === h3 - 1 ? void 0 : f.HEAPU32[e5] - r5;
                        t7.push(f.UTF8ToString(r5, i5));
                      }
                      v3.push([i4, d4, t7]);
                    } else {
                      const t7 = new (l2(i4))(h3);
                      new Uint8Array(t7.buffer, t7.byteOffset, t7.byteLength).set(f.HEAPU8.subarray(o4, o4 + t7.byteLength)), v3.push([i4, d4, t7]);
                    }
                  } finally {
                    f.stackRestore(n5), i4 === "string" && o4 && f._free(o4), f._OrtReleaseTensor(e4);
                  }
                }
              if (p2 === 0)
                return v3;
              throw new Error(`failed to call OrtRun(). error code = ${p2}.`);
            } finally {
              f.stackRestore(t4);
            }
          } finally {
            w2.forEach(f._OrtReleaseTensor), x2.forEach(f._free), f._OrtReleaseRunOptions(_2), v2.forEach(f._free);
          }
        }, e2.endProfiling = (t3) => {
          const e3 = (0, a2.getInstance)(), n3 = s2.get(t3);
          if (!n3)
            throw new Error("invalid session id");
          const r3 = n3[0], i3 = e3._OrtEndProfiling(r3);
          if (i3 === 0)
            throw new Error("Can't get an profile file name");
          e3._OrtFree(i3);
        }, e2.extractTransferableBuffers = (t3) => {
          const e3 = [];
          for (const n3 of t3) {
            const t4 = n3[2];
            !Array.isArray(t4) && t4.buffer && e3.push(t4.buffer);
          }
          return e3;
        };
      }, 6361: function(t2, e2, n2) {
        "use strict";
        var r2 = this && this.__createBinding || (Object.create ? function(t3, e3, n3, r3) {
          r3 === void 0 && (r3 = n3);
          var i3 = Object.getOwnPropertyDescriptor(e3, n3);
          i3 && !("get" in i3 ? !e3.__esModule : i3.writable || i3.configurable) || (i3 = {enumerable: true, get: function() {
            return e3[n3];
          }}), Object.defineProperty(t3, r3, i3);
        } : function(t3, e3, n3, r3) {
          r3 === void 0 && (r3 = n3), t3[r3] = e3[n3];
        }), i2 = this && this.__setModuleDefault || (Object.create ? function(t3, e3) {
          Object.defineProperty(t3, "default", {enumerable: true, value: e3});
        } : function(t3, e3) {
          t3.default = e3;
        }), o2 = this && this.__importStar || function(t3) {
          if (t3 && t3.__esModule)
            return t3;
          var e3 = {};
          if (t3 != null)
            for (var n3 in t3)
              n3 !== "default" && Object.prototype.hasOwnProperty.call(t3, n3) && r2(e3, t3, n3);
          return i2(e3, t3), e3;
        }, a2 = this && this.__importDefault || function(t3) {
          return t3 && t3.__esModule ? t3 : {default: t3};
        };
        Object.defineProperty(e2, "__esModule", {value: true}), e2.dispose = e2.getInstance = e2.initializeWebAssembly = void 0;
        const s2 = o2(n2(6449)), u2 = a2(n2(932)), c2 = n2(3474);
        let l2, p = false, f = false, d2 = false;
        const h2 = (t3, e3) => e3 ? t3 ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-threaded.wasm" : t3 ? "ort-wasm-simd.wasm" : "ort-wasm.wasm";
        e2.initializeWebAssembly = async (t3) => {
          if (p)
            return Promise.resolve();
          if (f)
            throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
          if (d2)
            throw new Error("previous call to 'initializeWebAssembly()' failed.");
          f = true;
          const e3 = t3.initTimeout, r3 = t3.numThreads, i3 = t3.simd, o3 = r3 > 1 && (() => {
            try {
              return typeof SharedArrayBuffer != "undefined" && (typeof MessageChannel != "undefined" && new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11])));
            } catch (t4) {
              return false;
            }
          })(), a3 = i3 && (() => {
            try {
              return WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1, 28, 0, 65, 0, 253, 15, 253, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 186, 1, 26, 11]));
            } catch (t4) {
              return false;
            }
          })(), g2 = typeof t3.wasmPaths == "string" ? t3.wasmPaths : void 0, b2 = h2(false, o3), m = h2(a3, o3), y2 = typeof t3.wasmPaths == "object" ? t3.wasmPaths[m] : void 0;
          let _2 = false;
          const v2 = [];
          if (e3 > 0 && v2.push(new Promise((t4) => {
            setTimeout(() => {
              _2 = true, t4();
            }, e3);
          })), v2.push(new Promise((t4, e4) => {
            const r4 = o3 ? c2 : u2.default, i4 = {locateFile: (t5, e5) => o3 && t5.endsWith(".worker.js") && typeof Blob != "undefined" ? URL.createObjectURL(new Blob([n2(4154)], {type: "text/javascript"})) : t5 === b2 ? y2 != null ? y2 : (g2 != null ? g2 : e5) + m : e5 + t5};
            if (o3)
              if (typeof Blob == "undefined")
                i4.mainScriptUrlOrBlob = s2.join("/", "ort-wasm-threaded.js");
              else {
                const t5 = `var ortWasmThreaded=(function(){var _scriptDir;return ${r4.toString()}})();`;
                i4.mainScriptUrlOrBlob = new Blob([t5], {type: "text/javascript"});
              }
            r4(i4).then((e5) => {
              f = false, p = true, l2 = e5, t4();
            }, (t5) => {
              f = false, d2 = true, e4(t5);
            });
          })), await Promise.race(v2), _2)
            throw new Error(`WebAssembly backend initializing failed due to timeout: ${e3}ms`);
        }, e2.getInstance = () => {
          if (p && l2)
            return l2;
          throw new Error("WebAssembly is not initialized yet.");
        }, e2.dispose = () => {
          var t3;
          !p || f || d2 || (f = true, (t3 = l2.PThread) === null || t3 === void 0 || t3.terminateAllThreads(), l2 = void 0, f = false, p = false, d2 = true);
        };
      }, 9710: (t2, e2, n2) => {
        "use strict";
        n2.d(e2, {Z: () => o2});
        var r2 = n2(477), i2 = n2.n(r2);
        function o2() {
          return i2()('/*!\n* ONNX Runtime Web v1.14.0\n* Copyright (c) Microsoft Corporation. All rights reserved.\n* Licensed under the MIT License.\n*/\n(()=>{var t={474:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(t){function e(){return j.buffer!=D&&N(j.buffer),P}function r(){return j.buffer!=D&&N(j.buffer),U}function a(){return j.buffer!=D&&N(j.buffer),F}function i(){return j.buffer!=D&&N(j.buffer),I}function o(){return j.buffer!=D&&N(j.buffer),W}var u,c,s;t=t||{},u||(u=void 0!==t?t:{}),u.ready=new Promise((function(t,e){c=t,s=e}));var l,f,p,h,d,y,b=Object.assign({},u),m="./this.program",g=(t,e)=>{throw e},v="object"==typeof window,w="function"==typeof importScripts,_="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,O=u.ENVIRONMENT_IS_PTHREAD||!1,A="";function S(t){return u.locateFile?u.locateFile(t,A):A+t}if(_){let e;A=w?n(908).dirname(A)+"/":"//",y=()=>{d||(h=n(384),d=n(908))},l=function(t,e){return y(),t=d.normalize(t),h.readFileSync(t,e?void 0:"utf8")},p=t=>((t=l(t,!0)).buffer||(t=new Uint8Array(t)),t),f=(t,e,n)=>{y(),t=d.normalize(t),h.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(m=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),process.on("uncaughtException",(function(t){if(!(t instanceof ct))throw t})),process.on("unhandledRejection",(function(t){throw t})),g=(t,e)=>{if(Q())throw process.exitCode=t,e;e instanceof ct||x("exiting due to exception: "+e),process.exit(t)},u.inspect=function(){return"[Emscripten Module object]"};try{e=n(925)}catch(t){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),t}n.g.Worker=e.Worker}else(v||w)&&(w?A=self.location.href:"undefined"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf("blob:")?A.substr(0,A.replace(/[?#].*/,"").lastIndexOf("/")+1):"",_||(l=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},w&&(p=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),f=(t,e,n)=>{var r=new XMLHttpRequest;r.open("GET",t,!0),r.responseType="arraybuffer",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)}));_&&"undefined"==typeof performance&&(n.g.performance=n(953).performance);var T=console.log.bind(console),E=console.warn.bind(console);_&&(y(),T=t=>h.writeSync(1,t+"\\n"),E=t=>h.writeSync(2,t+"\\n"));var M,C=u.print||T,x=u.printErr||E;Object.assign(u,b),b=null,u.thisProgram&&(m=u.thisProgram),u.quit&&(g=u.quit),u.wasmBinary&&(M=u.wasmBinary);var R=u.noExitRuntime||!1;"object"!=typeof WebAssembly&&at("no native wasm support detected");var j,k,D,P,U,F,I,W,H=!1,L="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function z(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&L)return L.decode(t.buffer instanceof SharedArrayBuffer?t.slice(e,n):t.subarray(e,n));for(r="";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function Y(t,e){return(t>>>=0)?z(r(),t,e):""}function B(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function G(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function N(t){D=t,u.HEAP8=P=new Int8Array(t),u.HEAP16=new Int16Array(t),u.HEAP32=F=new Int32Array(t),u.HEAPU8=U=new Uint8Array(t),u.HEAPU16=new Uint16Array(t),u.HEAPU32=I=new Uint32Array(t),u.HEAPF32=new Float32Array(t),u.HEAPF64=W=new Float64Array(t)}O&&(D=u.buffer);var V=u.INITIAL_MEMORY||16777216;if(O)j=u.wasmMemory,D=u.buffer;else if(u.wasmMemory)j=u.wasmMemory;else if(!((j=new WebAssembly.Memory({initial:V/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),_&&console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)"),Error("bad memory");j&&(D=j.buffer),V=D.byteLength,N(D);var $,q=[],X=[],J=[],Z=[];function Q(){return R||!1}function K(){var t=u.preRun.shift();q.unshift(t)}var tt,et=0,nt=null,rt=null;function at(t){throw O?postMessage({cmd:"onAbort",arg:t}):u.onAbort&&u.onAbort(t),x(t="Aborted("+t+")"),H=!0,t=new WebAssembly.RuntimeError(t+". Build with -sASSERTIONS for more info."),s(t),t}function it(){return tt.startsWith("data:application/octet-stream;base64,")}function ot(){var t=tt;try{if(t==tt&&M)return new Uint8Array(M);if(p)return p(t);throw"both async and sync fetching of the wasm failed"}catch(t){at(t)}}tt="ort-wasm-threaded.wasm",it()||(tt=S(tt));var ut={};function ct(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function st(t){(t=ht.Vb[t])||at(),ht.mc(t)}function lt(t){var e=ht.Cc();if(!e)return 6;ht.ac.push(e),ht.Vb[t.Ub]=e,e.Ub=t.Ub;var n={cmd:"run",start_routine:t.Ic,arg:t.zc,pthread_ptr:t.Ub};return e.$b=()=>{n.time=performance.now(),e.postMessage(n,t.Nc)},e.loaded&&(e.$b(),delete e.$b),0}function ft(t){if(O)return $t(1,1,t);Q()||(ht.oc(),u.onExit&&u.onExit(t),H=!0),g(t,new ct(t))}function pt(t,e){if(!e&&O)throw bt(t),"unwind";Q()||O||(me(),dt(J),be(0),re[1].length&&ae(1,10),re[2].length&&ae(2,10),ht.oc()),ft(t)}var ht={Yb:[],ac:[],qc:[],Vb:{},fc:function(){O&&ht.Ec()},Pc:function(){},Ec:function(){ht.receiveObjectTransfer=ht.Gc,ht.threadInitTLS=ht.pc,ht.setExitStatus=ht.nc,R=!1},nc:function(){},oc:function(){for(var t of Object.values(ht.Vb))ht.mc(t);for(t of ht.Yb)t.terminate();ht.Yb=[]},mc:function(t){var e=t.Ub;delete ht.Vb[e],ht.Yb.push(t),ht.ac.splice(ht.ac.indexOf(t),1),t.Ub=0,Oe(e)},Gc:function(){},pc:function(){ht.qc.forEach((t=>t()))},Fc:function(t,e){t.onmessage=n=>{var r=(n=n.data).cmd;if(t.Ub&&(ht.Bc=t.Ub),n.targetThread&&n.targetThread!=he()){var a=ht.Vb[n.Qc];a?a.postMessage(n,n.transferList):x(\'Internal error! Worker sent a message "\'+r+\'" to target pthread \'+n.targetThread+", but that thread no longer exists!")}else"processProxyingQueue"===r?zt(n.queue):"spawnThread"===r?lt(n):"cleanupThread"===r?st(n.thread):"killThread"===r?(n=n.thread,r=ht.Vb[n],delete ht.Vb[n],r.terminate(),Oe(n),ht.ac.splice(ht.ac.indexOf(r),1),r.Ub=0):"cancelThread"===r?ht.Vb[n.thread].postMessage({cmd:"cancel"}):"loaded"===r?(t.loaded=!0,e&&e(t),t.$b&&(t.$b(),delete t.$b)):"print"===r?C("Thread "+n.threadId+": "+n.text):"printErr"===r?x("Thread "+n.threadId+": "+n.text):"alert"===r?alert("Thread "+n.threadId+": "+n.text):"setimmediate"===n.target?t.postMessage(n):"onAbort"===r?u.onAbort&&u.onAbort(n.arg):r&&x("worker sent an unknown command "+r);ht.Bc=void 0},t.onerror=t=>{throw x("worker sent an error! "+t.filename+":"+t.lineno+": "+t.message),t},_&&(t.on("message",(function(e){t.onmessage({data:e})})),t.on("error",(function(e){t.onerror(e)})),t.on("detachedExit",(function(){}))),t.postMessage({cmd:"load",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:j,wasmModule:k})},yc:function(){var t=S("ort-wasm-threaded.worker.js");ht.Yb.push(new Worker(t))},Cc:function(){return 0==ht.Yb.length&&(ht.yc(),ht.Fc(ht.Yb[0])),ht.Yb.pop()}};function dt(t){for(;0<t.length;)t.shift()(u)}function yt(t){var e=Ee();return t=t(),Me(e),t}function bt(t){if(O)return $t(2,0,t);try{pt(t)}catch(t){t instanceof ct||"unwind"==t||g(1,t)}}u.PThread=ht,u.establishStackSpace=function(){var t=he(),e=a()[t+44>>2>>>0];t=a()[t+48>>2>>>0],Te(e,e-t),Me(e)};var mt=[];function gt(t){var e=mt[t];return e||(t>=mt.length&&(mt.length=t+1),mt[t]=e=$.get(t)),e}u.invokeEntryPoint=function(t,e){t=gt(t)(e),Q()?ht.nc(t):Ae(t)};var vt,wt,_t=[],Ot=0,At=0;function St(t){this.Zb=t,this.Sb=t-24,this.xc=function(t){i()[this.Sb+4>>2>>>0]=t},this.bc=function(){return i()[this.Sb+4>>2>>>0]},this.wc=function(t){i()[this.Sb+8>>2>>>0]=t},this.Dc=function(){return i()[this.Sb+8>>2>>>0]},this.rc=function(){a()[this.Sb>>2>>>0]=0},this.hc=function(t){t=t?1:0,e()[this.Sb+12>>0>>>0]=t},this.uc=function(){return 0!=e()[this.Sb+12>>0>>>0]},this.ic=function(t){t=t?1:0,e()[this.Sb+13>>0>>>0]=t},this.kc=function(){return 0!=e()[this.Sb+13>>0>>>0]},this.fc=function(t,e){this.cc(0),this.xc(t),this.wc(e),this.rc(),this.hc(!1),this.ic(!1)},this.sc=function(){Atomics.add(a(),this.Sb>>2,1)},this.Hc=function(){return 1===Atomics.sub(a(),this.Sb>>2,1)},this.cc=function(t){i()[this.Sb+16>>2>>>0]=t},this.tc=function(){return i()[this.Sb+16>>2>>>0]},this.vc=function(){if(Re(this.bc()))return i()[this.Zb>>2>>>0];var t=this.tc();return 0!==t?t:this.Zb}}function Tt(t){return ye(new St(t).Sb)}function Et(t,e,n,r){return O?$t(3,1,t,e,n,r):Mt(t,e,n,r)}function Mt(t,e,n,r){if("undefined"==typeof SharedArrayBuffer)return x("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var a=[];return O&&0===a.length?Et(t,e,n,r):(t={Ic:n,Ub:t,zc:r,Nc:a},O?(t.Oc="spawnThread",postMessage(t,a),0):lt(t))}function Ct(t,e,n){return O?$t(4,1,t,e,n):0}function xt(t,e){if(O)return $t(5,1,t,e)}function Rt(t,e){if(O)return $t(6,1,t,e)}function jt(t,e,n){if(O)return $t(7,1,t,e,n)}function kt(t,e,n){return O?$t(8,1,t,e,n):0}function Dt(t,e){if(O)return $t(9,1,t,e)}function Pt(t,e,n){if(O)return $t(10,1,t,e,n)}function Ut(t,e,n,r){if(O)return $t(11,1,t,e,n,r)}function Ft(t,e,n,r){if(O)return $t(12,1,t,e,n,r)}function It(t,e,n,r){if(O)return $t(13,1,t,e,n,r)}function Wt(t){if(O)return $t(14,1,t)}function Ht(t,e){if(O)return $t(15,1,t,e)}function Lt(t,e,n){if(O)return $t(16,1,t,e,n)}function zt(t){Atomics.store(a(),t>>2,1),he()&&_e(t),Atomics.compareExchange(a(),t>>2,1,0)}function Yt(t){return i()[t>>>2]+4294967296*a()[t+4>>>2]}function Bt(t,e,n,r,a,i){return O?$t(17,1,t,e,n,r,a,i):-52}function Gt(t,e,n,r,a,i){if(O)return $t(18,1,t,e,n,r,a,i)}function Nt(t){var n=G(t)+1,r=de(n);return r&&B(t,e(),r,n),r}function Vt(t,e,n){function r(t){return(t=t.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?t[1]:"GMT"}if(O)return $t(19,1,t,e,n);var o=(new Date).getFullYear(),u=new Date(o,0,1),c=new Date(o,6,1);o=u.getTimezoneOffset();var s=c.getTimezoneOffset(),l=Math.max(o,s);a()[t>>2>>>0]=60*l,a()[e>>2>>>0]=Number(o!=s),t=r(u),e=r(c),t=Nt(t),e=Nt(e),s<o?(i()[n>>2>>>0]=t,i()[n+4>>2>>>0]=e):(i()[n>>2>>>0]=e,i()[n+4>>2>>>0]=t)}function $t(t,e){var n=arguments.length-2,r=arguments;return yt((()=>{for(var a=Ce(8*n),i=a>>3,u=0;u<n;u++){var c=r[2+u];o()[i+u>>>0]=c}return we(t,n,a,e)}))}u.executeNotifiedProxyingQueue=zt,wt=_?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:O?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var qt,Xt=[],Jt={};function Zt(){if(!qt){var t,e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:m||"./this.program"};for(t in Jt)void 0===Jt[t]?delete e[t]:e[t]=Jt[t];var n=[];for(t in e)n.push(t+"="+e[t]);qt=n}return qt}function Qt(t,n){if(O)return $t(20,1,t,n);var r=0;return Zt().forEach((function(a,o){var u=n+r;for(o=i()[t+4*o>>2>>>0]=u,u=0;u<a.length;++u)e()[o++>>0>>>0]=a.charCodeAt(u);e()[o>>0>>>0]=0,r+=a.length+1})),0}function Kt(t,e){if(O)return $t(21,1,t,e);var n=Zt();i()[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),i()[e>>2>>>0]=r,0}function te(t){return O?$t(22,1,t):52}function ee(t,e,n,r){return O?$t(23,1,t,e,n,r):52}function ne(t,e,n,r,a){return O?$t(24,1,t,e,n,r,a):70}var re=[null,[],[]];function ae(t,e){var n=re[t];0===e||10===e?((1===t?C:x)(z(n,0)),n.length=0):n.push(e)}function ie(t,e,n,a){if(O)return $t(25,1,t,e,n,a);for(var o=0,u=0;u<n;u++){var c=i()[e>>2>>>0],s=i()[e+4>>2>>>0];e+=8;for(var l=0;l<s;l++)ae(t,r()[c+l>>>0]);o+=s}return i()[a>>2>>>0]=o,0}var oe=0;function ue(t){return 0==t%4&&(0!=t%100||0==t%400)}var ce=[31,29,31,30,31,30,31,31,30,31,30,31],se=[31,28,31,30,31,30,31,31,30,31,30,31];function le(t,n,r,i){function o(t,e,n){for(t="number"==typeof t?t.toString():t||"";t.length<e;)t=n[0]+t;return t}function u(t,e){return o(t,e,"0")}function c(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function s(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function l(t){var e=t.Wb;for(t=new Date(new Date(t.Xb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(ue(t.getFullYear())?ce:se)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=s(new Date(t.getFullYear(),0,4)),n=s(n),0>=c(e,t)?0>=c(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var f=a()[i+40>>2>>>0];for(var p in i={Lc:a()[i>>2>>>0],Kc:a()[i+4>>2>>>0],dc:a()[i+8>>2>>>0],jc:a()[i+12>>2>>>0],ec:a()[i+16>>2>>>0],Xb:a()[i+20>>2>>>0],Tb:a()[i+24>>2>>>0],Wb:a()[i+28>>2>>>0],Rc:a()[i+32>>2>>>0],Jc:a()[i+36>>2>>>0],Mc:f?Y(f):""},r=Y(r),f={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})r=r.replace(new RegExp(p,"g"),f[p]);var h="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),d="January February March April May June July August September October November December".split(" ");for(p in f={"%a":function(t){return h[t.Tb].substring(0,3)},"%A":function(t){return h[t.Tb]},"%b":function(t){return d[t.ec].substring(0,3)},"%B":function(t){return d[t.ec]},"%C":function(t){return u((t.Xb+1900)/100|0,2)},"%d":function(t){return u(t.jc,2)},"%e":function(t){return o(t.jc,2," ")},"%g":function(t){return l(t).toString().substring(2)},"%G":function(t){return l(t)},"%H":function(t){return u(t.dc,2)},"%I":function(t){return 0==(t=t.dc)?t=12:12<t&&(t-=12),u(t,2)},"%j":function(t){for(var e=0,n=0;n<=t.ec-1;e+=(ue(t.Xb+1900)?ce:se)[n++]);return u(t.jc+e,3)},"%m":function(t){return u(t.ec+1,2)},"%M":function(t){return u(t.Kc,2)},"%n":function(){return"\\n"},"%p":function(t){return 0<=t.dc&&12>t.dc?"AM":"PM"},"%S":function(t){return u(t.Lc,2)},"%t":function(){return"\\t"},"%u":function(t){return t.Tb||7},"%U":function(t){return u(Math.floor((t.Wb+7-t.Tb)/7),2)},"%V":function(t){var e=Math.floor((t.Wb+7-(t.Tb+6)%7)/7);if(2>=(t.Tb+371-t.Wb-2)%7&&e++,e)53==e&&(4==(n=(t.Tb+371-t.Wb)%7)||3==n&&ue(t.Xb)||(e=1));else{e=52;var n=(t.Tb+7-t.Wb-1)%7;(4==n||5==n&&ue(t.Xb%400-1))&&e++}return u(e,2)},"%w":function(t){return t.Tb},"%W":function(t){return u(Math.floor((t.Wb+7-(t.Tb+6)%7)/7),2)},"%y":function(t){return(t.Xb+1900).toString().substring(2)},"%Y":function(t){return t.Xb+1900},"%z":function(t){var e=0<=(t=t.Jc);return t=Math.abs(t)/60,(e?"+":"-")+String("0000"+(t/60*100+t%60)).slice(-4)},"%Z":function(t){return t.Mc},"%%":function(){return"%"}},r=r.replace(/%%/g,"\\0\\0"),f)r.includes(p)&&(r=r.replace(new RegExp(p,"g"),f[p](i)));return p=function(t){var e=Array(G(t)+1);return B(t,e,0,e.length),e}(r=r.replace(/\\0\\0/g,"%")),p.length>n?0:(function(t,n){e().set(t,n>>>0)}(p,t),p.length-1)}ht.fc();var fe=[null,ft,bt,Et,Ct,xt,Rt,jt,kt,Dt,Pt,Ut,Ft,It,Wt,Ht,Lt,Bt,Gt,Vt,Qt,Kt,te,ee,ne,ie],pe={b:function(t){return de(t+24)+24},n:function(t){return(t=new St(t)).uc()||(t.hc(!0),Ot--),t.ic(!1),_t.push(t),t.sc(),t.vc()},ma:function(t){throw x("Unexpected exception thrown, this is not properly supported - aborting"),H=!0,t},x:function(){Se(0);var t=_t.pop();if(t.Hc()&&!t.kc()){var e=t.Dc();e&&gt(e)(t.Zb),Tt(t.Zb)}At=0},e:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},l:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},h:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},t:Tt,M:function(){var t=_t.pop();t||at("no exception to throw");var e=t.Zb;throw t.kc()||(_t.push(t),t.ic(!0),t.hc(!1),Ot++),At=e,e},c:function(t,e,n){throw new St(t).fc(e,n),At=t,Ot++,t},pa:function(){return Ot},Fa:function(t){ge(t,!w,1,!v),ht.pc()},T:function(t){O?postMessage({cmd:"cleanupThread",thread:t}):st(t)},xa:Mt,j:function(t){throw At||(At=t),t},H:Ct,Ma:xt,ua:Rt,wa:jt,oa:kt,Ka:Dt,Ca:Pt,Ja:Ut,V:Ft,va:It,sa:Wt,La:Ht,ta:Lt,Ta:function(){},X:function(){at("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking")},Ua:function(){at("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking")},W:function(){return Date.now()},ya:function(){return 2097152},Oa:function(){return!0},za:function(t,e,n,r){if(t==e)setTimeout((()=>zt(r)));else if(O)postMessage({targetThread:t,cmd:"processProxyingQueue",queue:r});else{if(!(t=ht.Vb[t]))return;t.postMessage({cmd:"processProxyingQueue",queue:r})}return 1},Ea:function(){return-1},Pa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getUTCSeconds(),a()[e+4>>2>>>0]=t.getUTCMinutes(),a()[e+8>>2>>>0]=t.getUTCHours(),a()[e+12>>2>>>0]=t.getUTCDate(),a()[e+16>>2>>>0]=t.getUTCMonth(),a()[e+20>>2>>>0]=t.getUTCFullYear()-1900,a()[e+24>>2>>>0]=t.getUTCDay(),t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[e+28>>2>>>0]=t},Qa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getFullYear()-1900,a()[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1),r=(t.getTime()-n.getTime())/864e5|0;a()[e+28>>2>>>0]=r,a()[e+36>>2>>>0]=-60*t.getTimezoneOffset(),r=new Date(t.getFullYear(),6,1).getTimezoneOffset(),t=0|(r!=(n=n.getTimezoneOffset())&&t.getTimezoneOffset()==Math.min(n,r)),a()[e+32>>2>>>0]=t},Ra:function(t){var e=new Date(a()[t+20>>2>>>0]+1900,a()[t+16>>2>>>0],a()[t+12>>2>>>0],a()[t+8>>2>>>0],a()[t+4>>2>>>0],a()[t>>2>>>0],0),n=a()[t+32>>2>>>0],r=e.getTimezoneOffset(),i=new Date(e.getFullYear(),0,1),o=new Date(e.getFullYear(),6,1).getTimezoneOffset(),u=i.getTimezoneOffset(),c=Math.min(u,o);return 0>n?a()[t+32>>2>>>0]=Number(o!=u&&c==r):0<n!=(c==r)&&(o=Math.max(u,o),e.setTime(e.getTime()+6e4*((0<n?c:o)-r))),a()[t+24>>2>>>0]=e.getDay(),n=(e.getTime()-i.getTime())/864e5|0,a()[t+28>>2>>>0]=n,a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},Aa:Bt,Ba:Gt,Sa:function t(e,n,r){t.Ac||(t.Ac=!0,Vt(e,n,r))},y:function(){at("")},U:function(){if(!_&&!w){var t="Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread";vt||(vt={}),vt[t]||(vt[t]=1,_&&(t="warning: "+t),x(t))}},ra:function(){return 4294901760},B:wt,Ia:function(t,e,n){r().copyWithin(t>>>0,e>>>0,e+n>>>0)},F:function(){return _?n(993).cpus().length:navigator.hardwareConcurrency},Da:function(t,e,n){Xt.length=e,n>>=3;for(var r=0;r<e;r++)Xt[r]=o()[n+r>>>0];return(0>t?ut[-t-1]:fe[t]).apply(null,Xt)},qa:function(t){var e=r().length;if((t>>>=0)<=e||4294901760<t)return!1;for(var n=1;4>=n;n*=2){var a=e*(1+.2/n);a=Math.min(a,t+100663296);var i=Math;a=Math.max(t,a),i=i.min.call(i,4294901760,a+(65536-a%65536)%65536);t:{try{j.grow(i-D.byteLength+65535>>>16),N(j.buffer);var o=1;break t}catch(t){}o=void 0}if(o)return!0}return!1},Na:function(){throw"unwind"},Ga:Qt,Ha:Kt,J:pt,I:te,S:ee,ga:ne,R:ie,d:function(){return oe},na:function t(r,a){t.lc||(t.lc=function(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(_)try{var e=n(Object(function(){var t=new Error("Cannot find module \'crypto\'");throw t.code="MODULE_NOT_FOUND",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>at("randomDevice")}());for(var i=0;i<a;i++)e()[r+i>>0>>>0]=t.lc();return 0},ia:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ja:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},K:function(t){var e=Ee();try{return gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},f:function(t,e){var n=Ee();try{return gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},P:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},Q:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},k:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},p:function(t,e,n,r){var a=Ee();try{return gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},q:function(t,e,n,r,a){var i=Ee();try{return gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},N:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},s:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},w:function(t,e,n,r,a,i,o){var u=Ee();try{return gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},L:function(t,e,n,r,a,i,o,u){var c=Ee();try{return gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},E:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{return gt(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=Ee();try{return He(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},_:function(t,e,n,r,a,i,o){var u=Ee();try{return ke(t,e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},Z:function(t,e,n,r,a){var i=Ee();try{return Le(t,e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},ca:function(t,e,n,r){var a=Ee();try{return Ie(t,e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},$:function(t){var e=Ee();try{return je(t)}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},ba:function(t,e){var n=Ee();try{return We(t,e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},Y:function(t,e,n){var r=Ee();try{return De(t,e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},g:function(t){var e=Ee();try{gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},r:function(t,e){var n=Ee();try{gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},i:function(t,e,n){var r=Ee();try{gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ha:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},m:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},v:function(t,e,n,r,a){var i=Ee();try{gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},u:function(t,e,n,r,a,i){var o=Ee();try{gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},O:function(t,e,n,r,a,i,o){var u=Ee();try{gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},A:function(t,e,n,r,a,i,o,u){var c=Ee();try{gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},ka:function(t,e,n,r,a,i,o,u,c){var s=Ee();try{gt(t)(e,n,r,a,i,o,u,c)}catch(t){if(Me(s),t!==t+0)throw t;Se(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l){var f=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(Me(f),t!==t+0)throw t;Se(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(Me(b),t!==t+0)throw t;Se(1,0)}},fa:function(t,e,n,r,a,i,o,u){var c=Ee();try{Pe(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},da:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{Fe(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},ea:function(t,e,n,r,a,i){var o=Ee();try{Ue(t,e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},o:function(t){return t},a:j||u.wasmMemory,G:function(t){oe=t},la:le,z:function(t,e,n,r){return le(t,e,n,r)}};!function(){function t(t,e){u.asm=t.exports,ht.qc.push(u.asm.sb),$=u.asm.ub,X.unshift(u.asm.Va),k=e,O||(et--,u.monitorRunDependencies&&u.monitorRunDependencies(et),0==et&&(null!==nt&&(clearInterval(nt),nt=null),rt&&(t=rt,rt=null,t())))}function e(e){t(e.instance,e.module)}function n(t){return function(){if(!M&&(v||w)){if("function"==typeof fetch&&!tt.startsWith("file://"))return fetch(tt,{credentials:"same-origin"}).then((function(t){if(!t.ok)throw"failed to load wasm binary file at \'"+tt+"\'";return t.arrayBuffer()})).catch((function(){return ot()}));if(f)return new Promise((function(t,e){f(tt,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return ot()}))}().then((function(t){return WebAssembly.instantiate(t,r)})).then((function(t){return t})).then(t,(function(t){x("failed to asynchronously prepare wasm: "+t),at(t)}))}var r={a:pe};if(O||(et++,u.monitorRunDependencies&&u.monitorRunDependencies(et)),u.instantiateWasm)try{return u.instantiateWasm(r,t)}catch(t){return x("Module.instantiateWasm callback failed with error: "+t),!1}(M||"function"!=typeof WebAssembly.instantiateStreaming||it()||tt.startsWith("file://")||_||"function"!=typeof fetch?n(e):fetch(tt,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,r).then(e,(function(t){return x("wasm streaming compile failed: "+t),x("falling back to ArrayBuffer instantiation"),n(e)}))}))).catch(s)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.Va).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.Wa).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.Xa).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.Ya).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.Za).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm._a).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.$a).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.ab).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.bb).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.cb).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.db).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.eb).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.fb).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.gb).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.hb).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ib).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.jb).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.kb).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.lb).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.mb).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.nb).apply(null,arguments)};var he=u._pthread_self=function(){return(he=u._pthread_self=u.asm.ob).apply(null,arguments)},de=u._malloc=function(){return(de=u._malloc=u.asm.pb).apply(null,arguments)},ye=u._free=function(){return(ye=u._free=u.asm.qb).apply(null,arguments)},be=u._fflush=function(){return(be=u._fflush=u.asm.rb).apply(null,arguments)};u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.sb).apply(null,arguments)};var me=u.___funcs_on_exit=function(){return(me=u.___funcs_on_exit=u.asm.tb).apply(null,arguments)},ge=u.__emscripten_thread_init=function(){return(ge=u.__emscripten_thread_init=u.asm.vb).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.wb).apply(null,arguments)};var ve,we=u._emscripten_run_in_main_runtime_thread_js=function(){return(we=u._emscripten_run_in_main_runtime_thread_js=u.asm.xb).apply(null,arguments)},_e=u.__emscripten_proxy_execute_task_queue=function(){return(_e=u.__emscripten_proxy_execute_task_queue=u.asm.yb).apply(null,arguments)},Oe=u.__emscripten_thread_free_data=function(){return(Oe=u.__emscripten_thread_free_data=u.asm.zb).apply(null,arguments)},Ae=u.__emscripten_thread_exit=function(){return(Ae=u.__emscripten_thread_exit=u.asm.Ab).apply(null,arguments)},Se=u._setThrew=function(){return(Se=u._setThrew=u.asm.Bb).apply(null,arguments)},Te=u._emscripten_stack_set_limits=function(){return(Te=u._emscripten_stack_set_limits=u.asm.Cb).apply(null,arguments)},Ee=u.stackSave=function(){return(Ee=u.stackSave=u.asm.Db).apply(null,arguments)},Me=u.stackRestore=function(){return(Me=u.stackRestore=u.asm.Eb).apply(null,arguments)},Ce=u.stackAlloc=function(){return(Ce=u.stackAlloc=u.asm.Fb).apply(null,arguments)},xe=u.___cxa_can_catch=function(){return(xe=u.___cxa_can_catch=u.asm.Gb).apply(null,arguments)},Re=u.___cxa_is_pointer_type=function(){return(Re=u.___cxa_is_pointer_type=u.asm.Hb).apply(null,arguments)},je=u.dynCall_j=function(){return(je=u.dynCall_j=u.asm.Ib).apply(null,arguments)},ke=u.dynCall_iiiiij=function(){return(ke=u.dynCall_iiiiij=u.asm.Jb).apply(null,arguments)},De=u.dynCall_jii=function(){return(De=u.dynCall_jii=u.asm.Kb).apply(null,arguments)},Pe=u.dynCall_viiiiij=function(){return(Pe=u.dynCall_viiiiij=u.asm.Lb).apply(null,arguments)},Ue=u.dynCall_vjji=function(){return(Ue=u.dynCall_vjji=u.asm.Mb).apply(null,arguments)},Fe=u.dynCall_viiijjjii=function(){return(Fe=u.dynCall_viiijjjii=u.asm.Nb).apply(null,arguments)},Ie=u.dynCall_iij=function(){return(Ie=u.dynCall_iij=u.asm.Ob).apply(null,arguments)},We=u.dynCall_ji=function(){return(We=u.dynCall_ji=u.asm.Pb).apply(null,arguments)},He=u.dynCall_iiiiiij=function(){return(He=u.dynCall_iiiiiij=u.asm.Qb).apply(null,arguments)},Le=u.dynCall_iiij=function(){return(Le=u.dynCall_iiij=u.asm.Rb).apply(null,arguments)};function ze(){function t(){if(!ve&&(ve=!0,u.calledRun=!0,!H)&&(O||dt(X),c(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!O)){if(u.postRun)for("function"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var t=u.postRun.shift();Z.unshift(t)}dt(Z)}}if(!(0<et))if(O)c(u),O||dt(X),postMessage({cmd:"loaded"});else{if(u.preRun)for("function"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)K();dt(q),0<et||(u.setStatus?(u.setStatus("Running..."),setTimeout((function(){setTimeout((function(){u.setStatus("")}),1),t()}),1)):t())}}if(u.UTF8ToString=Y,u.stringToUTF8=function(t,e,n){return B(t,r(),e,n)},u.lengthBytesUTF8=G,u.keepRuntimeAlive=Q,u.wasmMemory=j,u.stackSave=Ee,u.stackRestore=Me,u.stackAlloc=Ce,u.ExitStatus=ct,u.PThread=ht,rt=function t(){ve||ze(),ve||(rt=t)},u.preInit)for("function"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return ze(),t.ready});t.exports=r},932:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(t){var e,r,a;t=t||{},e||(e=void 0!==t?t:{}),e.ready=new Promise((function(t,e){r=t,a=e}));var i,o,u,c,s,l,f=Object.assign({},e),p="./this.program",h=(t,e)=>{throw e},d="object"==typeof window,y="function"==typeof importScripts,b="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,m="";b?(m=y?n(908).dirname(m)+"/":"//",l=()=>{s||(c=n(384),s=n(908))},i=function(t,e){return l(),t=s.normalize(t),c.readFileSync(t,e?void 0:"utf8")},u=t=>((t=i(t,!0)).buffer||(t=new Uint8Array(t)),t),o=(t,e,n)=>{l(),t=s.normalize(t),c.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),process.on("uncaughtException",(function(t){if(!(t instanceof J))throw t})),process.on("unhandledRejection",(function(t){throw t})),h=(t,e)=>{if(_||0<L)throw process.exitCode=t,e;e instanceof J||w("exiting due to exception: "+e),process.exit(t)},e.inspect=function(){return"[Emscripten Module object]"}):(d||y)&&(y?m=self.location.href:"undefined"!=typeof document&&document.currentScript&&(m=document.currentScript.src),_scriptDir&&(m=_scriptDir),m=0!==m.indexOf("blob:")?m.substr(0,m.replace(/[?#].*/,"").lastIndexOf("/")+1):"",i=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},y&&(u=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),o=(t,e,n)=>{var r=new XMLHttpRequest;r.open("GET",t,!0),r.responseType="arraybuffer",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)});var g,v=e.print||console.log.bind(console),w=e.printErr||console.warn.bind(console);Object.assign(e,f),f=null,e.thisProgram&&(p=e.thisProgram),e.quit&&(h=e.quit),e.wasmBinary&&(g=e.wasmBinary);var _=e.noExitRuntime||!1;"object"!=typeof WebAssembly&&V("no native wasm support detected");var O,A,S,T,E,M,C=!1,x="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function R(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&x)return x.decode(t.subarray(e,n));for(r="";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function j(t,e){return(t>>>=0)?R(T,t,e):""}function k(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function D(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function P(){var t=O.buffer;A=t,e.HEAP8=S=new Int8Array(t),e.HEAP16=new Int16Array(t),e.HEAP32=E=new Int32Array(t),e.HEAPU8=T=new Uint8Array(t),e.HEAPU16=new Uint16Array(t),e.HEAPU32=M=new Uint32Array(t),e.HEAPF32=new Float32Array(t),e.HEAPF64=new Float64Array(t)}var U,F=[],I=[],W=[],H=[],L=0;function z(){var t=e.preRun.shift();F.unshift(t)}var Y,B=0,G=null,N=null;function V(t){throw e.onAbort&&e.onAbort(t),w(t="Aborted("+t+")"),C=!0,t=new WebAssembly.RuntimeError(t+". Build with -sASSERTIONS for more info."),a(t),t}function $(){return Y.startsWith("data:application/octet-stream;base64,")}if(Y="ort-wasm.wasm",!$()){var q=Y;Y=e.locateFile?e.locateFile(q,m):m+q}function X(){var t=Y;try{if(t==Y&&g)return new Uint8Array(g);if(u)return u(t);throw"both async and sync fetching of the wasm failed"}catch(t){V(t)}}function J(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function Z(t){for(;0<t.length;)t.shift()(e)}var Q=[],K=0,tt=0;function et(t){this.Db=t,this.zb=t-24,this.Ub=function(t){M[this.zb+4>>2>>>0]=t},this.Eb=function(){return M[this.zb+4>>2>>>0]},this.Sb=function(t){M[this.zb+8>>2>>>0]=t},this.Wb=function(){return M[this.zb+8>>2>>>0]},this.Tb=function(){E[this.zb>>2>>>0]=0},this.Ib=function(t){S[this.zb+12>>0>>>0]=t?1:0},this.Pb=function(){return 0!=S[this.zb+12>>0>>>0]},this.Jb=function(t){S[this.zb+13>>0>>>0]=t?1:0},this.Lb=function(){return 0!=S[this.zb+13>>0>>>0]},this.Rb=function(t,e){this.Fb(0),this.Ub(t),this.Sb(e),this.Tb(),this.Ib(!1),this.Jb(!1)},this.Nb=function(){E[this.zb>>2>>>0]+=1},this.Xb=function(){var t=E[this.zb>>2>>>0];return E[this.zb>>2>>>0]=t-1,1===t},this.Fb=function(t){M[this.zb+16>>2>>>0]=t},this.Ob=function(){return M[this.zb+16>>2>>>0]},this.Qb=function(){if(Mt(this.Eb()))return M[this.Db>>2>>>0];var t=this.Ob();return 0!==t?t:this.Db}}function nt(t){return vt(new et(t).zb)}var rt=[];function at(t){var e=rt[t];return e||(t>=rt.length&&(rt.length=t+1),rt[t]=e=U.get(t)),e}function it(t){var e=D(t)+1,n=gt(e);return n&&k(t,S,n,e),n}var ot={};function ut(){if(!ct){var t,e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:p||"./this.program"};for(t in ot)void 0===ot[t]?delete e[t]:e[t]=ot[t];var n=[];for(t in e)n.push(t+"="+e[t]);ct=n}return ct}var ct,st=[null,[],[]];function lt(t,e){var n=st[t];0===e||10===e?((1===t?v:w)(R(n,0)),n.length=0):n.push(e)}var ft=0;function pt(t){return 0==t%4&&(0!=t%100||0==t%400)}var ht=[31,29,31,30,31,30,31,31,30,31,30,31],dt=[31,28,31,30,31,30,31,31,30,31,30,31];function yt(t,e,n,r){function a(t,e,n){for(t="number"==typeof t?t.toString():t||"";t.length<e;)t=n[0]+t;return t}function i(t,e){return a(t,e,"0")}function o(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function u(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function c(t){var e=t.Bb;for(t=new Date(new Date(t.Cb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(pt(t.getFullYear())?ht:dt)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=u(new Date(t.getFullYear(),0,4)),n=u(n),0>=o(e,t)?0>=o(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var s=E[r+40>>2>>>0];for(var l in r={$b:E[r>>2>>>0],Zb:E[r+4>>2>>>0],Gb:E[r+8>>2>>>0],Kb:E[r+12>>2>>>0],Hb:E[r+16>>2>>>0],Cb:E[r+20>>2>>>0],Ab:E[r+24>>2>>>0],Bb:E[r+28>>2>>>0],bc:E[r+32>>2>>>0],Yb:E[r+36>>2>>>0],ac:s?j(s):""},n=j(n),s={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})n=n.replace(new RegExp(l,"g"),s[l]);var f="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),p="January February March April May June July August September October November December".split(" ");for(l in s={"%a":function(t){return f[t.Ab].substring(0,3)},"%A":function(t){return f[t.Ab]},"%b":function(t){return p[t.Hb].substring(0,3)},"%B":function(t){return p[t.Hb]},"%C":function(t){return i((t.Cb+1900)/100|0,2)},"%d":function(t){return i(t.Kb,2)},"%e":function(t){return a(t.Kb,2," ")},"%g":function(t){return c(t).toString().substring(2)},"%G":function(t){return c(t)},"%H":function(t){return i(t.Gb,2)},"%I":function(t){return 0==(t=t.Gb)?t=12:12<t&&(t-=12),i(t,2)},"%j":function(t){for(var e=0,n=0;n<=t.Hb-1;e+=(pt(t.Cb+1900)?ht:dt)[n++]);return i(t.Kb+e,3)},"%m":function(t){return i(t.Hb+1,2)},"%M":function(t){return i(t.Zb,2)},"%n":function(){return"\\n"},"%p":function(t){return 0<=t.Gb&&12>t.Gb?"AM":"PM"},"%S":function(t){return i(t.$b,2)},"%t":function(){return"\\t"},"%u":function(t){return t.Ab||7},"%U":function(t){return i(Math.floor((t.Bb+7-t.Ab)/7),2)},"%V":function(t){var e=Math.floor((t.Bb+7-(t.Ab+6)%7)/7);if(2>=(t.Ab+371-t.Bb-2)%7&&e++,e)53==e&&(4==(n=(t.Ab+371-t.Bb)%7)||3==n&&pt(t.Cb)||(e=1));else{e=52;var n=(t.Ab+7-t.Bb-1)%7;(4==n||5==n&&pt(t.Cb%400-1))&&e++}return i(e,2)},"%w":function(t){return t.Ab},"%W":function(t){return i(Math.floor((t.Bb+7-(t.Ab+6)%7)/7),2)},"%y":function(t){return(t.Cb+1900).toString().substring(2)},"%Y":function(t){return t.Cb+1900},"%z":function(t){var e=0<=(t=t.Yb);return t=Math.abs(t)/60,(e?"+":"-")+String("0000"+(t/60*100+t%60)).slice(-4)},"%Z":function(t){return t.ac},"%%":function(){return"%"}},n=n.replace(/%%/g,"\\0\\0"),s)n.includes(l)&&(n=n.replace(new RegExp(l,"g"),s[l](r)));return l=function(t){var e=Array(D(t)+1);return k(t,e,0,e.length),e}(n=n.replace(/\\0\\0/g,"%")),l.length>e?0:(S.set(l,t>>>0),l.length-1)}var bt={a:function(t){return gt(t+24)+24},m:function(t){return(t=new et(t)).Pb()||(t.Ib(!0),K--),t.Jb(!1),Q.push(t),t.Nb(),t.Qb()},ia:function(t){throw w("Unexpected exception thrown, this is not properly supported - aborting"),C=!0,t},w:function(){Ot(0);var t=Q.pop();if(t.Xb()&&!t.Lb()){var e=t.Wb();e&&at(e)(t.Db),nt(t.Db)}tt=0},d:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},k:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},g:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},s:nt,L:function(){var t=Q.pop();t||V("no exception to throw");var e=t.Db;throw t.Lb()||(Q.push(t),t.Jb(!0),t.Ib(!1),K++),tt=e,e},b:function(t,e,n){throw new et(t).Rb(e,n),tt=t,K++,t},la:function(){return K},i:function(t){throw tt||(tt=t),t},H:function(){return 0},Ba:function(){},pa:function(){},ra:function(){},ka:function(){return 0},za:function(){},ua:function(){},ya:function(){},R:function(){},qa:function(){},na:function(){},Aa:function(){},oa:function(){},Ha:function(){},Ja:function(){V("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking")},Ia:function(){V("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking")},S:function(){return Date.now()},Ca:function(){return!0},Da:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getUTCSeconds(),E[e+4>>2>>>0]=t.getUTCMinutes(),E[e+8>>2>>>0]=t.getUTCHours(),E[e+12>>2>>>0]=t.getUTCDate(),E[e+16>>2>>>0]=t.getUTCMonth(),E[e+20>>2>>>0]=t.getUTCFullYear()-1900,E[e+24>>2>>>0]=t.getUTCDay(),E[e+28>>2>>>0]=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},Ea:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getSeconds(),E[e+4>>2>>>0]=t.getMinutes(),E[e+8>>2>>>0]=t.getHours(),E[e+12>>2>>>0]=t.getDate(),E[e+16>>2>>>0]=t.getMonth(),E[e+20>>2>>>0]=t.getFullYear()-1900,E[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1);E[e+28>>2>>>0]=(t.getTime()-n.getTime())/864e5|0,E[e+36>>2>>>0]=-60*t.getTimezoneOffset();var r=new Date(t.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),E[e+32>>2>>>0]=0|(r!=n&&t.getTimezoneOffset()==Math.min(n,r))},Fa:function(t){var e=new Date(E[t+20>>2>>>0]+1900,E[t+16>>2>>>0],E[t+12>>2>>>0],E[t+8>>2>>>0],E[t+4>>2>>>0],E[t>>2>>>0],0),n=E[t+32>>2>>>0],r=e.getTimezoneOffset(),a=new Date(e.getFullYear(),0,1),i=new Date(e.getFullYear(),6,1).getTimezoneOffset(),o=a.getTimezoneOffset(),u=Math.min(o,i);return 0>n?E[t+32>>2>>>0]=Number(i!=o&&u==r):0<n!=(u==r)&&(i=Math.max(o,i),e.setTime(e.getTime()+6e4*((0<n?u:i)-r))),E[t+24>>2>>>0]=e.getDay(),E[t+28>>2>>>0]=(e.getTime()-a.getTime())/864e5|0,E[t>>2>>>0]=e.getSeconds(),E[t+4>>2>>>0]=e.getMinutes(),E[t+8>>2>>>0]=e.getHours(),E[t+12>>2>>>0]=e.getDate(),E[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},sa:function(){return-52},ta:function(){},Ga:function t(e,n,r){t.Vb||(t.Vb=!0,function(t,e,n){function r(t){return(t=t.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?t[1]:"GMT"}var a=(new Date).getFullYear(),i=new Date(a,0,1),o=new Date(a,6,1);a=i.getTimezoneOffset();var u=o.getTimezoneOffset();E[t>>2>>>0]=60*Math.max(a,u),E[e>>2>>>0]=Number(a!=u),t=r(i),e=r(o),t=it(t),e=it(e),u<a?(M[n>>2>>>0]=t,M[n+4>>2>>>0]=e):(M[n>>2>>>0]=e,M[n+4>>2>>>0]=t)}(e,n,r))},B:function(){V("")},ma:function(){return 4294901760},I:b?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:()=>performance.now(),xa:function(t,e,n){T.copyWithin(t>>>0,e>>>0,e+n>>>0)},G:function(t){var e=T.length;if(4294901760<(t>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=e*(1+.2/n);r=Math.min(r,t+100663296);var a=Math;r=Math.max(t,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);t:{try{O.grow(a-A.byteLength+65535>>>16),P();var i=1;break t}catch(t){}i=void 0}if(i)return!0}return!1},va:function(t,e){var n=0;return ut().forEach((function(r,a){var i=e+n;for(a=M[t+4*a>>2>>>0]=i,i=0;i<r.length;++i)S[a++>>0>>>0]=r.charCodeAt(i);S[a>>0>>>0]=0,n+=r.length+1})),0},wa:function(t,e){var n=ut();M[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),M[e>>2>>>0]=r,0},ba:function(t){_||0<L||(_t(),Z(W),wt(0),st[1].length&&lt(1,10),st[2].length&&lt(2,10)),_||0<L||(e.onExit&&e.onExit(t),C=!0),h(t,new J(t))},E:function(){return 52},Q:function(){return 52},ca:function(){return 70},P:function(t,e,n,r){for(var a=0,i=0;i<n;i++){var o=M[e>>2>>>0],u=M[e+4>>2>>>0];e+=8;for(var c=0;c<u;c++)lt(t,T[o+c>>>0]);a+=u}return M[r>>2>>>0]=a,0},c:function(){return ft},ja:function t(e,r){t.Mb||(t.Mb=function(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(b)try{var e=n(Object(function(){var t=new Error("Cannot find module \'crypto\'");throw t.code="MODULE_NOT_FOUND",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>V("randomDevice")}());for(var a=0;a<r;a++)S[e+a>>0>>>0]=t.Mb();return 0},ea:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},fa:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},J:function(t){var e=At();try{return at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},e:function(t,e){var n=At();try{return at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},N:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},O:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},j:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},o:function(t,e,n,r){var a=At();try{return at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},p:function(t,e,n,r,a){var i=At();try{return at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},M:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},r:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},v:function(t,e,n,r,a,i,o){var u=At();try{return at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},K:function(t,e,n,r,a,i,o,u){var c=At();try{return at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{return at(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},X:function(t,e,n,r,a,i,o,u){var c=At();try{return Ft(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},V:function(t,e,n,r,a,i,o){var u=At();try{return xt(t,e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},U:function(t,e,n,r,a){var i=At();try{return It(t,e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},Z:function(t,e,n,r){var a=At();try{return Pt(t,e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},W:function(t){var e=At();try{return Ct(t)}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},Y:function(t,e){var n=At();try{return Ut(t,e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},T:function(t,e,n){var r=At();try{return Rt(t,e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},f:function(t){var e=At();try{at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},q:function(t,e){var n=At();try{at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},h:function(t,e,n){var r=At();try{at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},da:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},l:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},t:function(t,e,n,r,a){var i=At();try{at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},u:function(t,e,n,r,a,i){var o=At();try{at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},x:function(t,e,n,r,a,i,o){var u=At();try{at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},z:function(t,e,n,r,a,i,o,u){var c=At();try{at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},ga:function(t,e,n,r,a,i,o,u,c){var s=At();try{at(t)(e,n,r,a,i,o,u,c)}catch(t){if(St(s),t!==t+0)throw t;Ot(1,0)}},A:function(t,e,n,r,a,i,o,u,c,s,l){var f=At();try{at(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(St(f),t!==t+0)throw t;Ot(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=At();try{at(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(St(b),t!==t+0)throw t;Ot(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=At();try{jt(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},_:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{Dt(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},$:function(t,e,n,r,a,i){var o=At();try{kt(t,e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},n:function(t){return t},F:function(t){ft=t},ha:yt,y:function(t,e,n,r){return yt(t,e,n,r)}};!function(){function t(t){e.asm=t.exports,O=e.asm.Ka,P(),U=e.asm.ib,I.unshift(e.asm.La),B--,e.monitorRunDependencies&&e.monitorRunDependencies(B),0==B&&(null!==G&&(clearInterval(G),G=null),N&&(t=N,N=null,t()))}function n(e){t(e.instance)}function r(t){return function(){if(!g&&(d||y)){if("function"==typeof fetch&&!Y.startsWith("file://"))return fetch(Y,{credentials:"same-origin"}).then((function(t){if(!t.ok)throw"failed to load wasm binary file at \'"+Y+"\'";return t.arrayBuffer()})).catch((function(){return X()}));if(o)return new Promise((function(t,e){o(Y,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return X()}))}().then((function(t){return WebAssembly.instantiate(t,i)})).then((function(t){return t})).then(t,(function(t){w("failed to asynchronously prepare wasm: "+t),V(t)}))}var i={a:bt};if(B++,e.monitorRunDependencies&&e.monitorRunDependencies(B),e.instantiateWasm)try{return e.instantiateWasm(i,t)}catch(t){return w("Module.instantiateWasm callback failed with error: "+t),!1}(g||"function"!=typeof WebAssembly.instantiateStreaming||$()||Y.startsWith("file://")||b||"function"!=typeof fetch?r(n):fetch(Y,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,i).then(n,(function(t){return w("wasm streaming compile failed: "+t),w("falling back to ArrayBuffer instantiation"),r(n)}))}))).catch(a)}(),e.___wasm_call_ctors=function(){return(e.___wasm_call_ctors=e.asm.La).apply(null,arguments)},e._OrtInit=function(){return(e._OrtInit=e.asm.Ma).apply(null,arguments)},e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.Na).apply(null,arguments)},e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.Oa).apply(null,arguments)},e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.Pa).apply(null,arguments)},e._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.Qa).apply(null,arguments)},e._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.Ra).apply(null,arguments)},e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.Sa).apply(null,arguments)},e._OrtGetInputCount=function(){return(e._OrtGetInputCount=e.asm.Ta).apply(null,arguments)},e._OrtGetOutputCount=function(){return(e._OrtGetOutputCount=e.asm.Ua).apply(null,arguments)},e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.Va).apply(null,arguments)},e._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.Wa).apply(null,arguments)},e._OrtFree=function(){return(e._OrtFree=e.asm.Xa).apply(null,arguments)},e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.Ya).apply(null,arguments)},e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.Za).apply(null,arguments)},e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm._a).apply(null,arguments)},e._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.$a).apply(null,arguments)},e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.ab).apply(null,arguments)},e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.bb).apply(null,arguments)},e._OrtRun=function(){return(e._OrtRun=e.asm.cb).apply(null,arguments)},e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.db).apply(null,arguments)};var mt,gt=e._malloc=function(){return(gt=e._malloc=e.asm.eb).apply(null,arguments)},vt=e._free=function(){return(vt=e._free=e.asm.fb).apply(null,arguments)},wt=e._fflush=function(){return(wt=e._fflush=e.asm.gb).apply(null,arguments)},_t=e.___funcs_on_exit=function(){return(_t=e.___funcs_on_exit=e.asm.hb).apply(null,arguments)},Ot=e._setThrew=function(){return(Ot=e._setThrew=e.asm.jb).apply(null,arguments)},At=e.stackSave=function(){return(At=e.stackSave=e.asm.kb).apply(null,arguments)},St=e.stackRestore=function(){return(St=e.stackRestore=e.asm.lb).apply(null,arguments)},Tt=e.stackAlloc=function(){return(Tt=e.stackAlloc=e.asm.mb).apply(null,arguments)},Et=e.___cxa_can_catch=function(){return(Et=e.___cxa_can_catch=e.asm.nb).apply(null,arguments)},Mt=e.___cxa_is_pointer_type=function(){return(Mt=e.___cxa_is_pointer_type=e.asm.ob).apply(null,arguments)},Ct=e.dynCall_j=function(){return(Ct=e.dynCall_j=e.asm.pb).apply(null,arguments)},xt=e.dynCall_iiiiij=function(){return(xt=e.dynCall_iiiiij=e.asm.qb).apply(null,arguments)},Rt=e.dynCall_jii=function(){return(Rt=e.dynCall_jii=e.asm.rb).apply(null,arguments)},jt=e.dynCall_viiiiij=function(){return(jt=e.dynCall_viiiiij=e.asm.sb).apply(null,arguments)},kt=e.dynCall_vjji=function(){return(kt=e.dynCall_vjji=e.asm.tb).apply(null,arguments)},Dt=e.dynCall_viiijjjii=function(){return(Dt=e.dynCall_viiijjjii=e.asm.ub).apply(null,arguments)},Pt=e.dynCall_iij=function(){return(Pt=e.dynCall_iij=e.asm.vb).apply(null,arguments)},Ut=e.dynCall_ji=function(){return(Ut=e.dynCall_ji=e.asm.wb).apply(null,arguments)},Ft=e.dynCall_iiiiiij=function(){return(Ft=e.dynCall_iiiiiij=e.asm.xb).apply(null,arguments)},It=e.dynCall_iiij=function(){return(It=e.dynCall_iiij=e.asm.yb).apply(null,arguments)};function Wt(){function t(){if(!mt&&(mt=!0,e.calledRun=!0,!C)){if(Z(I),r(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),e.postRun)for("function"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var t=e.postRun.shift();H.unshift(t)}Z(H)}}if(!(0<B)){if(e.preRun)for("function"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)z();Z(F),0<B||(e.setStatus?(e.setStatus("Running..."),setTimeout((function(){setTimeout((function(){e.setStatus("")}),1),t()}),1)):t())}}if(e.UTF8ToString=j,e.stringToUTF8=function(t,e,n){return k(t,T,e,n)},e.lengthBytesUTF8=D,e.stackSave=At,e.stackRestore=St,e.stackAlloc=Tt,N=function t(){mt||Wt(),mt||(N=t)},e.preInit)for("function"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();return Wt(),t.ready});t.exports=r},967:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.iterateExtraOptions=void 0,e.iterateExtraOptions=(t,n,r,a)=>{if("object"==typeof t&&null!==t){if(r.has(t))throw new Error("Circular reference in options");r.add(t)}Object.entries(t).forEach((([t,i])=>{const o=n?n+t:t;if("object"==typeof i)(0,e.iterateExtraOptions)(i,o+".",r,a);else if("string"==typeof i||"number"==typeof i)a(o,i.toString());else{if("boolean"!=typeof i)throw new Error("Can\'t handle extra config type: "+typeof i);a(o,i?"1":"0")}}))}},586:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setRunOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setRunOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};try{if(void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if("number"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if("number"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);void 0===(null==t?void 0:t.terminate)&&(u.terminate=!1);let i=0;if(void 0!==(null==t?void 0:t.tag)&&(i=(0,a.allocWasmString)(t.tag,o)),n=e._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,i),0===n)throw new Error("Can\'t create run options");return void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,"",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddRunConfigEntry(n,i,u))throw new Error(`Can\'t set a run config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseRunOptions(n),o.forEach(e._free),t}}},919:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setSessionOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setSessionOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};(t=>{t.extra||(t.extra={}),t.extra.session||(t.extra.session={});const e=t.extra.session;e.use_ort_model_bytes_directly||(e.use_ort_model_bytes_directly="1")})(u);try{void 0===(null==t?void 0:t.graphOptimizationLevel)&&(u.graphOptimizationLevel="all");const c=(t=>{switch(t){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${t}`)}})(u.graphOptimizationLevel);void 0===(null==t?void 0:t.enableCpuMemArena)&&(u.enableCpuMemArena=!0),void 0===(null==t?void 0:t.enableMemPattern)&&(u.enableMemPattern=!0),void 0===(null==t?void 0:t.executionMode)&&(u.executionMode="sequential");const s=(t=>{switch(t){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${t}`)}})(u.executionMode);let l=0;if(void 0!==(null==t?void 0:t.logId)&&(l=(0,a.allocWasmString)(t.logId,o)),void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if("number"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if("number"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);if(void 0===(null==t?void 0:t.enableProfiling)&&(u.enableProfiling=!1),n=e._OrtCreateSessionOptions(c,!!u.enableCpuMemArena,!!u.enableMemPattern,s,!!u.enableProfiling,0,l,u.logSeverityLevel,u.logVerbosityLevel),0===n)throw new Error("Can\'t create session options");return(null==t?void 0:t.executionProviders)&&((t,e,n)=>{for(const r of e){let e="string"==typeof r?r:r.name;switch(e){case"xnnpack":e="XNNPACK";break;case"wasm":case"cpu":continue;default:throw new Error(`not supported EP: ${e}`)}const o=(0,a.allocWasmString)(e,n);if(0!==(0,i.getInstance)()._OrtAppendExecutionProvider(t,o))throw new Error(`Can\'t append execution provider: ${e}`)}})(n,t.executionProviders,o),void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,"",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddSessionConfigEntry(n,i,u))throw new Error(`Can\'t set a session config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseSessionOptions(n),o.forEach(e._free),t}}},983:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.allocWasmString=void 0;const r=n(361);e.allocWasmString=(t,e)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(t)+1,i=n._malloc(a);return n.stringToUTF8(t,i,a),e.push(i),i}},349:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.extractTransferableBuffers=e.endProfiling=e.run=e.releaseSession=e.createSession=e.createSessionFinalize=e.createSessionAllocate=e.initOrt=void 0;const r=n(586),a=n(919),i=n(983),o=n(361);e.initOrt=(t,e)=>{const n=(0,o.getInstance)()._OrtInit(t,e);if(0!==n)throw new Error(`Can\'t initialize onnxruntime. error code = ${n}`)};const u=new Map;e.createSessionAllocate=t=>{const e=(0,o.getInstance)(),n=e._malloc(t.byteLength);return e.HEAPU8.set(t,n),[n,t.byteLength]},e.createSessionFinalize=(t,e)=>{const n=(0,o.getInstance)();let r=0,i=0,c=[];try{if([i,c]=(0,a.setSessionOptions)(e),r=n._OrtCreateSession(t[0],t[1],i),0===r)throw new Error("Can\'t create a session")}finally{n._free(t[0]),n._OrtReleaseSessionOptions(i),c.forEach(n._free)}const s=n._OrtGetInputCount(r),l=n._OrtGetOutputCount(r),f=[],p=[],h=[],d=[];for(let t=0;t<s;t++){const e=n._OrtGetInputName(r,t);if(0===e)throw new Error("Can\'t get an input name");p.push(e),f.push(n.UTF8ToString(e))}for(let t=0;t<l;t++){const e=n._OrtGetOutputName(r,t);if(0===e)throw new Error("Can\'t get an output name");d.push(e),h.push(n.UTF8ToString(e))}return u.set(r,[r,p,d]),[r,f,h]},e.createSession=(t,n)=>{const r=(0,e.createSessionAllocate)(t);return(0,e.createSessionFinalize)(r,n)},e.releaseSession=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error("invalid session id");const r=n[0],a=n[1],i=n[2];a.forEach(e._OrtFree),i.forEach(e._OrtFree),e._OrtReleaseSession(r),u.delete(t)};const c=t=>{switch(t){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${t}`)}},s=t=>{switch(t){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${t}`)}},l=t=>{switch(t){case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${t}`)}};e.run=(t,e,n,a,f)=>{const p=(0,o.getInstance)(),h=u.get(t);if(!h)throw new Error("invalid session id");const d=h[0],y=h[1],b=h[2],m=e.length,g=a.length;let v=0,w=[];const _=[],O=[];try{[v,w]=(0,r.setRunOptions)(f);for(let t=0;t<m;t++){const e=n[t][0],r=n[t][1],a=n[t][2];let o,u;if(Array.isArray(a)){u=4*a.length,o=p._malloc(u),O.push(o);let t=o/4;for(let e=0;e<a.length;e++){if("string"!=typeof a[e])throw new TypeError(`tensor data at index ${e} is not a string`);p.HEAPU32[t++]=(0,i.allocWasmString)(a[e],O)}}else u=a.byteLength,o=p._malloc(u),O.push(o),p.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),o);const s=p.stackSave(),l=p.stackAlloc(4*r.length);try{let t=l/4;r.forEach((e=>p.HEAP32[t++]=e));const n=p._OrtCreateTensor(c(e),o,u,l,r.length);if(0===n)throw new Error("Can\'t create a tensor");_.push(n)}finally{p.stackRestore(s)}}const t=p.stackSave(),o=p.stackAlloc(4*m),u=p.stackAlloc(4*m),h=p.stackAlloc(4*g),A=p.stackAlloc(4*g);try{let n=o/4,r=u/4,i=h/4,c=A/4;for(let t=0;t<m;t++)p.HEAPU32[n++]=_[t],p.HEAPU32[r++]=y[e[t]];for(let t=0;t<g;t++)p.HEAPU32[i++]=0,p.HEAPU32[c++]=b[a[t]];let f=p._OrtRun(d,u,o,m,A,g,h,v);const w=[];if(0===f)for(let t=0;t<g;t++){const e=p.HEAPU32[h/4+t],n=p.stackSave(),r=p.stackAlloc(16);let a,i=0;try{if(f=p._OrtGetTensorData(e,r,r+4,r+8,r+12),0!==f)throw new Error(`Can\'t access output tensor data. error code = ${f}`);let t=r/4;const o=p.HEAPU32[t++];i=p.HEAPU32[t++];const u=p.HEAPU32[t++],c=p.HEAPU32[t++],h=[];for(let t=0;t<c;t++)h.push(p.HEAPU32[u/4+t]);p._OrtFree(u);const d=0===h.length?1:h.reduce(((t,e)=>t*e));if(a=s(o),"string"===a){const t=[];let e=i/4;for(let n=0;n<d;n++){const r=p.HEAPU32[e++],a=n===d-1?void 0:p.HEAPU32[e]-r;t.push(p.UTF8ToString(r,a))}w.push([a,h,t])}else{const t=new(l(a))(d);new Uint8Array(t.buffer,t.byteOffset,t.byteLength).set(p.HEAPU8.subarray(i,i+t.byteLength)),w.push([a,h,t])}}finally{p.stackRestore(n),"string"===a&&i&&p._free(i),p._OrtReleaseTensor(e)}}if(0===f)return w;throw new Error(`failed to call OrtRun(). error code = ${f}.`)}finally{p.stackRestore(t)}}finally{_.forEach(p._OrtReleaseTensor),O.forEach(p._free),p._OrtReleaseRunOptions(v),w.forEach(p._free)}},e.endProfiling=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error("invalid session id");const r=n[0],a=e._OrtEndProfiling(r);if(0===a)throw new Error("Can\'t get an profile file name");e._OrtFree(a)},e.extractTransferableBuffers=t=>{const e=[];for(const n of t){const t=n[2];!Array.isArray(t)&&t.buffer&&e.push(t.buffer)}return e}},361:function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(e,n);a&&!("get"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,a)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return a(e,t),e},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.dispose=e.getInstance=e.initializeWebAssembly=void 0;const u=i(n(449)),c=o(n(932)),s=n(474);let l,f=!1,p=!1,h=!1;const d=(t,e)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-threaded.wasm":t?"ort-wasm-simd.wasm":"ort-wasm.wasm";e.initializeWebAssembly=async t=>{if(f)return Promise.resolve();if(p)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(h)throw new Error("previous call to \'initializeWebAssembly()\' failed.");p=!0;const e=t.initTimeout,r=t.numThreads,a=t.simd,i=r>1&&(()=>{try{return"undefined"!=typeof SharedArrayBuffer&&("undefined"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(t){return!1}})(),o=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(t){return!1}})(),y="string"==typeof t.wasmPaths?t.wasmPaths:void 0,b=d(!1,i),m=d(o,i),g="object"==typeof t.wasmPaths?t.wasmPaths[m]:void 0;let v=!1;const w=[];if(e>0&&w.push(new Promise((t=>{setTimeout((()=>{v=!0,t()}),e)}))),w.push(new Promise(((t,e)=>{const r=i?s:c.default,a={locateFile:(t,e)=>i&&t.endsWith(".worker.js")&&"undefined"!=typeof Blob?URL.createObjectURL(new Blob([n(154)],{type:"text/javascript"})):t===b?null!=g?g:(null!=y?y:e)+m:e+t};if(i)if("undefined"==typeof Blob)a.mainScriptUrlOrBlob=u.join("/","ort-wasm-threaded.js");else{const t=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([t],{type:"text/javascript"})}r(a).then((e=>{p=!1,f=!0,l=e,t()}),(t=>{p=!1,h=!0,e(t)}))}))),await Promise.race(w),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${e}ms`)},e.getInstance=()=>{if(f&&l)return l;throw new Error("WebAssembly is not initialized yet.")},e.dispose=()=>{var t;!f||p||h||(p=!0,null===(t=l.PThread)||void 0===t||t.terminateAllThreads(),l=void 0,p=!1,f=!1,h=!0)}},154:t=>{"use strict";t.exports=\'"use strict";var e={},t="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node;if(t){var r=require("worker_threads"),a=r.parentPort;a.on("message",(e=>onmessage({data:e})));var o=require("fs");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,"utf8"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(" ");t?o.writeSync(2,e+"\\\\n"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if("load"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,"string"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if("run"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if("unwind"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else"cancel"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):"setimmediate"===t.data.target||("processProxyingQueue"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i("worker.js received unknown command "+t.data.cmd),i(t.data)))}catch(t){throw i("worker.js onmessage() captured an uncaught exception: "+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\n\'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{"use strict";const t=n(349),e=n(361);self.onmessage=n=>{switch(n.data.type){case"init-wasm":(0,e.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:"init-wasm"})),(t=>postMessage({type:"init-wasm",err:t})));break;case"init-ort":try{const{numThreads:e,loggingLevel:r}=n.data.in;(0,t.initOrt)(e,r),postMessage({type:"init-ort"})}catch(t){postMessage({type:"init-ort",err:t})}break;case"create_allocate":try{const{model:e}=n.data.in,r=(0,t.createSessionAllocate)(e);postMessage({type:"create_allocate",out:r})}catch(t){postMessage({type:"create_allocate",err:t})}break;case"create_finalize":try{const{modeldata:e,options:r}=n.data.in,a=(0,t.createSessionFinalize)(e,r);postMessage({type:"create_finalize",out:a})}catch(t){postMessage({type:"create_finalize",err:t})}break;case"create":try{const{model:e,options:r}=n.data.in,a=(0,t.createSession)(e,r);postMessage({type:"create",out:a})}catch(t){postMessage({type:"create",err:t})}break;case"release":try{const e=n.data.in;(0,t.releaseSession)(e),postMessage({type:"release"})}catch(t){postMessage({type:"release",err:t})}break;case"run":try{const{sessionId:e,inputIndices:r,inputs:a,outputIndices:i,options:o}=n.data.in,u=(0,t.run)(e,r,a,i,o);postMessage({type:"run",out:u},(0,t.extractTransferableBuffers)(u))}catch(t){postMessage({type:"run",err:t})}break;case"end-profiling":try{const e=n.data.in;(0,t.endProfiling)(e),postMessage({type:"end-profiling"})}catch(t){postMessage({type:"end-profiling",err:t})}}}})()})();\n', "Worker", void 0, void 0);
        }
      }, 477: (t2) => {
        "use strict";
        t2.exports = function(t3, e2, n2, r2) {
          var i2 = self || window;
          try {
            try {
              var o2;
              try {
                o2 = new i2.Blob([t3]);
              } catch (e3) {
                (o2 = new (i2.BlobBuilder || i2.WebKitBlobBuilder || i2.MozBlobBuilder || i2.MSBlobBuilder)()).append(t3), o2 = o2.getBlob();
              }
              var a2 = i2.URL || i2.webkitURL, s2 = a2.createObjectURL(o2), u2 = new i2[e2](s2, n2);
              return a2.revokeObjectURL(s2), u2;
            } catch (r3) {
              return new i2[e2]("data:application/javascript,".concat(encodeURIComponent(t3)), n2);
            }
          } catch (t4) {
            if (!r2)
              throw Error("Inline worker is not supported");
            return new i2[e2](r2, n2);
          }
        };
      }, 4154: (t2) => {
        "use strict";
        t2.exports = '"use strict";var e={},t="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node;if(t){var r=require("worker_threads"),a=r.parentPort;a.on("message",(e=>onmessage({data:e})));var o=require("fs");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,"utf8"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(" ");t?o.writeSync(2,e+"\\n"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if("load"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,"string"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if("run"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if("unwind"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else"cancel"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):"setimmediate"===t.data.target||("processProxyingQueue"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i("worker.js received unknown command "+t.data.cmd),i(t.data)))}catch(t){throw i("worker.js onmessage() captured an uncaught exception: "+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\n';
      }, 1670: (t2) => {
        "use strict";
        t2.exports = __WEBPACK_EXTERNAL_MODULE__1670__;
      }, 7067: () => {
      }, 1296: () => {
      }, 1384: () => {
      }, 3993: () => {
      }, 908: () => {
      }, 6953: () => {
      }, 9925: () => {
      }, 2806: () => {
      }, 6449: () => {
      }, 2850: () => {
      }, 5381: () => {
      }, 5686: (t2, e2, n2) => {
        "use strict";
        n2.r(e2), n2.d(e2, {flatbuffers: () => r2});
        var r2 = {};
        r2.Offset, r2.Table, r2.SIZEOF_SHORT = 2, r2.SIZEOF_INT = 4, r2.FILE_IDENTIFIER_LENGTH = 4, r2.SIZE_PREFIX_LENGTH = 4, r2.Encoding = {UTF8_BYTES: 1, UTF16_STRING: 2}, r2.int32 = new Int32Array(2), r2.float32 = new Float32Array(r2.int32.buffer), r2.float64 = new Float64Array(r2.int32.buffer), r2.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1, r2.Long = function(t3, e3) {
          this.low = 0 | t3, this.high = 0 | e3;
        }, r2.Long.create = function(t3, e3) {
          return t3 == 0 && e3 == 0 ? r2.Long.ZERO : new r2.Long(t3, e3);
        }, r2.Long.prototype.toFloat64 = function() {
          return (this.low >>> 0) + 4294967296 * this.high;
        }, r2.Long.prototype.equals = function(t3) {
          return this.low == t3.low && this.high == t3.high;
        }, r2.Long.ZERO = new r2.Long(0, 0), r2.Builder = function(t3) {
          if (t3)
            e3 = t3;
          else
            var e3 = 1024;
          this.bb = r2.ByteBuffer.allocate(e3), this.space = e3, this.minalign = 1, this.vtable = null, this.vtable_in_use = 0, this.isNested = false, this.object_start = 0, this.vtables = [], this.vector_num_elems = 0, this.force_defaults = false;
        }, r2.Builder.prototype.clear = function() {
          this.bb.clear(), this.space = this.bb.capacity(), this.minalign = 1, this.vtable = null, this.vtable_in_use = 0, this.isNested = false, this.object_start = 0, this.vtables = [], this.vector_num_elems = 0, this.force_defaults = false;
        }, r2.Builder.prototype.forceDefaults = function(t3) {
          this.force_defaults = t3;
        }, r2.Builder.prototype.dataBuffer = function() {
          return this.bb;
        }, r2.Builder.prototype.asUint8Array = function() {
          return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());
        }, r2.Builder.prototype.prep = function(t3, e3) {
          t3 > this.minalign && (this.minalign = t3);
          for (var n3 = 1 + ~(this.bb.capacity() - this.space + e3) & t3 - 1; this.space < n3 + t3 + e3; ) {
            var i2 = this.bb.capacity();
            this.bb = r2.Builder.growByteBuffer(this.bb), this.space += this.bb.capacity() - i2;
          }
          this.pad(n3);
        }, r2.Builder.prototype.pad = function(t3) {
          for (var e3 = 0; e3 < t3; e3++)
            this.bb.writeInt8(--this.space, 0);
        }, r2.Builder.prototype.writeInt8 = function(t3) {
          this.bb.writeInt8(this.space -= 1, t3);
        }, r2.Builder.prototype.writeInt16 = function(t3) {
          this.bb.writeInt16(this.space -= 2, t3);
        }, r2.Builder.prototype.writeInt32 = function(t3) {
          this.bb.writeInt32(this.space -= 4, t3);
        }, r2.Builder.prototype.writeInt64 = function(t3) {
          this.bb.writeInt64(this.space -= 8, t3);
        }, r2.Builder.prototype.writeFloat32 = function(t3) {
          this.bb.writeFloat32(this.space -= 4, t3);
        }, r2.Builder.prototype.writeFloat64 = function(t3) {
          this.bb.writeFloat64(this.space -= 8, t3);
        }, r2.Builder.prototype.addInt8 = function(t3) {
          this.prep(1, 0), this.writeInt8(t3);
        }, r2.Builder.prototype.addInt16 = function(t3) {
          this.prep(2, 0), this.writeInt16(t3);
        }, r2.Builder.prototype.addInt32 = function(t3) {
          this.prep(4, 0), this.writeInt32(t3);
        }, r2.Builder.prototype.addInt64 = function(t3) {
          this.prep(8, 0), this.writeInt64(t3);
        }, r2.Builder.prototype.addFloat32 = function(t3) {
          this.prep(4, 0), this.writeFloat32(t3);
        }, r2.Builder.prototype.addFloat64 = function(t3) {
          this.prep(8, 0), this.writeFloat64(t3);
        }, r2.Builder.prototype.addFieldInt8 = function(t3, e3, n3) {
          (this.force_defaults || e3 != n3) && (this.addInt8(e3), this.slot(t3));
        }, r2.Builder.prototype.addFieldInt16 = function(t3, e3, n3) {
          (this.force_defaults || e3 != n3) && (this.addInt16(e3), this.slot(t3));
        }, r2.Builder.prototype.addFieldInt32 = function(t3, e3, n3) {
          (this.force_defaults || e3 != n3) && (this.addInt32(e3), this.slot(t3));
        }, r2.Builder.prototype.addFieldInt64 = function(t3, e3, n3) {
          !this.force_defaults && e3.equals(n3) || (this.addInt64(e3), this.slot(t3));
        }, r2.Builder.prototype.addFieldFloat32 = function(t3, e3, n3) {
          (this.force_defaults || e3 != n3) && (this.addFloat32(e3), this.slot(t3));
        }, r2.Builder.prototype.addFieldFloat64 = function(t3, e3, n3) {
          (this.force_defaults || e3 != n3) && (this.addFloat64(e3), this.slot(t3));
        }, r2.Builder.prototype.addFieldOffset = function(t3, e3, n3) {
          (this.force_defaults || e3 != n3) && (this.addOffset(e3), this.slot(t3));
        }, r2.Builder.prototype.addFieldStruct = function(t3, e3, n3) {
          e3 != n3 && (this.nested(e3), this.slot(t3));
        }, r2.Builder.prototype.nested = function(t3) {
          if (t3 != this.offset())
            throw new Error("FlatBuffers: struct must be serialized inline.");
        }, r2.Builder.prototype.notNested = function() {
          if (this.isNested)
            throw new Error("FlatBuffers: object serialization must not be nested.");
        }, r2.Builder.prototype.slot = function(t3) {
          this.vtable[t3] = this.offset();
        }, r2.Builder.prototype.offset = function() {
          return this.bb.capacity() - this.space;
        }, r2.Builder.growByteBuffer = function(t3) {
          var e3 = t3.capacity();
          if (3221225472 & e3)
            throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");
          var n3 = e3 << 1, i2 = r2.ByteBuffer.allocate(n3);
          return i2.setPosition(n3 - e3), i2.bytes().set(t3.bytes(), n3 - e3), i2;
        }, r2.Builder.prototype.addOffset = function(t3) {
          this.prep(r2.SIZEOF_INT, 0), this.writeInt32(this.offset() - t3 + r2.SIZEOF_INT);
        }, r2.Builder.prototype.startObject = function(t3) {
          this.notNested(), this.vtable == null && (this.vtable = []), this.vtable_in_use = t3;
          for (var e3 = 0; e3 < t3; e3++)
            this.vtable[e3] = 0;
          this.isNested = true, this.object_start = this.offset();
        }, r2.Builder.prototype.endObject = function() {
          if (this.vtable == null || !this.isNested)
            throw new Error("FlatBuffers: endObject called without startObject");
          this.addInt32(0);
          for (var t3 = this.offset(), e3 = this.vtable_in_use - 1; e3 >= 0 && this.vtable[e3] == 0; e3--)
            ;
          for (var n3 = e3 + 1; e3 >= 0; e3--)
            this.addInt16(this.vtable[e3] != 0 ? t3 - this.vtable[e3] : 0);
          this.addInt16(t3 - this.object_start);
          var i2 = (n3 + 2) * r2.SIZEOF_SHORT;
          this.addInt16(i2);
          var o2 = 0, a2 = this.space;
          t:
            for (e3 = 0; e3 < this.vtables.length; e3++) {
              var s2 = this.bb.capacity() - this.vtables[e3];
              if (i2 == this.bb.readInt16(s2)) {
                for (var u2 = r2.SIZEOF_SHORT; u2 < i2; u2 += r2.SIZEOF_SHORT)
                  if (this.bb.readInt16(a2 + u2) != this.bb.readInt16(s2 + u2))
                    continue t;
                o2 = this.vtables[e3];
                break;
              }
            }
          return o2 ? (this.space = this.bb.capacity() - t3, this.bb.writeInt32(this.space, o2 - t3)) : (this.vtables.push(this.offset()), this.bb.writeInt32(this.bb.capacity() - t3, this.offset() - t3)), this.isNested = false, t3;
        }, r2.Builder.prototype.finish = function(t3, e3, n3) {
          var i2 = n3 ? r2.SIZE_PREFIX_LENGTH : 0;
          if (e3) {
            var o2 = e3;
            if (this.prep(this.minalign, r2.SIZEOF_INT + r2.FILE_IDENTIFIER_LENGTH + i2), o2.length != r2.FILE_IDENTIFIER_LENGTH)
              throw new Error("FlatBuffers: file identifier must be length " + r2.FILE_IDENTIFIER_LENGTH);
            for (var a2 = r2.FILE_IDENTIFIER_LENGTH - 1; a2 >= 0; a2--)
              this.writeInt8(o2.charCodeAt(a2));
          }
          this.prep(this.minalign, r2.SIZEOF_INT + i2), this.addOffset(t3), i2 && this.addInt32(this.bb.capacity() - this.space), this.bb.setPosition(this.space);
        }, r2.Builder.prototype.finishSizePrefixed = function(t3, e3) {
          this.finish(t3, e3, true);
        }, r2.Builder.prototype.requiredField = function(t3, e3) {
          var n3 = this.bb.capacity() - t3, r3 = n3 - this.bb.readInt32(n3);
          if (this.bb.readInt16(r3 + e3) == 0)
            throw new Error("FlatBuffers: field " + e3 + " must be set");
        }, r2.Builder.prototype.startVector = function(t3, e3, n3) {
          this.notNested(), this.vector_num_elems = e3, this.prep(r2.SIZEOF_INT, t3 * e3), this.prep(n3, t3 * e3);
        }, r2.Builder.prototype.endVector = function() {
          return this.writeInt32(this.vector_num_elems), this.offset();
        }, r2.Builder.prototype.createString = function(t3) {
          if (t3 instanceof Uint8Array)
            var e3 = t3;
          else {
            e3 = [];
            for (var n3 = 0; n3 < t3.length; ) {
              var r3, i2 = t3.charCodeAt(n3++);
              (r3 = i2 < 55296 || i2 >= 56320 ? i2 : (i2 << 10) + t3.charCodeAt(n3++) + -56613888) < 128 ? e3.push(r3) : (r3 < 2048 ? e3.push(r3 >> 6 & 31 | 192) : (r3 < 65536 ? e3.push(r3 >> 12 & 15 | 224) : e3.push(r3 >> 18 & 7 | 240, r3 >> 12 & 63 | 128), e3.push(r3 >> 6 & 63 | 128)), e3.push(63 & r3 | 128));
            }
          }
          this.addInt8(0), this.startVector(1, e3.length, 1), this.bb.setPosition(this.space -= e3.length), n3 = 0;
          for (var o2 = this.space, a2 = this.bb.bytes(); n3 < e3.length; n3++)
            a2[o2++] = e3[n3];
          return this.endVector();
        }, r2.Builder.prototype.createLong = function(t3, e3) {
          return r2.Long.create(t3, e3);
        }, r2.ByteBuffer = function(t3) {
          this.bytes_ = t3, this.position_ = 0;
        }, r2.ByteBuffer.allocate = function(t3) {
          return new r2.ByteBuffer(new Uint8Array(t3));
        }, r2.ByteBuffer.prototype.clear = function() {
          this.position_ = 0;
        }, r2.ByteBuffer.prototype.bytes = function() {
          return this.bytes_;
        }, r2.ByteBuffer.prototype.position = function() {
          return this.position_;
        }, r2.ByteBuffer.prototype.setPosition = function(t3) {
          this.position_ = t3;
        }, r2.ByteBuffer.prototype.capacity = function() {
          return this.bytes_.length;
        }, r2.ByteBuffer.prototype.readInt8 = function(t3) {
          return this.readUint8(t3) << 24 >> 24;
        }, r2.ByteBuffer.prototype.readUint8 = function(t3) {
          return this.bytes_[t3];
        }, r2.ByteBuffer.prototype.readInt16 = function(t3) {
          return this.readUint16(t3) << 16 >> 16;
        }, r2.ByteBuffer.prototype.readUint16 = function(t3) {
          return this.bytes_[t3] | this.bytes_[t3 + 1] << 8;
        }, r2.ByteBuffer.prototype.readInt32 = function(t3) {
          return this.bytes_[t3] | this.bytes_[t3 + 1] << 8 | this.bytes_[t3 + 2] << 16 | this.bytes_[t3 + 3] << 24;
        }, r2.ByteBuffer.prototype.readUint32 = function(t3) {
          return this.readInt32(t3) >>> 0;
        }, r2.ByteBuffer.prototype.readInt64 = function(t3) {
          return new r2.Long(this.readInt32(t3), this.readInt32(t3 + 4));
        }, r2.ByteBuffer.prototype.readUint64 = function(t3) {
          return new r2.Long(this.readUint32(t3), this.readUint32(t3 + 4));
        }, r2.ByteBuffer.prototype.readFloat32 = function(t3) {
          return r2.int32[0] = this.readInt32(t3), r2.float32[0];
        }, r2.ByteBuffer.prototype.readFloat64 = function(t3) {
          return r2.int32[r2.isLittleEndian ? 0 : 1] = this.readInt32(t3), r2.int32[r2.isLittleEndian ? 1 : 0] = this.readInt32(t3 + 4), r2.float64[0];
        }, r2.ByteBuffer.prototype.writeInt8 = function(t3, e3) {
          this.bytes_[t3] = e3;
        }, r2.ByteBuffer.prototype.writeUint8 = function(t3, e3) {
          this.bytes_[t3] = e3;
        }, r2.ByteBuffer.prototype.writeInt16 = function(t3, e3) {
          this.bytes_[t3] = e3, this.bytes_[t3 + 1] = e3 >> 8;
        }, r2.ByteBuffer.prototype.writeUint16 = function(t3, e3) {
          this.bytes_[t3] = e3, this.bytes_[t3 + 1] = e3 >> 8;
        }, r2.ByteBuffer.prototype.writeInt32 = function(t3, e3) {
          this.bytes_[t3] = e3, this.bytes_[t3 + 1] = e3 >> 8, this.bytes_[t3 + 2] = e3 >> 16, this.bytes_[t3 + 3] = e3 >> 24;
        }, r2.ByteBuffer.prototype.writeUint32 = function(t3, e3) {
          this.bytes_[t3] = e3, this.bytes_[t3 + 1] = e3 >> 8, this.bytes_[t3 + 2] = e3 >> 16, this.bytes_[t3 + 3] = e3 >> 24;
        }, r2.ByteBuffer.prototype.writeInt64 = function(t3, e3) {
          this.writeInt32(t3, e3.low), this.writeInt32(t3 + 4, e3.high);
        }, r2.ByteBuffer.prototype.writeUint64 = function(t3, e3) {
          this.writeUint32(t3, e3.low), this.writeUint32(t3 + 4, e3.high);
        }, r2.ByteBuffer.prototype.writeFloat32 = function(t3, e3) {
          r2.float32[0] = e3, this.writeInt32(t3, r2.int32[0]);
        }, r2.ByteBuffer.prototype.writeFloat64 = function(t3, e3) {
          r2.float64[0] = e3, this.writeInt32(t3, r2.int32[r2.isLittleEndian ? 0 : 1]), this.writeInt32(t3 + 4, r2.int32[r2.isLittleEndian ? 1 : 0]);
        }, r2.ByteBuffer.prototype.getBufferIdentifier = function() {
          if (this.bytes_.length < this.position_ + r2.SIZEOF_INT + r2.FILE_IDENTIFIER_LENGTH)
            throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");
          for (var t3 = "", e3 = 0; e3 < r2.FILE_IDENTIFIER_LENGTH; e3++)
            t3 += String.fromCharCode(this.readInt8(this.position_ + r2.SIZEOF_INT + e3));
          return t3;
        }, r2.ByteBuffer.prototype.__offset = function(t3, e3) {
          var n3 = t3 - this.readInt32(t3);
          return e3 < this.readInt16(n3) ? this.readInt16(n3 + e3) : 0;
        }, r2.ByteBuffer.prototype.__union = function(t3, e3) {
          return t3.bb_pos = e3 + this.readInt32(e3), t3.bb = this, t3;
        }, r2.ByteBuffer.prototype.__string = function(t3, e3) {
          t3 += this.readInt32(t3);
          var n3 = this.readInt32(t3), i2 = "", o2 = 0;
          if (t3 += r2.SIZEOF_INT, e3 === r2.Encoding.UTF8_BYTES)
            return this.bytes_.subarray(t3, t3 + n3);
          for (; o2 < n3; ) {
            var a2, s2 = this.readUint8(t3 + o2++);
            if (s2 < 192)
              a2 = s2;
            else {
              var u2 = this.readUint8(t3 + o2++);
              if (s2 < 224)
                a2 = (31 & s2) << 6 | 63 & u2;
              else {
                var c2 = this.readUint8(t3 + o2++);
                a2 = s2 < 240 ? (15 & s2) << 12 | (63 & u2) << 6 | 63 & c2 : (7 & s2) << 18 | (63 & u2) << 12 | (63 & c2) << 6 | 63 & this.readUint8(t3 + o2++);
              }
            }
            a2 < 65536 ? i2 += String.fromCharCode(a2) : (a2 -= 65536, i2 += String.fromCharCode(55296 + (a2 >> 10), 56320 + (1023 & a2)));
          }
          return i2;
        }, r2.ByteBuffer.prototype.__indirect = function(t3) {
          return t3 + this.readInt32(t3);
        }, r2.ByteBuffer.prototype.__vector = function(t3) {
          return t3 + this.readInt32(t3) + r2.SIZEOF_INT;
        }, r2.ByteBuffer.prototype.__vector_len = function(t3) {
          return this.readInt32(t3 + this.readInt32(t3));
        }, r2.ByteBuffer.prototype.__has_identifier = function(t3) {
          if (t3.length != r2.FILE_IDENTIFIER_LENGTH)
            throw new Error("FlatBuffers: file identifier must be length " + r2.FILE_IDENTIFIER_LENGTH);
          for (var e3 = 0; e3 < r2.FILE_IDENTIFIER_LENGTH; e3++)
            if (t3.charCodeAt(e3) != this.readInt8(this.position_ + r2.SIZEOF_INT + e3))
              return false;
          return true;
        }, r2.ByteBuffer.prototype.createLong = function(t3, e3) {
          return r2.Long.create(t3, e3);
        };
      }}, __webpack_module_cache__ = {};
      function __webpack_require__(t2) {
        var e2 = __webpack_module_cache__[t2];
        if (e2 !== void 0)
          return e2.exports;
        var n2 = __webpack_module_cache__[t2] = {exports: {}};
        return __webpack_modules__[t2].call(n2.exports, n2, n2.exports, __webpack_require__), n2.exports;
      }
      __webpack_require__.n = (t2) => {
        var e2 = t2 && t2.__esModule ? () => t2.default : () => t2;
        return __webpack_require__.d(e2, {a: e2}), e2;
      }, __webpack_require__.d = (t2, e2) => {
        for (var n2 in e2)
          __webpack_require__.o(e2, n2) && !__webpack_require__.o(t2, n2) && Object.defineProperty(t2, n2, {enumerable: true, get: e2[n2]});
      }, __webpack_require__.g = function() {
        if (typeof globalThis == "object")
          return globalThis;
        try {
          return this || new Function("return this")();
        } catch (t2) {
          if (typeof window == "object")
            return window;
        }
      }(), __webpack_require__.o = (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), __webpack_require__.r = (t2) => {
        typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, {value: "Module"}), Object.defineProperty(t2, "__esModule", {value: true});
      };
      var __webpack_exports__ = __webpack_require__(6018);
      return __webpack_exports__;
    })());
  });

  // node_modules/base64-js/index.js
  var require_base64_js = __commonJS((exports2) => {
    "use strict";
    exports2.byteLength = byteLength;
    exports2.toByteArray = toByteArray;
    exports2.fromByteArray = fromByteArray2;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (var i2 = 0, len = code.length; i2 < len; ++i2) {
      lookup[i2] = code[i2];
      revLookup[code.charCodeAt(i2)] = i2;
    }
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i3;
      for (i3 = 0; i3 < len2; i3 += 4) {
        tmp = revLookup[b64.charCodeAt(i3)] << 18 | revLookup[b64.charCodeAt(i3 + 1)] << 12 | revLookup[b64.charCodeAt(i3 + 2)] << 6 | revLookup[b64.charCodeAt(i3 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i3)] << 2 | revLookup[b64.charCodeAt(i3 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i3)] << 10 | revLookup[b64.charCodeAt(i3 + 1)] << 4 | revLookup[b64.charCodeAt(i3 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i3 = start; i3 < end; i3 += 3) {
        tmp = (uint8[i3] << 16 & 16711680) + (uint8[i3 + 1] << 8 & 65280) + (uint8[i3 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray2(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i3 = 0, len22 = len2 - extraBytes; i3 < len22; i3 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len22 ? len22 : i3 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
      }
      return parts.join("");
    }
  });

  // node_modules/react-webcam/dist/react-webcam.js
  var require_react_webcam = __commonJS((exports2, module2) => {
    (function webpackUniversalModuleDefinition(root2, factory) {
      if (typeof exports2 === "object" && typeof module2 === "object")
        module2.exports = factory(require_react());
      else if (typeof define === "function" && define.amd)
        define(["react"], factory);
      else if (typeof exports2 === "object")
        exports2["Webcam"] = factory(require_react());
      else
        root2["Webcam"] = factory(root2["React"]);
    })(exports2, function(__WEBPACK_EXTERNAL_MODULE_react__) {
      return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module3 = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
          };
          modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
          module3.l = true;
          return module3.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.d = function(exports3, name2, getter) {
          if (!__webpack_require__.o(exports3, name2)) {
            Object.defineProperty(exports3, name2, {enumerable: true, get: getter});
          }
        };
        __webpack_require__.r = function(exports3) {
          if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
            Object.defineProperty(exports3, Symbol.toStringTag, {value: "Module"});
          }
          Object.defineProperty(exports3, "__esModule", {value: true});
        };
        __webpack_require__.t = function(value, mode) {
          if (mode & 1)
            value = __webpack_require__(value);
          if (mode & 8)
            return value;
          if (mode & 4 && typeof value === "object" && value && value.__esModule)
            return value;
          var ns = Object.create(null);
          __webpack_require__.r(ns);
          Object.defineProperty(ns, "default", {enumerable: true, value});
          if (mode & 2 && typeof value != "string")
            for (var key in value)
              __webpack_require__.d(ns, key, function(key2) {
                return value[key2];
              }.bind(null, key));
          return ns;
        };
        __webpack_require__.n = function(module3) {
          var getter = module3 && module3.__esModule ? function getDefault() {
            return module3["default"];
          } : function getModuleExports() {
            return module3;
          };
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = "./src/react-webcam.tsx");
      }({
        "./src/react-webcam.tsx": function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.r(__webpack_exports__);
          var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("react");
          var react__WEBPACK_IMPORTED_MODULE_0___default = /* @__PURE__ */ __webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
          var __extends = function() {
            var extendStatics = function(d2, b2) {
              extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d3, b3) {
                d3.__proto__ = b3;
              } || function(d3, b3) {
                for (var p in b3)
                  if (b3.hasOwnProperty(p))
                    d3[p] = b3[p];
              };
              return extendStatics(d2, b2);
            };
            return function(d2, b2) {
              extendStatics(d2, b2);
              function __() {
                this.constructor = d2;
              }
              d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
            };
          }();
          var __assign = function() {
            __assign = Object.assign || function(t2) {
              for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
                s2 = arguments[i2];
                for (var p in s2)
                  if (Object.prototype.hasOwnProperty.call(s2, p))
                    t2[p] = s2[p];
              }
              return t2;
            };
            return __assign.apply(this, arguments);
          };
          var __rest = function(s2, e2) {
            var t2 = {};
            for (var p in s2)
              if (Object.prototype.hasOwnProperty.call(s2, p) && e2.indexOf(p) < 0)
                t2[p] = s2[p];
            if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
              for (var i2 = 0, p = Object.getOwnPropertySymbols(s2); i2 < p.length; i2++) {
                if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i2]))
                  t2[p[i2]] = s2[p[i2]];
              }
            return t2;
          };
          (function polyfillGetUserMedia() {
            if (typeof window === "undefined") {
              return;
            }
            if (navigator.mediaDevices === void 0) {
              navigator.mediaDevices = {};
            }
            if (navigator.mediaDevices.getUserMedia === void 0) {
              navigator.mediaDevices.getUserMedia = function(constraints) {
                var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
                if (!getUserMedia) {
                  return Promise.reject(new Error("getUserMedia is not implemented in this browser"));
                }
                return new Promise(function(resolve, reject) {
                  getUserMedia.call(navigator, constraints, resolve, reject);
                });
              };
            }
          })();
          function hasGetUserMedia() {
            return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);
          }
          var Webcam2 = function(_super) {
            __extends(Webcam3, _super);
            function Webcam3(props) {
              var _this = _super.call(this, props) || this;
              _this.canvas = null;
              _this.ctx = null;
              _this.requestUserMediaId = 0;
              _this.unmounted = false;
              _this.state = {
                hasUserMedia: false
              };
              return _this;
            }
            Webcam3.prototype.componentDidMount = function() {
              var _a = this, state = _a.state, props = _a.props;
              this.unmounted = false;
              if (!hasGetUserMedia()) {
                props.onUserMediaError("getUserMedia not supported");
                return;
              }
              if (!state.hasUserMedia) {
                this.requestUserMedia();
              }
              if (props.children && typeof props.children != "function") {
                console.warn("children must be a function");
              }
            };
            Webcam3.prototype.componentDidUpdate = function(nextProps) {
              var props = this.props;
              if (!hasGetUserMedia()) {
                props.onUserMediaError("getUserMedia not supported");
                return;
              }
              var audioConstraintsChanged = JSON.stringify(nextProps.audioConstraints) !== JSON.stringify(props.audioConstraints);
              var videoConstraintsChanged = JSON.stringify(nextProps.videoConstraints) !== JSON.stringify(props.videoConstraints);
              var minScreenshotWidthChanged = nextProps.minScreenshotWidth !== props.minScreenshotWidth;
              var minScreenshotHeightChanged = nextProps.minScreenshotHeight !== props.minScreenshotHeight;
              if (videoConstraintsChanged || minScreenshotWidthChanged || minScreenshotHeightChanged) {
                this.canvas = null;
                this.ctx = null;
              }
              if (audioConstraintsChanged || videoConstraintsChanged) {
                this.stopAndCleanup();
                this.requestUserMedia();
              }
            };
            Webcam3.prototype.componentWillUnmount = function() {
              this.unmounted = true;
              this.stopAndCleanup();
            };
            Webcam3.stopMediaStream = function(stream) {
              if (stream) {
                if (stream.getVideoTracks && stream.getAudioTracks) {
                  stream.getVideoTracks().map(function(track) {
                    stream.removeTrack(track);
                    track.stop();
                  });
                  stream.getAudioTracks().map(function(track) {
                    stream.removeTrack(track);
                    track.stop();
                  });
                } else {
                  stream.stop();
                }
              }
            };
            Webcam3.prototype.stopAndCleanup = function() {
              var state = this.state;
              if (state.hasUserMedia) {
                Webcam3.stopMediaStream(this.stream);
                if (state.src) {
                  window.URL.revokeObjectURL(state.src);
                }
              }
            };
            Webcam3.prototype.getScreenshot = function(screenshotDimensions) {
              var _a = this, state = _a.state, props = _a.props;
              if (!state.hasUserMedia)
                return null;
              var canvas = this.getCanvas(screenshotDimensions);
              return canvas && canvas.toDataURL(props.screenshotFormat, props.screenshotQuality);
            };
            Webcam3.prototype.getCanvas = function(screenshotDimensions) {
              var _a = this, state = _a.state, props = _a.props;
              if (!this.video) {
                return null;
              }
              if (!state.hasUserMedia || !this.video.videoHeight)
                return null;
              if (!this.ctx) {
                var canvasWidth = this.video.videoWidth;
                var canvasHeight = this.video.videoHeight;
                if (!this.props.forceScreenshotSourceSize) {
                  var aspectRatio = canvasWidth / canvasHeight;
                  canvasWidth = props.minScreenshotWidth || this.video.clientWidth;
                  canvasHeight = canvasWidth / aspectRatio;
                  if (props.minScreenshotHeight && canvasHeight < props.minScreenshotHeight) {
                    canvasHeight = props.minScreenshotHeight;
                    canvasWidth = canvasHeight * aspectRatio;
                  }
                }
                this.canvas = document.createElement("canvas");
                this.canvas.width = (screenshotDimensions === null || screenshotDimensions === void 0 ? void 0 : screenshotDimensions.width) || canvasWidth;
                this.canvas.height = (screenshotDimensions === null || screenshotDimensions === void 0 ? void 0 : screenshotDimensions.height) || canvasHeight;
                this.ctx = this.canvas.getContext("2d");
              }
              var _b = this, ctx = _b.ctx, canvas = _b.canvas;
              if (ctx && canvas) {
                if (props.mirrored) {
                  ctx.translate(canvas.width, 0);
                  ctx.scale(-1, 1);
                }
                ctx.imageSmoothingEnabled = props.imageSmoothing;
                ctx.drawImage(this.video, 0, 0, (screenshotDimensions === null || screenshotDimensions === void 0 ? void 0 : screenshotDimensions.width) || canvas.width, (screenshotDimensions === null || screenshotDimensions === void 0 ? void 0 : screenshotDimensions.height) || canvas.height);
                if (props.mirrored) {
                  ctx.scale(-1, 1);
                  ctx.translate(-canvas.width, 0);
                }
              }
              return canvas;
            };
            Webcam3.prototype.requestUserMedia = function() {
              var _this = this;
              var props = this.props;
              var sourceSelected = function(audioConstraints, videoConstraints) {
                var constraints = {
                  video: typeof videoConstraints !== "undefined" ? videoConstraints : true
                };
                if (props.audio) {
                  constraints.audio = typeof audioConstraints !== "undefined" ? audioConstraints : true;
                }
                _this.requestUserMediaId++;
                var myRequestUserMediaId = _this.requestUserMediaId;
                navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {
                  if (_this.unmounted || myRequestUserMediaId !== _this.requestUserMediaId) {
                    Webcam3.stopMediaStream(stream);
                  } else {
                    _this.handleUserMedia(null, stream);
                  }
                }).catch(function(e2) {
                  _this.handleUserMedia(e2);
                });
              };
              if ("mediaDevices" in navigator) {
                sourceSelected(props.audioConstraints, props.videoConstraints);
              } else {
                var optionalSource_1 = function(id) {
                  return {optional: [{sourceId: id}]};
                };
                var constraintToSourceId_1 = function(constraint) {
                  var deviceId = constraint.deviceId;
                  if (typeof deviceId === "string") {
                    return deviceId;
                  }
                  if (Array.isArray(deviceId) && deviceId.length > 0) {
                    return deviceId[0];
                  }
                  if (typeof deviceId === "object" && deviceId.ideal) {
                    return deviceId.ideal;
                  }
                  return null;
                };
                MediaStreamTrack.getSources(function(sources) {
                  var audioSource = null;
                  var videoSource = null;
                  sources.forEach(function(source) {
                    if (source.kind === "audio") {
                      audioSource = source.id;
                    } else if (source.kind === "video") {
                      videoSource = source.id;
                    }
                  });
                  var audioSourceId = constraintToSourceId_1(props.audioConstraints);
                  if (audioSourceId) {
                    audioSource = audioSourceId;
                  }
                  var videoSourceId = constraintToSourceId_1(props.videoConstraints);
                  if (videoSourceId) {
                    videoSource = videoSourceId;
                  }
                  sourceSelected(optionalSource_1(audioSource), optionalSource_1(videoSource));
                });
              }
            };
            Webcam3.prototype.handleUserMedia = function(err, stream) {
              var props = this.props;
              if (err || !stream) {
                this.setState({hasUserMedia: false});
                props.onUserMediaError(err);
                return;
              }
              this.stream = stream;
              try {
                if (this.video) {
                  this.video.srcObject = stream;
                }
                this.setState({hasUserMedia: true});
              } catch (error) {
                this.setState({
                  hasUserMedia: true,
                  src: window.URL.createObjectURL(stream)
                });
              }
              props.onUserMedia(stream);
            };
            Webcam3.prototype.render = function() {
              var _this = this;
              var _a = this, state = _a.state, props = _a.props;
              var audio = props.audio, forceScreenshotSourceSize = props.forceScreenshotSourceSize, onUserMedia = props.onUserMedia, onUserMediaError = props.onUserMediaError, screenshotFormat = props.screenshotFormat, screenshotQuality = props.screenshotQuality, minScreenshotWidth = props.minScreenshotWidth, minScreenshotHeight = props.minScreenshotHeight, audioConstraints = props.audioConstraints, videoConstraints = props.videoConstraints, imageSmoothing = props.imageSmoothing, mirrored = props.mirrored, _b = props.style, style = _b === void 0 ? {} : _b, children = props.children, rest = __rest(props, ["audio", "forceScreenshotSourceSize", "onUserMedia", "onUserMediaError", "screenshotFormat", "screenshotQuality", "minScreenshotWidth", "minScreenshotHeight", "audioConstraints", "videoConstraints", "imageSmoothing", "mirrored", "style", "children"]);
              var videoStyle = mirrored ? __assign(__assign({}, style), {transform: (style.transform || "") + " scaleX(-1)"}) : style;
              var childrenProps = {
                getScreenshot: this.getScreenshot.bind(this)
              };
              return react__WEBPACK_IMPORTED_MODULE_0__["createElement"](react__WEBPACK_IMPORTED_MODULE_0__["Fragment"], null, react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("video", __assign({autoPlay: true, src: state.src, muted: !audio, playsInline: true, ref: function(ref) {
                _this.video = ref;
              }, style: videoStyle}, rest)), children && children(childrenProps));
            };
            Webcam3.defaultProps = {
              audio: false,
              forceScreenshotSourceSize: false,
              imageSmoothing: true,
              mirrored: false,
              onUserMedia: function() {
                return void 0;
              },
              onUserMediaError: function() {
                return void 0;
              },
              screenshotFormat: "image/webp",
              screenshotQuality: 0.92
            };
            return Webcam3;
          }(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);
          __webpack_exports__["default"] = Webcam2;
        },
        react: function(module3, exports3) {
          module3.exports = __WEBPACK_EXTERNAL_MODULE_react__;
        }
      })["default"];
    });
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS((exports2) => {
    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports2.AsyncMode = AsyncMode;
        exports2.ConcurrentMode = ConcurrentMode;
        exports2.ContextConsumer = ContextConsumer;
        exports2.ContextProvider = ContextProvider;
        exports2.Element = Element;
        exports2.ForwardRef = ForwardRef;
        exports2.Fragment = Fragment;
        exports2.Lazy = Lazy;
        exports2.Memo = Memo;
        exports2.Portal = Portal;
        exports2.Profiler = Profiler;
        exports2.StrictMode = StrictMode;
        exports2.Suspense = Suspense;
        exports2.isAsyncMode = isAsyncMode;
        exports2.isConcurrentMode = isConcurrentMode;
        exports2.isContextConsumer = isContextConsumer;
        exports2.isContextProvider = isContextProvider;
        exports2.isElement = isElement;
        exports2.isForwardRef = isForwardRef;
        exports2.isFragment = isFragment;
        exports2.isLazy = isLazy;
        exports2.isMemo = isMemo;
        exports2.isPortal = isPortal;
        exports2.isProfiler = isProfiler;
        exports2.isStrictMode = isStrictMode;
        exports2.isSuspense = isSuspense;
        exports2.isValidElementType = isValidElementType;
        exports2.typeOf = typeOf;
      })();
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS((exports2, module2) => {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_is_development();
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS((exports2, module2) => {
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i2 = 0; i2 < 10; i2++) {
          test2["_" + String.fromCharCode(i2)] = i2;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s2 = 1; s2 < arguments.length; s2++) {
        from = Object(arguments[s2]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            if (propIsEnumerable.call(from, symbols[i2])) {
              to[symbols[i2]] = from[symbols[i2]];
            }
          }
        }
      }
      return to;
    };
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS((exports2, module2) => {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module2.exports = ReactPropTypesSecret;
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS((exports2, module2) => {
    module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS((exports2, module2) => {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module2.exports = checkPropTypes;
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS((exports2, module2) => {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module2.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), {expectedType});
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS((exports2, module2) => {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module2.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  });

  // node_modules/shallowequal/index.js
  var require_shallowequal = __commonJS((exports2, module2) => {
    module2.exports = function shallowEqual(objA, objB, compare, compareContext) {
      var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
      if (ret !== void 0) {
        return !!ret;
      }
      if (objA === objB) {
        return true;
      }
      if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
      for (var idx = 0; idx < keysA.length; idx++) {
        var key = keysA[idx];
        if (!bHasOwnProperty(key)) {
          return false;
        }
        var valueA = objA[key];
        var valueB = objB[key];
        ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
        if (ret === false || ret === void 0 && valueA !== valueB) {
          return false;
        }
      }
      return true;
    };
  });

  // node_modules/@emotion/memoize/dist/emotion-memoize.cjs.dev.js
  var require_emotion_memoize_cjs_dev = __commonJS((exports2) => {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    function memoize(fn) {
      var cache = Object.create(null);
      return function(arg) {
        if (cache[arg] === void 0)
          cache[arg] = fn(arg);
        return cache[arg];
      };
    }
    exports2["default"] = memoize;
  });

  // node_modules/@emotion/memoize/dist/emotion-memoize.cjs.js
  var require_emotion_memoize_cjs = __commonJS((exports2, module2) => {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_emotion_memoize_cjs_dev();
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.dev.js
  var require_emotion_is_prop_valid_cjs_dev = __commonJS((exports2) => {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {value: true});
    var memoize = require_emotion_memoize_cjs();
    function _interopDefault(e2) {
      return e2 && e2.__esModule ? e2 : {default: e2};
    }
    var memoize__default = /* @__PURE__ */ _interopDefault(memoize);
    var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    var isPropValid = /* @__PURE__ */ memoize__default["default"](function(prop) {
      return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
    });
    exports2["default"] = isPropValid;
  });

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.js
  var require_emotion_is_prop_valid_cjs = __commonJS((exports2, module2) => {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_emotion_is_prop_valid_cjs_dev();
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.default.js
  var require_emotion_is_prop_valid_cjs_default = __commonJS((exports2) => {
    exports2._default = require_emotion_is_prop_valid_cjs().default;
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS((exports2, module2) => {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      $$typeof: true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      $$typeof: true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i2 = 0; i2 < keys.length; ++i2) {
          var key = keys[i2];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e2) {
            }
          }
        }
      }
      return targetComponent;
    }
    module2.exports = hoistNonReactStatics;
  });

  // src/index.js
  var import_react3 = __toModule(require_react());
  var import_client = __toModule(require_client());

  // wasm-binary:/Users/gfodor/dopple/snapper/src/vtracer/vtracer_webapp_bg.wasm
  var vtracer_webapp_bg_default = __toBinary("");

  // src/vtracer/vtracer_webapp.js
  var import_meta = {};
  var wasm;
  var heap = new Array(128).fill(void 0);
  heap.push(void 0, null, true, false);
  function getObject(idx) {
    return heap[idx];
  }
  var heap_next = heap.length;
  function dropObject(idx) {
    if (idx < 132)
      return;
    heap[idx] = heap_next;
    heap_next = idx;
  }
  function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
  }
  var cachedTextDecoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-8", {ignoreBOM: true, fatal: true}) : {decode: () => {
    throw Error("TextDecoder not available");
  }};
  if (typeof TextDecoder !== "undefined") {
    cachedTextDecoder.decode();
  }
  var cachedUint8Memory0 = null;
  function getUint8Memory0() {
    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {
      cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachedUint8Memory0;
  }
  function getStringFromWasm0(ptr, len) {
    ptr = ptr >>> 0;
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
  }
  function addHeapObject(obj) {
    if (heap_next === heap.length)
      heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];
    heap[idx] = obj;
    return idx;
  }
  function debugString(val) {
    const type = typeof val;
    if (type == "number" || type == "boolean" || val == null) {
      return `${val}`;
    }
    if (type == "string") {
      return `"${val}"`;
    }
    if (type == "symbol") {
      const description = val.description;
      if (description == null) {
        return "Symbol";
      } else {
        return `Symbol(${description})`;
      }
    }
    if (type == "function") {
      const name2 = val.name;
      if (typeof name2 === "string" && name2.length > 0) {
        return `Function(${name2})`;
      } else {
        return "Function";
      }
    }
    if (Array.isArray(val)) {
      const length = val.length;
      let debug = "[";
      if (length > 0) {
        debug += debugString(val[0]);
      }
      for (let i2 = 1; i2 < length; i2++) {
        debug += ", " + debugString(val[i2]);
      }
      debug += "]";
      return debug;
    }
    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
    let className;
    if (builtInMatches.length > 1) {
      className = builtInMatches[1];
    } else {
      return toString.call(val);
    }
    if (className == "Object") {
      try {
        return "Object(" + JSON.stringify(val) + ")";
      } catch (_2) {
        return "Object";
      }
    }
    if (val instanceof Error) {
      return `${val.name}: ${val.message}
${val.stack}`;
    }
    return className;
  }
  var WASM_VECTOR_LEN = 0;
  var cachedTextEncoder = typeof TextEncoder !== "undefined" ? new TextEncoder("utf-8") : {encode: () => {
    throw Error("TextEncoder not available");
  }};
  var encodeString = typeof cachedTextEncoder.encodeInto === "function" ? function(arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
  } : function(arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
      read: arg.length,
      written: buf.length
    };
  };
  function passStringToWasm0(arg, malloc, realloc) {
    if (realloc === void 0) {
      const buf = cachedTextEncoder.encode(arg);
      const ptr2 = malloc(buf.length) >>> 0;
      getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);
      WASM_VECTOR_LEN = buf.length;
      return ptr2;
    }
    let len = arg.length;
    let ptr = malloc(len) >>> 0;
    const mem = getUint8Memory0();
    let offset = 0;
    for (; offset < len; offset++) {
      const code = arg.charCodeAt(offset);
      if (code > 127)
        break;
      mem[ptr + offset] = code;
    }
    if (offset !== len) {
      if (offset !== 0) {
        arg = arg.slice(offset);
      }
      ptr = realloc(ptr, len, len = offset + arg.length * 3) >>> 0;
      const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
      const ret = encodeString(arg, view);
      offset += ret.written;
    }
    WASM_VECTOR_LEN = offset;
    return ptr;
  }
  var cachedInt32Memory0 = null;
  function getInt32Memory0() {
    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {
      cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachedInt32Memory0;
  }
  function isLikeNone(x2) {
    return x2 === void 0 || x2 === null;
  }
  function handleError(f, args) {
    try {
      return f.apply(this, args);
    } catch (e2) {
      wasm.__wbindgen_exn_store(addHeapObject(e2));
    }
  }
  function passArray8ToWasm0(arg, malloc) {
    const ptr = malloc(arg.length * 1) >>> 0;
    getUint8Memory0().set(arg, ptr / 1);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
  }
  var BinaryImageConverter = class {
    static __wrap(ptr) {
      ptr = ptr >>> 0;
      const obj = Object.create(BinaryImageConverter.prototype);
      obj.__wbg_ptr = ptr;
      return obj;
    }
    __destroy_into_raw() {
      const ptr = this.__wbg_ptr;
      this.__wbg_ptr = 0;
      return ptr;
    }
    free() {
      const ptr = this.__destroy_into_raw();
      wasm.__wbg_binaryimageconverter_free(ptr);
    }
    static new_with_string(params) {
      const ptr0 = passStringToWasm0(params, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
      const len0 = WASM_VECTOR_LEN;
      const ret = wasm.binaryimageconverter_new_with_string(ptr0, len0);
      return BinaryImageConverter.__wrap(ret);
    }
    init() {
      wasm.binaryimageconverter_init(this.__wbg_ptr);
    }
    tick() {
      const ret = wasm.binaryimageconverter_tick(this.__wbg_ptr);
      return ret !== 0;
    }
    progress() {
      const ret = wasm.binaryimageconverter_progress(this.__wbg_ptr);
      return ret >>> 0;
    }
  };
  async function __wbg_load(module2, imports) {
    if (typeof Response === "function" && module2 instanceof Response) {
      if (typeof WebAssembly.instantiateStreaming === "function") {
        try {
          return await WebAssembly.instantiateStreaming(module2, imports);
        } catch (e2) {
          if (module2.headers.get("Content-Type") != "application/wasm") {
            console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e2);
          } else {
            throw e2;
          }
        }
      }
      const bytes = await module2.arrayBuffer();
      return await WebAssembly.instantiate(bytes, imports);
    } else {
      const instance = await WebAssembly.instantiate(module2, imports);
      if (instance instanceof WebAssembly.Instance) {
        return {instance, module: module2};
      } else {
        return instance;
      }
    }
  }
  function __wbg_get_imports() {
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {
      takeObject(arg0);
    };
    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
      const ret = getStringFromWasm0(arg0, arg1);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_abda76e883ba8a5f = function() {
      const ret = new Error();
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_stack_658279fe44541cf6 = function(arg0, arg1) {
      const ret = getObject(arg1).stack;
      const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
      const len1 = WASM_VECTOR_LEN;
      getInt32Memory0()[arg0 / 4 + 1] = len1;
      getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbg_error_f851667af71bcfc6 = function(arg0, arg1) {
      let deferred0_0;
      let deferred0_1;
      try {
        deferred0_0 = arg0;
        deferred0_1 = arg1;
        console.error(getStringFromWasm0(arg0, arg1));
      } finally {
        wasm.__wbindgen_free(deferred0_0, deferred0_1);
      }
    };
    imports.wbg.__wbg_instanceof_Window_f2bf9e8e91f1be0d = function(arg0) {
      let result;
      try {
        result = getObject(arg0) instanceof Window;
      } catch {
        result = false;
      }
      const ret = result;
      return ret;
    };
    imports.wbg.__wbg_document_a11e2f345af07033 = function(arg0) {
      const ret = getObject(arg0).document;
      return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_createElementNS_119bddb989bf0a0f = function() {
      return handleError(function(arg0, arg1, arg2, arg3, arg4) {
        const ret = getObject(arg0).createElementNS(arg1 === 0 ? void 0 : getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_getElementById_0d9e5885e90e4f2a = function(arg0, arg1, arg2) {
      const ret = getObject(arg0).getElementById(getStringFromWasm0(arg1, arg2));
      return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_setAttribute_e8e8474a029723cb = function() {
      return handleError(function(arg0, arg1, arg2, arg3, arg4) {
        getObject(arg0).setAttribute(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));
      }, arguments);
    };
    imports.wbg.__wbg_prepend_2e14efb04ac03d2a = function() {
      return handleError(function(arg0, arg1) {
        getObject(arg0).prepend(getObject(arg1));
      }, arguments);
    };
    imports.wbg.__wbg_debug_8961d2dcbdc2c350 = function(arg0, arg1, arg2, arg3) {
      console.debug(getObject(arg0), getObject(arg1), getObject(arg2), getObject(arg3));
    };
    imports.wbg.__wbg_error_0347757e88b0efb2 = function(arg0, arg1, arg2, arg3) {
      console.error(getObject(arg0), getObject(arg1), getObject(arg2), getObject(arg3));
    };
    imports.wbg.__wbg_info_4aebb6216c4c50ec = function(arg0, arg1, arg2, arg3) {
    };
    imports.wbg.__wbg_log_003c998d6df63565 = function(arg0) {
    };
    imports.wbg.__wbg_log_2bdd41ccb72aa6fe = function(arg0, arg1, arg2, arg3) {
    };
    imports.wbg.__wbg_warn_b765eef7350caee1 = function(arg0, arg1, arg2, arg3) {
      console.warn(getObject(arg0), getObject(arg1), getObject(arg2), getObject(arg3));
    };
    imports.wbg.__wbg_instanceof_CanvasRenderingContext2d_b4050f3a451ac712 = function(arg0) {
      let result;
      try {
        result = getObject(arg0) instanceof CanvasRenderingContext2D;
      } catch {
        result = false;
      }
      const ret = result;
      return ret;
    };
    imports.wbg.__wbg_getImageData_956c421f9b7cdfe7 = function() {
      return handleError(function(arg0, arg1, arg2, arg3, arg4) {
        const ret = getObject(arg0).getImageData(arg1, arg2, arg3, arg4);
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_instanceof_HtmlCanvasElement_6e58598b4e8b1586 = function(arg0) {
      let result;
      try {
        result = getObject(arg0) instanceof HTMLCanvasElement;
      } catch {
        result = false;
      }
      const ret = result;
      return ret;
    };
    imports.wbg.__wbg_width_3a395887a577233b = function(arg0) {
      const ret = getObject(arg0).width;
      return ret;
    };
    imports.wbg.__wbg_height_b7046017c4148386 = function(arg0) {
      const ret = getObject(arg0).height;
      return ret;
    };
    imports.wbg.__wbg_getContext_62ccb1aa0e6c8b86 = function() {
      return handleError(function(arg0, arg1, arg2) {
        const ret = getObject(arg0).getContext(getStringFromWasm0(arg1, arg2));
        return isLikeNone(ret) ? 0 : addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_data_f319d3380b214a26 = function(arg0, arg1) {
      const ret = getObject(arg1).data;
      const ptr1 = passArray8ToWasm0(ret, wasm.__wbindgen_malloc);
      const len1 = WASM_VECTOR_LEN;
      getInt32Memory0()[arg0 / 4 + 1] = len1;
      getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbg_newnoargs_e643855c6572a4a8 = function(arg0, arg1) {
      const ret = new Function(getStringFromWasm0(arg0, arg1));
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_call_f96b398515635514 = function() {
      return handleError(function(arg0, arg1) {
        const ret = getObject(arg0).call(getObject(arg1));
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {
      const ret = getObject(arg0);
      return addHeapObject(ret);
    };
    imports.wbg.__wbg_self_b9aad7f1c618bfaf = function() {
      return handleError(function() {
        const ret = self.self;
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_window_55e469842c98b086 = function() {
      return handleError(function() {
        const ret = window.window;
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_globalThis_d0957e302752547e = function() {
      return handleError(function() {
        const ret = globalThis.globalThis;
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbg_global_ae2f87312b8987fb = function() {
      return handleError(function() {
        const ret = global.global;
        return addHeapObject(ret);
      }, arguments);
    };
    imports.wbg.__wbindgen_is_undefined = function(arg0) {
      const ret = getObject(arg0) === void 0;
      return ret;
    };
    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {
      const ret = debugString(getObject(arg1));
      const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
      const len1 = WASM_VECTOR_LEN;
      getInt32Memory0()[arg0 / 4 + 1] = len1;
      getInt32Memory0()[arg0 / 4 + 0] = ptr1;
    };
    imports.wbg.__wbindgen_throw = function(arg0, arg1) {
      throw new Error(getStringFromWasm0(arg0, arg1));
    };
    return imports;
  }
  function __wbg_init_memory(imports, maybe_memory) {
  }
  function __wbg_finalize_init(instance, module2) {
    wasm = instance.exports;
    __wbg_init.__wbindgen_wasm_module = module2;
    cachedInt32Memory0 = null;
    cachedUint8Memory0 = null;
    wasm.__wbindgen_start();
    return wasm;
  }
  async function __wbg_init(input) {
    if (wasm !== void 0)
      return wasm;
    if (typeof input === "undefined") {
      input = new URL("vtracer_webapp_bg.wasm", import_meta.url);
    }
    const imports = __wbg_get_imports();
    if (typeof input === "string" || typeof Request === "function" && input instanceof Request || typeof URL === "function" && input instanceof URL) {
      input = fetch(input);
    }
    __wbg_init_memory(imports);
    const {instance, module: module2} = await __wbg_load(await input, imports);
    return __wbg_finalize_init(instance, module2);
  }
  var vtracer_webapp_default = __wbg_init;

  // src/image_helpers.js
  var vtraceReady = false;
  vtracer_webapp_default(vtracer_webapp_bg_default).then(() => {
    vtraceReady = true;
  });
  function floodMask(mask, width, height) {
    const visited = new Array(width * height).fill(false);
    function isValid(x2, y2) {
      return x2 >= 0 && x2 < width && y2 >= 0 && y2 < height;
    }
    function bfs(x2, y2) {
      const queue = [{x: x2, y: y2}];
      const region = new Set();
      while (queue.length > 0) {
        const {x: x3, y: y3} = queue.shift();
        const index = y3 * width + x3;
        if (!isValid(x3, y3) || visited[index] || mask[index] <= 0.5)
          continue;
        visited[index] = true;
        region.add(index);
        for (const [dx, dy] of [
          [0, 1],
          [0, -1],
          [1, 0],
          [-1, 0]
        ]) {
          queue.push({x: x3 + dx, y: y3 + dy});
        }
      }
      return region;
    }
    const centerX = Math.floor(width / 2);
    const centerY = Math.floor(height / 2);
    const centerIndex = centerY * width + centerX;
    if (mask[centerIndex] <= 0.5) {
      console.error("Center pixel is not in the mask.", centerIndex, mask[centerIndex]);
      return;
    }
    const largestRegion = bfs(centerX, centerY);
    for (let i2 = 0; i2 < mask.length; i2++) {
      mask[i2] = largestRegion.has(i2) ? mask[i2] : 0;
    }
  }
  async function vectorizeBWImage(imageUrl, smoother = false) {
    while (!vtraceReady) {
      await new Promise((resolve) => setTimeout(resolve, 100));
    }
    const vtraceCanvas = document.createElement("canvas");
    vtraceCanvas.style.display = "none";
    vtraceCanvas.id = "vtraceimage";
    const vtraceSvg = document.createElement("svg");
    vtraceSvg.id = "vtracesvg";
    vtraceSvg.style.display = "none";
    document.body.appendChild(vtraceCanvas);
    document.body.appendChild(vtraceSvg);
    const image = new Image();
    image.src = imageUrl;
    await new Promise((resolve) => {
      image.onload = () => {
        vtraceCanvas.width = image.width;
        vtraceCanvas.height = image.height;
        vtraceSvg.setAttribute("viewBox", `0 0 ${image.width} ${image.height}`);
        const ctx = vtraceCanvas.getContext("2d");
        ctx.drawImage(image, 0, 0);
        resolve();
      };
    });
    const vtrace = BinaryImageConverter.new_with_string(JSON.stringify({
      canvas_id: "vtraceimage",
      svg_id: "vtracesvg",
      mode: "spline",
      clustering_mode: "binary",
      hierarchical: "cutout",
      corner_threshold: smoother ? 3.14 : 1.0646,
      length_threshold: 3.5,
      max_iterations: 10,
      splice_threshold: smoother ? 3.14 : 1.308,
      filter_speckle: 256,
      color_precision: 2,
      layer_difference: 16,
      path_precision: 8
    }));
    vtrace.init();
    return await new Promise((resolve) => {
      const vtraceInterval = setInterval(function tick() {
        const progress = vtrace.progress();
        vtrace.tick();
        if (progress === 100) {
          clearInterval(vtraceInterval);
          const svg = document.getElementById("vtracesvg").innerHTML;
          vtrace.free();
          vtraceCanvas.remove();
          vtraceSvg.remove();
          resolve(svg);
        }
      }, 1);
    });
  }
  async function applyLUT(image, lut) {
    const imageCanvas = document.createElement("canvas");
    imageCanvas.width = image.naturalWidth;
    imageCanvas.height = image.naturalHeight;
    const lutCanvas = document.createElement("canvas");
    lutCanvas.width = lut.naturalWidth;
    lutCanvas.height = lut.naturalHeight;
    const imageContext = imageCanvas.getContext("2d");
    const lutContext = lutCanvas.getContext("2d");
    imageContext.clearRect(0, 0, image.naturalWidth, image.naturalHeight);
    imageContext.drawImage(image, 0, 0);
    const imageData = imageContext.getImageData(0, 0, image.naturalWidth, image.naturalHeight);
    const iData = imageData.data;
    lutContext.clearRect(0, 0, lut.naturalWidth, lut.naturalHeight);
    lutContext.drawImage(lut, 0, 0);
    const lutData = lutContext.getImageData(0, 0, lut.naturalWidth, lut.naturalHeight);
    const lData = lutData.data;
    for (let i2 = 0, l2 = iData.length; i2 < l2; i2 += 4) {
      const r2 = Math.floor(iData[i2] / 4);
      const g2 = Math.floor(iData[i2 + 1] / 4);
      const b2 = Math.floor(iData[i2 + 2] / 4);
      const lutX = b2 % 8 * 64 + r2;
      const lutY = Math.floor(b2 / 8) * 64 + g2;
      const lutIndex = (lutY * lut.naturalWidth + lutX) * 4;
      const lutR = lData[lutIndex];
      const lutG = lData[lutIndex + 1];
      const lutB = lData[lutIndex + 2];
      imageData.data[i2] = lutR;
      imageData.data[i2 + 1] = lutG;
      imageData.data[i2 + 2] = lutB;
      imageData.data[i2 + 3] = 255;
    }
    imageContext.clearRect(0, 0, image.naturalWidth, image.naturalHeight);
    imageContext.putImageData(imageData, 0, 0);
    const correctedImage = new Image();
    correctedImage.src = imageCanvas.toDataURL();
    await new Promise((resolve) => {
      correctedImage.onload = resolve;
    });
    return correctedImage;
  }
  async function videoToImage(video, width, height) {
    const canvas = document.createElement("canvas");
    canvas.width = width;
    canvas.height = height;
    const ctx = canvas.getContext("2d");
    ctx.imageSmoothingEnabled = true;
    ctx.imageSmoothingQuality = "high";
    ctx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight, 0, 0, width, height);
    const img = new Image();
    await new Promise((resolve) => {
      img.onload = resolve;
      img.src = canvas.toDataURL();
    });
    return img;
  }
  async function dataURLToImage(dataUrl) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.onload = () => resolve(img);
      img.onerror = reject;
      img.src = dataUrl;
    });
  }
  async function canvasToImage(canvas) {
    return await dataURLToImage(canvas.toDataURL("image/png"));
  }
  function getImageData(image) {
    const canvas = document.createElement("canvas");
    canvas.width = image.naturalWidth;
    canvas.height = image.naturalHeight;
    const ctx = canvas.getContext("2d");
    ctx.drawImage(image, 0, 0);
    return ctx.getImageData(0, 0, image.naturalWidth, image.naturalHeight);
  }
  async function resizeImage(image, width, height) {
    const canvas = document.createElement("canvas");
    canvas.width = width;
    canvas.height = height;
    const ctx = canvas.getContext("2d");
    ctx.drawImage(image, 0, 0, width, height);
    const resizedImage = new Image();
    resizedImage.src = canvas.toDataURL();
    await new Promise((resolve) => {
      resizedImage.onload = resolve;
    });
    return resizedImage;
  }

  // src/utils.js
  function log(s2) {
    document.getElementById("log").innerHTML = s2 + "<br>";
  }

  // src/onnx_helper.js
  var import_onnxruntime_web = __toModule(require_ort_web_min());
  async function imageToChannelInputTensor(image, nchannels) {
    return new Promise((resolve) => {
      const canvas = document.createElement("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      const ctx = canvas.getContext("2d");
      ctx.drawImage(image, 0, 0, image.width, image.height);
      const imageData = ctx.getImageData(0, 0, image.width, image.height);
      const {data, width, height} = imageData;
      const inputTensor = new Float32Array(nchannels * width * height);
      for (let x2 = 0; x2 < width; x2++) {
        for (let y2 = 0; y2 < height; y2++) {
          const dataOffset = (y2 * width + x2) * 4;
          const wh = width * height;
          const tensorOffset = y2 * width + x2;
          inputTensor[tensorOffset] = data[dataOffset] / 255;
          inputTensor[wh + tensorOffset] = data[dataOffset + 1] / 255;
          inputTensor[2 * wh + tensorOffset] = data[dataOffset + 2] / 255;
        }
      }
      resolve(new import_onnxruntime_web.default.Tensor("float32", inputTensor, [1, nchannels, height, width]));
    });
  }
  async function imageToRitmInputTensor(image) {
    return imageToChannelInputTensor(image, 4);
  }
  async function loadModel(modelPath) {
    const session = await import_onnxruntime_web.default.InferenceSession.create(modelPath);
    return session;
  }
  function jsonToTensor(json, type) {
    const shape = [json.length, ...json[0].length ? [json[0].length] : [], ...json[0][0].length ? [json[0][0].length] : [], ...json[0][0][0].length ? [json[0][0][0].length] : []];
    const flattened = json.flat(Infinity);
    return new import_onnxruntime_web.default.Tensor(type, flattened, shape);
  }

  // src/sticker_generation.js
  var import_base64_js = __toModule(require_base64_js());

  // src/auto-levels.js
  async function autoLevels(image, isInMask, lowSqueeze = 0.05, highSqeeze = 0.05) {
    const c2 = document.createElement("canvas");
    c2.width = image.width;
    c2.height = image.height;
    const ctx = c2.getContext("2d");
    ctx.drawImage(image, 0, 0);
    const idata = ctx.getImageData(0, 0, image.width, image.height);
    const data = idata.data;
    let minL = Infinity;
    let maxL = -Infinity;
    const labdata = new Int32Array(data.length / 4 * 3);
    const XC = 100 / 95.047;
    const ZC = 100 / 108.883;
    const Q2 = 16 / 116;
    const POWT = 1 / 3;
    const INV255 = 1 / 255;
    const INVXYZSCALE = 1 / 1.055;
    const INVXYZSCALE2 = 1 / 12.92;
    for (let i2 = 0, j2 = 0; i2 < data.length; i2 += 4, j2++) {
      let r2 = data[i2] * INV255;
      let g2 = data[i2 + 1] * INV255;
      let b2 = data[i2 + 2] * INV255;
      r2 = r2 > 0.04045 ? Math.pow((r2 + 0.055) * INVXYZSCALE, 2.4) : r2 * INVXYZSCALE2;
      g2 = g2 > 0.04045 ? Math.pow((g2 + 0.055) * INVXYZSCALE, 2.4) : g2 * INVXYZSCALE2;
      b2 = b2 > 0.04045 ? Math.pow((b2 + 0.055) * INVXYZSCALE, 2.4) : b2 * INVXYZSCALE2;
      let x2 = r2 * 0.4124 + g2 * 0.3576 + b2 * 0.1805;
      let y2 = r2 * 0.2126 + g2 * 0.7152 + b2 * 0.0722;
      let z2 = r2 * 0.0193 + g2 * 0.1192 + b2 * 0.9505;
      x2 *= XC;
      z2 *= ZC;
      x2 = x2 > 8856e-6 ? Math.pow(x2, POWT) : 7.787 * x2 + Q2;
      y2 = y2 > 8856e-6 ? Math.pow(y2, POWT) : 7.787 * y2 + Q2;
      z2 = z2 > 8856e-6 ? Math.pow(z2, POWT) : 7.787 * z2 + Q2;
      const l2 = 116 * y2 - 16;
      labdata[j2 * 3] = l2;
      labdata[j2 * 3 + 1] = 500 * (x2 - y2);
      labdata[j2 * 3 + 2] = 200 * (y2 - z2);
      if (!isInMask(j2 % image.width, Math.floor(j2 / image.width), image))
        continue;
      minL = Math.min(minL, l2);
      maxL = Math.max(maxL, l2);
    }
    const size = maxL - minL;
    minL += size * lowSqueeze;
    maxL -= size * highSqeeze;
    const range = maxL - minL;
    if (range < 32) {
      const expand = (32 - range) / 2;
      minL -= expand;
      maxL += expand;
    }
    const InvMinL = 1 / (maxL - minL);
    const INV_LAB_Y = 1 / 116;
    const INV_LAB_X = 1 / 500;
    const INV_LAB_Z = 1 / 200;
    const C_INV_LAB_2 = 16 / 116;
    const C_INV_LAB_3 = 1 / 7.787;
    const XYZ_RGB_POW = 1 / 2.4;
    for (let i2 = 0, j2 = 0; i2 < data.length; i2 += 4, j2++) {
      const l2 = (labdata[j2 * 3] - minL) * InvMinL * maxL;
      const aa = labdata[j2 * 3 + 1];
      const bb = labdata[j2 * 3 + 2];
      let x2;
      let y2;
      let z2;
      y2 = (l2 + 16) * INV_LAB_Y;
      x2 = aa * INV_LAB_X + y2;
      z2 = y2 - bb * INV_LAB_Z;
      const y22 = Math.pow(y2, 3);
      const x22 = Math.pow(x2, 3);
      const z22 = Math.pow(z2, 3);
      y2 = y22 > 8856e-6 ? y22 : (y2 - C_INV_LAB_2) * C_INV_LAB_3;
      x2 = x22 > 8856e-6 ? x22 : (x2 - C_INV_LAB_2) * C_INV_LAB_3;
      z2 = z22 > 8856e-6 ? z22 : (z2 - C_INV_LAB_2) * C_INV_LAB_3;
      x2 *= 0.95047;
      z2 *= 1.08883;
      let r2 = x2 * 3.2406 + y2 * -1.5372 + z2 * -0.4986;
      let g2 = x2 * -0.9689 + y2 * 1.8758 + z2 * 0.0415;
      let b2 = x2 * 0.0557 + y2 * -0.204 + z2 * 1.057;
      r2 = r2 > 31308e-7 ? 1.055 * Math.pow(r2, XYZ_RGB_POW) - 0.055 : r2 * 12.92;
      g2 = g2 > 31308e-7 ? 1.055 * Math.pow(g2, XYZ_RGB_POW) - 0.055 : g2 * 12.92;
      b2 = b2 > 31308e-7 ? 1.055 * Math.pow(b2, XYZ_RGB_POW) - 0.055 : b2 * 12.92;
      r2 = Math.min(Math.max(0, r2), 1);
      g2 = Math.min(Math.max(0, g2), 1);
      b2 = Math.min(Math.max(0, b2), 1);
      data[i2] = r2 * 255;
      data[i2 + 1] = g2 * 255;
      data[i2 + 2] = b2 * 255;
    }
    ctx.putImageData(idata, 0, 0);
    const correctedImage = new Image();
    correctedImage.src = c2.toDataURL();
    await new Promise((resolve) => {
      correctedImage.onload = resolve;
    });
    return correctedImage;
  }

  // src/sticker_generation.js
  var ritmModelPath = "ritm-big.onnx";
  var workerUrl = "https://mediaservice.greg-797.workers.dev";
  var workerUser = "greg";
  var ritmModel = null;
  var lutImage = null;
  document.querySelector("#loading").innerText = "Loading RITM";
  loadModel(ritmModelPath).then((m) => {
    ritmModel = m;
    const image = new Image();
    image.src = "F_6820_STD.jpg";
    new Promise((resolve) => {
      image.onload = resolve;
    }).then(() => {
      lutImage = image;
      document.querySelector("#loading").remove();
    });
  });
  function compress(str) {
    const enc = new TextEncoder();
    const compressed = new CompressionStream("gzip");
    const writer = compressed.writable.getWriter();
    writer.write(enc.encode(str));
    writer.close();
    const reader = compressed.readable.getReader();
    const chunks = [];
    return new Promise((resolve, reject) => {
      reader.read().then(function processChunk({done, value}) {
        if (done) {
          resolve(new Blob(chunks));
          return;
        }
        chunks.push(value);
        reader.read().then(processChunk);
      });
    });
  }
  async function segmentToSVGMask(image, x2, y2, ritmModel2) {
    const coordsTensor = jsonToTensor([[[x2, y2, 0], [-1, -1, -1]]], "int32");
    const outputs = await ritmModel2.run({image: await imageToRitmInputTensor(image), coords: coordsTensor});
    const w2 = image.width;
    const h2 = image.height;
    const inferenceResult = outputs.instances.data;
    for (let i2 = 0; i2 < inferenceResult.length; i2++) {
      inferenceResult[i2] = 1 / (1 + Math.exp(-inferenceResult[i2]));
    }
    floodMask(inferenceResult, w2, h2);
    const isXYInMask = (x3, y3, targetImage) => {
      const scaleFactor = targetImage.width / w2;
      x3 = Math.floor(x3 / scaleFactor);
      y3 = Math.floor(y3 / scaleFactor);
      const idx = y3 * w2 + x3;
      return inferenceResult[idx] > 0.5;
    };
    const canvas = document.createElement("canvas");
    canvas.width = w2;
    canvas.height = h2;
    const ctx = canvas.getContext("2d");
    const imageData = ctx.createImageData(w2, h2);
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i2 = 0; i2 < inferenceResult.length; i2++) {
      const value = inferenceResult[i2] > 0.5 ? 0 : 255;
      imageData.data[i2 * 4] = value;
      imageData.data[i2 * 4 + 1] = value;
      imageData.data[i2 * 4 + 2] = value;
      imageData.data[i2 * 4 + 3] = 255;
      if (value === 0) {
        const x3 = i2 % w2;
        const y3 = Math.floor(i2 / w2);
        minX = Math.min(minX, x3);
        minY = Math.min(minY, y3);
        maxX = Math.max(maxX, x3);
        maxY = Math.max(maxY, y3);
      }
    }
    ctx.putImageData(imageData, 0, 0);
    return [await vectorizeBWImage(canvas.toDataURL()), isXYInMask, {x: minX, y: minY, width: maxX - minX, height: maxY - minY}];
  }
  async function segmentSvgToOutlinedMask(segmentSvg, image, fullMaskSize, viewBoxWidth, viewBoxHeight, targetSize = 1500) {
    const svgEl = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svgEl.innerHTML = segmentSvg;
    const pathEl = svgEl.querySelector("path");
    const pathData = pathEl.getAttribute("d");
    const pathTransform = pathEl.getAttribute("transform");
    const strokeWidth1 = 20 * (fullMaskSize / targetSize);
    const strokeWidth2 = 4 * (fullMaskSize / targetSize);
    const strokeWidth3 = 6 * (fullMaskSize / targetSize);
    const maskSvg = `
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${viewBoxWidth} ${viewBoxHeight}" width="${image.width}" height="${image.height}" style="background-color: rgba(0,0,0,0)">
     <path d="${pathData}" transform="${pathTransform}" stroke="white" stroke-linecap="round" stroke-width="${strokeWidth1}" />
     <path d="${pathData}" transform="${pathTransform}" stroke="black" stroke-linecap="round" stroke-width="${strokeWidth2}" />
     <path d="${pathData}" transform="${pathTransform}" stroke="black" stroke-linecap="round" stroke-width="${strokeWidth3}" fill="red"/>
    </svg>
    `;
    const outlinedMaskSvgB64 = (0, import_base64_js.fromByteArray)(new TextEncoder().encode(maskSvg));
    const outlinedMaskImage = new Image();
    outlinedMaskImage.src = `data:image/svg+xml;base64,${outlinedMaskSvgB64}`;
    await new Promise((resolve) => {
      outlinedMaskImage.onload = resolve;
    });
    return outlinedMaskImage;
  }
  function computeOutlinedMaskContentBoundingBox(outlinedMask) {
    const w2 = outlinedMask.width;
    const h2 = outlinedMask.height;
    const outlinedMaskCanvas = document.createElement("canvas");
    outlinedMaskCanvas.width = w2;
    outlinedMaskCanvas.height = h2;
    const outlinedMaskCtx = outlinedMaskCanvas.getContext("2d");
    outlinedMaskCtx.drawImage(outlinedMask, 0, 0, w2, h2);
    const outlinedMaskImageData = outlinedMaskCtx.getImageData(0, 0, w2, h2).data;
    let minMaskX = Infinity;
    let minMaskY = Infinity;
    let maxMaskX = -Infinity;
    let maxMaskY = -Infinity;
    for (let x2 = 0; x2 < w2; x2++) {
      for (let y2 = 0; y2 < h2; y2++) {
        const r2 = outlinedMaskImageData[(y2 * w2 + x2) * 4];
        const g2 = outlinedMaskImageData[(y2 * w2 + x2) * 4 + 1];
        const b2 = outlinedMaskImageData[(y2 * w2 + x2) * 4 + 2];
        const a2 = outlinedMaskImageData[(y2 * w2 + x2) * 4 + 3];
        if (r2 === 255 && g2 === 0 && b2 === 0 || a2 !== 0 && r2 === 255 && g2 === 255 && b2 === 255) {
          minMaskX = Math.min(minMaskX, x2);
          minMaskY = Math.min(minMaskY, y2);
          maxMaskX = Math.max(maxMaskX, x2);
          maxMaskY = Math.max(maxMaskY, y2);
        }
      }
    }
    while (maxMaskX - minMaskX !== maxMaskY - minMaskY) {
      if (maxMaskX - minMaskX > maxMaskY - minMaskY) {
        if (maxMaskY < h2)
          maxMaskY++;
        else
          minMaskY--;
      } else {
        if (maxMaskX < w2)
          maxMaskX++;
        else
          minMaskX--;
      }
    }
    while ((maxMaskX - minMaskX) % 16 !== 0) {
      if (maxMaskX < w2)
        maxMaskX++;
      else
        minMaskX--;
    }
    while ((maxMaskY - minMaskY) % 16 !== 0) {
      if (maxMaskY < h2)
        maxMaskY++;
      else
        minMaskY--;
    }
    return {x: minMaskX, y: minMaskY, width: maxMaskX - minMaskX, height: maxMaskY - minMaskY};
  }
  async function cropToBox(fullImage, boundingBox) {
    const croppedFullImageCanvas = document.createElement("canvas");
    croppedFullImageCanvas.width = boundingBox.width;
    croppedFullImageCanvas.height = boundingBox.height;
    const croppedCtx = croppedFullImageCanvas.getContext("2d");
    croppedCtx.imageSmoothingEnabled = true;
    croppedCtx.imageSmoothingQuality = "high";
    croppedCtx.drawImage(fullImage, boundingBox.x, boundingBox.y, croppedFullImageCanvas.width, croppedFullImageCanvas.height, 0, 0, croppedFullImageCanvas.width, croppedFullImageCanvas.height);
    const croppedFullImage = new Image();
    croppedFullImage.src = croppedFullImageCanvas.toDataURL();
    await new Promise((resolve) => {
      croppedFullImage.onload = resolve;
    });
    return croppedFullImage;
  }
  async function composeSticker(outlinedMask, cartoonizedImage, outlinedMaskBB) {
    const w2 = outlinedMask.width;
    const h2 = outlinedMask.height;
    const outlinedMaskData = getImageData(outlinedMask).data;
    const stickerCanvas = document.createElement("canvas");
    const stickerCtx = stickerCanvas.getContext("2d");
    stickerCanvas.width = w2;
    stickerCanvas.height = h2;
    stickerCtx.drawImage(cartoonizedImage, 0, 0, cartoonizedImage.width, cartoonizedImage.height, outlinedMaskBB.x, outlinedMaskBB.y, cartoonizedImage.width, cartoonizedImage.height);
    const stickerImageData = stickerCtx.getImageData(0, 0, w2, h2).data;
    for (let x2 = 0; x2 < w2; x2++) {
      for (let y2 = 0; y2 < w2; y2++) {
        const offset = (y2 * w2 + x2) * 4;
        const r2 = outlinedMaskData[offset];
        const g2 = outlinedMaskData[offset + 1];
        const b2 = outlinedMaskData[offset + 2];
        const a2 = outlinedMaskData[offset + 3];
        if (r2 === 255 && g2 === 0 && b2 === 0) {
        } else {
          if (a2 === 0) {
            stickerImageData[offset + 3] = 0;
          } else if (r2 === 0 && g2 === 0 && b2 === 0) {
            stickerImageData[offset + 0] = 0;
            stickerImageData[offset + 1] = 0;
            stickerImageData[offset + 2] = 0;
            stickerImageData[offset + 3] = 255;
          } else if (r2 === 255 && g2 === 255 && b2 === 255) {
            stickerImageData[offset + 0] = 255;
            stickerImageData[offset + 1] = 255;
            stickerImageData[offset + 2] = 255;
            stickerImageData[offset + 3] = 255;
          }
        }
      }
    }
    stickerCtx.putImageData(new ImageData(stickerImageData, w2, h2), 0, 0);
    return await canvasToImage(stickerCanvas);
  }
  async function cropStickerToBounds(stickerImage) {
    const stickerCanvas = document.createElement("canvas");
    const stickerCtx = stickerCanvas.getContext("2d");
    stickerCanvas.width = stickerImage.width;
    stickerCanvas.height = stickerImage.height;
    stickerCtx.drawImage(stickerImage, 0, 0);
    const stickerImageData = stickerCtx.getImageData(0, 0, stickerImage.width, stickerImage.height).data;
    const stickerImageBB = {
      x: stickerImage.width,
      y: stickerImage.height,
      width: 0,
      height: 0
    };
    for (let x2 = 0; x2 < stickerImage.width; x2++) {
      for (let y2 = 0; y2 < stickerImage.height; y2++) {
        const hasContent = stickerImageData[(y2 * stickerImage.width + x2) * 4 + 3] > 0;
        if (hasContent) {
          stickerImageBB.x = Math.min(stickerImageBB.x, x2);
          stickerImageBB.width = Math.max(stickerImageBB.width, x2);
          stickerImageBB.y = Math.min(stickerImageBB.y, y2);
          stickerImageBB.height = Math.max(stickerImageBB.height, y2);
        }
      }
    }
    const croppedStickerCanvas = document.createElement("canvas");
    const croppedStickerCtx = croppedStickerCanvas.getContext("2d");
    croppedStickerCanvas.width = stickerImageBB.width - stickerImageBB.x;
    croppedStickerCanvas.height = stickerImageBB.height - stickerImageBB.y;
    croppedStickerCtx.drawImage(stickerImage, stickerImageBB.x, stickerImageBB.y, croppedStickerCanvas.width, croppedStickerCanvas.height, 0, 0, croppedStickerCanvas.width, croppedStickerCanvas.height);
    return await canvasToImage(croppedStickerCanvas);
  }
  var cancelLastStickerGeneration = null;
  function cancelLastSticker() {
    if (cancelLastStickerGeneration)
      cancelLastStickerGeneration();
  }
  async function generateStickerFromVideo(video, onCartoon) {
    if (ritmModel === null || lutImage === null)
      return;
    if (cancelLastStickerGeneration)
      cancelLastStickerGeneration();
    await new Promise((resolve) => setTimeout(resolve, 250));
    const SEGMENTER_INPUT_SIZE = 256;
    const MAX_SPRITE_SIZE = 1280;
    const size = Math.min(video.videoWidth, video.videoHeight);
    log("Capturing");
    let fullImage = await videoToImage(video, size, size);
    log("Resizing");
    let smallImage = await resizeImage(fullImage, SEGMENTER_INPUT_SIZE, SEGMENTER_INPUT_SIZE);
    log("Running segmenter on " + smallImage.width + " " + smallImage.height);
    const clickXY = Math.floor(SEGMENTER_INPUT_SIZE / 2);
    const [segmentSvg, isXYInMask, maskBox] = await segmentToSVGMask(smallImage, clickXY, clickXY, ritmModel);
    log("Segmenter done");
    const levelledSmallImage = await autoLevels(smallImage, isXYInMask);
    log("Color correction");
    const colorCorrectedSmallImage = await applyLUT(levelledSmallImage, lutImage);
    smallImage = await resizeImage(colorCorrectedSmallImage, MAX_SPRITE_SIZE, MAX_SPRITE_SIZE);
    const smallOutlinedMask = await segmentSvgToOutlinedMask(segmentSvg, smallImage, Math.max(maskBox.width, maskBox.height), SEGMENTER_INPUT_SIZE, SEGMENTER_INPUT_SIZE, 220);
    const smallOutlinedMaskBB = await computeOutlinedMaskContentBoundingBox(smallOutlinedMask);
    log("Levels");
    const croppedLevelledSmallImage = await cropToBox(smallImage, smallOutlinedMaskBB);
    log("Compositing sticker");
    let smallStickerImage = await cropStickerToBounds(await composeSticker(smallOutlinedMask, croppedLevelledSmallImage, smallOutlinedMaskBB));
    const scaleFactor = MAX_SPRITE_SIZE / Math.max(smallStickerImage.width, smallStickerImage.height);
    smallStickerImage = await resizeImage(smallStickerImage, Math.floor(smallStickerImage.width * scaleFactor), Math.floor(smallStickerImage.height * scaleFactor));
    let cancelled = false;
    cancelLastStickerGeneration = () => {
      cancelled = true;
    };
    setTimeout(async () => {
      if (cancelled)
        return;
      log("Cartoonizing");
      let scaleFactor2 = 1;
      while (fullImage.width * scaleFactor2 / SEGMENTER_INPUT_SIZE * maskBox.width > MAX_SPRITE_SIZE && fullImage.height * scaleFactor2 / SEGMENTER_INPUT_SIZE * maskBox.height > MAX_SPRITE_SIZE) {
        scaleFactor2 *= 0.95;
      }
      if (scaleFactor2 !== 1) {
        log("Resizing " + scaleFactor2);
        fullImage = await resizeImage(fullImage, Math.floor(fullImage.width * scaleFactor2), Math.floor(fullImage.height * scaleFactor2));
      }
      if (cancelled)
        return;
      log("Creating outlined");
      const fullMaskSize = Math.floor(Math.max(fullImage.width / SEGMENTER_INPUT_SIZE * maskBox.width, fullImage.height / SEGMENTER_INPUT_SIZE * maskBox.height));
      const outlinedMask = await segmentSvgToOutlinedMask(segmentSvg, fullImage, fullMaskSize, SEGMENTER_INPUT_SIZE, SEGMENTER_INPUT_SIZE);
      if (cancelled)
        return;
      const outlinedMaskBB = await computeOutlinedMaskContentBoundingBox(outlinedMask);
      if (cancelled)
        return;
      log("Levels");
      const levelledFullImage = await autoLevels(fullImage, isXYInMask);
      if (cancelled)
        return;
      const croppedLevelledFullImage = await cropToBox(levelledFullImage, outlinedMaskBB);
      if (cancelled)
        return;
      const svgDataUrl = "data:application/text;base64," + btoa(segmentSvg);
      if (cancelled)
        return;
      const payload = {
        image_url: croppedLevelledFullImage.src,
        svg_paths_url: svgDataUrl,
        original_width: fullImage.width,
        original_height: fullImage.height,
        cropped_at_x: outlinedMaskBB.x,
        cropped_at_y: outlinedMaskBB.y,
        full_mask_size: fullMaskSize
      };
      const compressedBody = await compress(JSON.stringify(payload));
      const response = await fetch(`${workerUrl}/stickers`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Content-Encoding": "gzip",
          Authorization: workerUser
        },
        body: compressedBody
      });
      const guid = (await response.json()).guid;
      console.log("Got guid", guid);
      let spriterDone = false;
      let captionerDone = false;
      let c2 = 0;
      while ((!spriterDone || !captionerDone) && c2 < 100) {
        if (cancelled)
          break;
        console.log("Waiting for response");
        try {
          const response2 = await fetch(`${workerUrl}/stickers/${guid}/meta.json`, {headers: {Authorization: workerUser}});
          const meta = await response2.json();
          if (!spriterDone && meta.predictions.spriter.done) {
            spriterDone = true;
            console.log("Spriter done");
            if (meta.predictions.spriter.status !== "failed") {
              const spriteUrl = `${workerUrl}/stickers/${guid}/sprite.png`;
              onCartoon(spriteUrl);
            }
          }
          if (!captionerDone && meta.predictions.captioner.done) {
            captionerDone = true;
            console.log("Captioner done");
            const caption = meta.captions.friendly;
            if (meta.predictions.captioner.status !== "failed") {
              log("Caption: " + caption);
            }
          }
        } catch (e2) {
        } finally {
          await new Promise((resolve) => setTimeout(resolve, 1500));
          c2++;
        }
      }
    }, 2e3);
    return smallStickerImage;
  }

  // src/WebcamWithZoom.js
  var import_react2 = __toModule(require_react());
  var import_react_webcam = __toModule(require_react_webcam());
  var import_prop_types = __toModule(require_prop_types());

  // node_modules/styled-components/dist/styled-components.browser.esm.js
  var import_react_is = __toModule(require_react_is());
  var import_react = __toModule(require_react());
  var import_shallowequal = __toModule(require_shallowequal());

  // node_modules/@emotion/stylis/dist/stylis.browser.esm.js
  function stylis_min(W2) {
    function M2(d2, c2, e2, h2, a2) {
      for (var m = 0, b2 = 0, v2 = 0, n2 = 0, q2, g2, x2 = 0, K2 = 0, k2, u2 = k2 = q2 = 0, l2 = 0, r2 = 0, I2 = 0, t2 = 0, B3 = e2.length, J2 = B3 - 1, y2, f = "", p = "", F3 = "", G3 = "", C; l2 < B3; ) {
        g2 = e2.charCodeAt(l2);
        l2 === J2 && b2 + n2 + v2 + m !== 0 && (b2 !== 0 && (g2 = b2 === 47 ? 10 : 47), n2 = v2 = m = 0, B3++, J2++);
        if (b2 + n2 + v2 + m === 0) {
          if (l2 === J2 && (0 < r2 && (f = f.replace(N2, "")), 0 < f.trim().length)) {
            switch (g2) {
              case 32:
              case 9:
              case 59:
              case 13:
              case 10:
                break;
              default:
                f += e2.charAt(l2);
            }
            g2 = 59;
          }
          switch (g2) {
            case 123:
              f = f.trim();
              q2 = f.charCodeAt(0);
              k2 = 1;
              for (t2 = ++l2; l2 < B3; ) {
                switch (g2 = e2.charCodeAt(l2)) {
                  case 123:
                    k2++;
                    break;
                  case 125:
                    k2--;
                    break;
                  case 47:
                    switch (g2 = e2.charCodeAt(l2 + 1)) {
                      case 42:
                      case 47:
                        a: {
                          for (u2 = l2 + 1; u2 < J2; ++u2) {
                            switch (e2.charCodeAt(u2)) {
                              case 47:
                                if (g2 === 42 && e2.charCodeAt(u2 - 1) === 42 && l2 + 2 !== u2) {
                                  l2 = u2 + 1;
                                  break a;
                                }
                                break;
                              case 10:
                                if (g2 === 47) {
                                  l2 = u2 + 1;
                                  break a;
                                }
                            }
                          }
                          l2 = u2;
                        }
                    }
                    break;
                  case 91:
                    g2++;
                  case 40:
                    g2++;
                  case 34:
                  case 39:
                    for (; l2++ < J2 && e2.charCodeAt(l2) !== g2; ) {
                    }
                }
                if (k2 === 0)
                  break;
                l2++;
              }
              k2 = e2.substring(t2, l2);
              q2 === 0 && (q2 = (f = f.replace(ca, "").trim()).charCodeAt(0));
              switch (q2) {
                case 64:
                  0 < r2 && (f = f.replace(N2, ""));
                  g2 = f.charCodeAt(1);
                  switch (g2) {
                    case 100:
                    case 109:
                    case 115:
                    case 45:
                      r2 = c2;
                      break;
                    default:
                      r2 = O;
                  }
                  k2 = M2(c2, r2, k2, g2, a2 + 1);
                  t2 = k2.length;
                  0 < A2 && (r2 = X2(O, f, I2), C = H2(3, k2, r2, c2, D2, z2, t2, g2, a2, h2), f = r2.join(""), C !== void 0 && (t2 = (k2 = C.trim()).length) === 0 && (g2 = 0, k2 = ""));
                  if (0 < t2)
                    switch (g2) {
                      case 115:
                        f = f.replace(da, ea);
                      case 100:
                      case 109:
                      case 45:
                        k2 = f + "{" + k2 + "}";
                        break;
                      case 107:
                        f = f.replace(fa, "$1 $2");
                        k2 = f + "{" + k2 + "}";
                        k2 = w2 === 1 || w2 === 2 && L2("@" + k2, 3) ? "@-webkit-" + k2 + "@" + k2 : "@" + k2;
                        break;
                      default:
                        k2 = f + k2, h2 === 112 && (k2 = (p += k2, ""));
                    }
                  else
                    k2 = "";
                  break;
                default:
                  k2 = M2(c2, X2(c2, f, I2), k2, h2, a2 + 1);
              }
              F3 += k2;
              k2 = I2 = r2 = u2 = q2 = 0;
              f = "";
              g2 = e2.charCodeAt(++l2);
              break;
            case 125:
            case 59:
              f = (0 < r2 ? f.replace(N2, "") : f).trim();
              if (1 < (t2 = f.length))
                switch (u2 === 0 && (q2 = f.charCodeAt(0), q2 === 45 || 96 < q2 && 123 > q2) && (t2 = (f = f.replace(" ", ":")).length), 0 < A2 && (C = H2(1, f, c2, d2, D2, z2, p.length, h2, a2, h2)) !== void 0 && (t2 = (f = C.trim()).length) === 0 && (f = "\0\0"), q2 = f.charCodeAt(0), g2 = f.charCodeAt(1), q2) {
                  case 0:
                    break;
                  case 64:
                    if (g2 === 105 || g2 === 99) {
                      G3 += f + e2.charAt(l2);
                      break;
                    }
                  default:
                    f.charCodeAt(t2 - 1) !== 58 && (p += P2(f, q2, g2, f.charCodeAt(2)));
                }
              I2 = r2 = u2 = q2 = 0;
              f = "";
              g2 = e2.charCodeAt(++l2);
          }
        }
        switch (g2) {
          case 13:
          case 10:
            b2 === 47 ? b2 = 0 : 1 + q2 === 0 && h2 !== 107 && 0 < f.length && (r2 = 1, f += "\0");
            0 < A2 * Y2 && H2(0, f, c2, d2, D2, z2, p.length, h2, a2, h2);
            z2 = 1;
            D2++;
            break;
          case 59:
          case 125:
            if (b2 + n2 + v2 + m === 0) {
              z2++;
              break;
            }
          default:
            z2++;
            y2 = e2.charAt(l2);
            switch (g2) {
              case 9:
              case 32:
                if (n2 + m + b2 === 0)
                  switch (x2) {
                    case 44:
                    case 58:
                    case 9:
                    case 32:
                      y2 = "";
                      break;
                    default:
                      g2 !== 32 && (y2 = " ");
                  }
                break;
              case 0:
                y2 = "\\0";
                break;
              case 12:
                y2 = "\\f";
                break;
              case 11:
                y2 = "\\v";
                break;
              case 38:
                n2 + b2 + m === 0 && (r2 = I2 = 1, y2 = "\f" + y2);
                break;
              case 108:
                if (n2 + b2 + m + E2 === 0 && 0 < u2)
                  switch (l2 - u2) {
                    case 2:
                      x2 === 112 && e2.charCodeAt(l2 - 3) === 58 && (E2 = x2);
                    case 8:
                      K2 === 111 && (E2 = K2);
                  }
                break;
              case 58:
                n2 + b2 + m === 0 && (u2 = l2);
                break;
              case 44:
                b2 + v2 + n2 + m === 0 && (r2 = 1, y2 += "\r");
                break;
              case 34:
              case 39:
                b2 === 0 && (n2 = n2 === g2 ? 0 : n2 === 0 ? g2 : n2);
                break;
              case 91:
                n2 + b2 + v2 === 0 && m++;
                break;
              case 93:
                n2 + b2 + v2 === 0 && m--;
                break;
              case 41:
                n2 + b2 + m === 0 && v2--;
                break;
              case 40:
                if (n2 + b2 + m === 0) {
                  if (q2 === 0)
                    switch (2 * x2 + 3 * K2) {
                      case 533:
                        break;
                      default:
                        q2 = 1;
                    }
                  v2++;
                }
                break;
              case 64:
                b2 + v2 + n2 + m + u2 + k2 === 0 && (k2 = 1);
                break;
              case 42:
              case 47:
                if (!(0 < n2 + m + v2))
                  switch (b2) {
                    case 0:
                      switch (2 * g2 + 3 * e2.charCodeAt(l2 + 1)) {
                        case 235:
                          b2 = 47;
                          break;
                        case 220:
                          t2 = l2, b2 = 42;
                      }
                      break;
                    case 42:
                      g2 === 47 && x2 === 42 && t2 + 2 !== l2 && (e2.charCodeAt(t2 + 2) === 33 && (p += e2.substring(t2, l2 + 1)), y2 = "", b2 = 0);
                  }
            }
            b2 === 0 && (f += y2);
        }
        K2 = x2;
        x2 = g2;
        l2++;
      }
      t2 = p.length;
      if (0 < t2) {
        r2 = c2;
        if (0 < A2 && (C = H2(2, p, r2, d2, D2, z2, t2, h2, a2, h2), C !== void 0 && (p = C).length === 0))
          return G3 + p + F3;
        p = r2.join(",") + "{" + p + "}";
        if (w2 * E2 !== 0) {
          w2 !== 2 || L2(p, 2) || (E2 = 0);
          switch (E2) {
            case 111:
              p = p.replace(ha, ":-moz-$1") + p;
              break;
            case 112:
              p = p.replace(Q2, "::-webkit-input-$1") + p.replace(Q2, "::-moz-$1") + p.replace(Q2, ":-ms-input-$1") + p;
          }
          E2 = 0;
        }
      }
      return G3 + p + F3;
    }
    function X2(d2, c2, e2) {
      var h2 = c2.trim().split(ia);
      c2 = h2;
      var a2 = h2.length, m = d2.length;
      switch (m) {
        case 0:
        case 1:
          var b2 = 0;
          for (d2 = m === 0 ? "" : d2[0] + " "; b2 < a2; ++b2) {
            c2[b2] = Z2(d2, c2[b2], e2).trim();
          }
          break;
        default:
          var v2 = b2 = 0;
          for (c2 = []; b2 < a2; ++b2) {
            for (var n2 = 0; n2 < m; ++n2) {
              c2[v2++] = Z2(d2[n2] + " ", h2[b2], e2).trim();
            }
          }
      }
      return c2;
    }
    function Z2(d2, c2, e2) {
      var h2 = c2.charCodeAt(0);
      33 > h2 && (h2 = (c2 = c2.trim()).charCodeAt(0));
      switch (h2) {
        case 38:
          return c2.replace(F2, "$1" + d2.trim());
        case 58:
          return d2.trim() + c2.replace(F2, "$1" + d2.trim());
        default:
          if (0 < 1 * e2 && 0 < c2.indexOf("\f"))
            return c2.replace(F2, (d2.charCodeAt(0) === 58 ? "" : "$1") + d2.trim());
      }
      return d2 + c2;
    }
    function P2(d2, c2, e2, h2) {
      var a2 = d2 + ";", m = 2 * c2 + 3 * e2 + 4 * h2;
      if (m === 944) {
        d2 = a2.indexOf(":", 9) + 1;
        var b2 = a2.substring(d2, a2.length - 1).trim();
        b2 = a2.substring(0, d2).trim() + b2 + ";";
        return w2 === 1 || w2 === 2 && L2(b2, 1) ? "-webkit-" + b2 + b2 : b2;
      }
      if (w2 === 0 || w2 === 2 && !L2(a2, 1))
        return a2;
      switch (m) {
        case 1015:
          return a2.charCodeAt(10) === 97 ? "-webkit-" + a2 + a2 : a2;
        case 951:
          return a2.charCodeAt(3) === 116 ? "-webkit-" + a2 + a2 : a2;
        case 963:
          return a2.charCodeAt(5) === 110 ? "-webkit-" + a2 + a2 : a2;
        case 1009:
          if (a2.charCodeAt(4) !== 100)
            break;
        case 969:
        case 942:
          return "-webkit-" + a2 + a2;
        case 978:
          return "-webkit-" + a2 + "-moz-" + a2 + a2;
        case 1019:
        case 983:
          return "-webkit-" + a2 + "-moz-" + a2 + "-ms-" + a2 + a2;
        case 883:
          if (a2.charCodeAt(8) === 45)
            return "-webkit-" + a2 + a2;
          if (0 < a2.indexOf("image-set(", 11))
            return a2.replace(ja, "$1-webkit-$2") + a2;
          break;
        case 932:
          if (a2.charCodeAt(4) === 45)
            switch (a2.charCodeAt(5)) {
              case 103:
                return "-webkit-box-" + a2.replace("-grow", "") + "-webkit-" + a2 + "-ms-" + a2.replace("grow", "positive") + a2;
              case 115:
                return "-webkit-" + a2 + "-ms-" + a2.replace("shrink", "negative") + a2;
              case 98:
                return "-webkit-" + a2 + "-ms-" + a2.replace("basis", "preferred-size") + a2;
            }
          return "-webkit-" + a2 + "-ms-" + a2 + a2;
        case 964:
          return "-webkit-" + a2 + "-ms-flex-" + a2 + a2;
        case 1023:
          if (a2.charCodeAt(8) !== 99)
            break;
          b2 = a2.substring(a2.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify");
          return "-webkit-box-pack" + b2 + "-webkit-" + a2 + "-ms-flex-pack" + b2 + a2;
        case 1005:
          return ka.test(a2) ? a2.replace(aa, ":-webkit-") + a2.replace(aa, ":-moz-") + a2 : a2;
        case 1e3:
          b2 = a2.substring(13).trim();
          c2 = b2.indexOf("-") + 1;
          switch (b2.charCodeAt(0) + b2.charCodeAt(c2)) {
            case 226:
              b2 = a2.replace(G2, "tb");
              break;
            case 232:
              b2 = a2.replace(G2, "tb-rl");
              break;
            case 220:
              b2 = a2.replace(G2, "lr");
              break;
            default:
              return a2;
          }
          return "-webkit-" + a2 + "-ms-" + b2 + a2;
        case 1017:
          if (a2.indexOf("sticky", 9) === -1)
            break;
        case 975:
          c2 = (a2 = d2).length - 10;
          b2 = (a2.charCodeAt(c2) === 33 ? a2.substring(0, c2) : a2).substring(d2.indexOf(":", 7) + 1).trim();
          switch (m = b2.charCodeAt(0) + (b2.charCodeAt(7) | 0)) {
            case 203:
              if (111 > b2.charCodeAt(8))
                break;
            case 115:
              a2 = a2.replace(b2, "-webkit-" + b2) + ";" + a2;
              break;
            case 207:
            case 102:
              a2 = a2.replace(b2, "-webkit-" + (102 < m ? "inline-" : "") + "box") + ";" + a2.replace(b2, "-webkit-" + b2) + ";" + a2.replace(b2, "-ms-" + b2 + "box") + ";" + a2;
          }
          return a2 + ";";
        case 938:
          if (a2.charCodeAt(5) === 45)
            switch (a2.charCodeAt(6)) {
              case 105:
                return b2 = a2.replace("-items", ""), "-webkit-" + a2 + "-webkit-box-" + b2 + "-ms-flex-" + b2 + a2;
              case 115:
                return "-webkit-" + a2 + "-ms-flex-item-" + a2.replace(ba, "") + a2;
              default:
                return "-webkit-" + a2 + "-ms-flex-line-pack" + a2.replace("align-content", "").replace(ba, "") + a2;
            }
          break;
        case 973:
        case 989:
          if (a2.charCodeAt(3) !== 45 || a2.charCodeAt(4) === 122)
            break;
        case 931:
        case 953:
          if (la.test(d2) === true)
            return (b2 = d2.substring(d2.indexOf(":") + 1)).charCodeAt(0) === 115 ? P2(d2.replace("stretch", "fill-available"), c2, e2, h2).replace(":fill-available", ":stretch") : a2.replace(b2, "-webkit-" + b2) + a2.replace(b2, "-moz-" + b2.replace("fill-", "")) + a2;
          break;
        case 962:
          if (a2 = "-webkit-" + a2 + (a2.charCodeAt(5) === 102 ? "-ms-" + a2 : "") + a2, e2 + h2 === 211 && a2.charCodeAt(13) === 105 && 0 < a2.indexOf("transform", 10))
            return a2.substring(0, a2.indexOf(";", 27) + 1).replace(ma, "$1-webkit-$2") + a2;
      }
      return a2;
    }
    function L2(d2, c2) {
      var e2 = d2.indexOf(c2 === 1 ? ":" : "{"), h2 = d2.substring(0, c2 !== 3 ? e2 : 10);
      e2 = d2.substring(e2 + 1, d2.length - 1);
      return R2(c2 !== 2 ? h2 : h2.replace(na, "$1"), e2, c2);
    }
    function ea(d2, c2) {
      var e2 = P2(c2, c2.charCodeAt(0), c2.charCodeAt(1), c2.charCodeAt(2));
      return e2 !== c2 + ";" ? e2.replace(oa, " or ($1)").substring(4) : "(" + c2 + ")";
    }
    function H2(d2, c2, e2, h2, a2, m, b2, v2, n2, q2) {
      for (var g2 = 0, x2 = c2, w3; g2 < A2; ++g2) {
        switch (w3 = S2[g2].call(B2, d2, x2, e2, h2, a2, m, b2, v2, n2, q2)) {
          case void 0:
          case false:
          case true:
          case null:
            break;
          default:
            x2 = w3;
        }
      }
      if (x2 !== c2)
        return x2;
    }
    function T2(d2) {
      switch (d2) {
        case void 0:
        case null:
          A2 = S2.length = 0;
          break;
        default:
          if (typeof d2 === "function")
            S2[A2++] = d2;
          else if (typeof d2 === "object")
            for (var c2 = 0, e2 = d2.length; c2 < e2; ++c2) {
              T2(d2[c2]);
            }
          else
            Y2 = !!d2 | 0;
      }
      return T2;
    }
    function U2(d2) {
      d2 = d2.prefix;
      d2 !== void 0 && (R2 = null, d2 ? typeof d2 !== "function" ? w2 = 1 : (w2 = 2, R2 = d2) : w2 = 0);
      return U2;
    }
    function B2(d2, c2) {
      var e2 = d2;
      33 > e2.charCodeAt(0) && (e2 = e2.trim());
      V2 = e2;
      e2 = [V2];
      if (0 < A2) {
        var h2 = H2(-1, c2, e2, e2, D2, z2, 0, 0, 0, 0);
        h2 !== void 0 && typeof h2 === "string" && (c2 = h2);
      }
      var a2 = M2(O, e2, c2, 0, 0);
      0 < A2 && (h2 = H2(-2, a2, e2, e2, D2, z2, a2.length, 0, 0, 0), h2 !== void 0 && (a2 = h2));
      V2 = "";
      E2 = 0;
      z2 = D2 = 1;
      return a2;
    }
    var ca = /^\0+/g, N2 = /[\0\r\f]/g, aa = /: */g, ka = /zoo|gra/, ma = /([,: ])(transform)/g, ia = /,\r+?/g, F2 = /([\t\r\n ])*\f?&/g, fa = /@(k\w+)\s*(\S*)\s*/, Q2 = /::(place)/g, ha = /:(read-only)/g, G2 = /[svh]\w+-[tblr]{2}/, da = /\(\s*(.*)\s*\)/g, oa = /([\s\S]*?);/g, ba = /-self|flex-/g, na = /[^]*?(:[rp][el]a[\w-]+)[^]*/, la = /stretch|:\s*\w+\-(?:conte|avail)/, ja = /([^-])(image-set\()/, z2 = 1, D2 = 1, E2 = 0, w2 = 1, O = [], S2 = [], A2 = 0, R2 = null, Y2 = 0, V2 = "";
    B2.use = T2;
    B2.set = U2;
    W2 !== void 0 && U2(W2);
    return B2;
  }
  var stylis_browser_esm_default = stylis_min;

  // node_modules/@emotion/unitless/dist/unitless.browser.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  var unitless_browser_esm_default = unitlessKeys;

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.mjs
  var import_emotion_is_prop_valid_cjs = __toModule(require_emotion_is_prop_valid_cjs());
  var import_emotion_is_prop_valid_cjs_default = __toModule(require_emotion_is_prop_valid_cjs_default());

  // node_modules/styled-components/dist/styled-components.browser.esm.js
  var import_hoist_non_react_statics = __toModule(require_hoist_non_react_statics_cjs());
  function v() {
    return (v = Object.assign || function(e2) {
      for (var t2 = 1; t2 < arguments.length; t2++) {
        var n2 = arguments[t2];
        for (var r2 in n2)
          Object.prototype.hasOwnProperty.call(n2, r2) && (e2[r2] = n2[r2]);
      }
      return e2;
    }).apply(this, arguments);
  }
  var g = function(e2, t2) {
    for (var n2 = [e2[0]], r2 = 0, o2 = t2.length; r2 < o2; r2 += 1)
      n2.push(t2[r2], e2[r2 + 1]);
    return n2;
  };
  var S = function(t2) {
    return t2 !== null && typeof t2 == "object" && (t2.toString ? t2.toString() : Object.prototype.toString.call(t2)) === "[object Object]" && !(0, import_react_is.typeOf)(t2);
  };
  var w = Object.freeze([]);
  var E = Object.freeze({});
  function b(e2) {
    return typeof e2 == "function";
  }
  function _(e2) {
    return typeof e2 == "string" && e2 || e2.displayName || e2.name || "Component";
  }
  function N(e2) {
    return e2 && typeof e2.styledComponentId == "string";
  }
  var A = typeof process != "undefined" && process.env !== void 0 && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || "data-styled";
  var I = typeof window != "undefined" && "HTMLElement" in window;
  var P = Boolean(typeof SC_DISABLE_SPEEDY == "boolean" ? SC_DISABLE_SPEEDY : typeof process != "undefined" && process.env !== void 0 && (process.env.REACT_APP_SC_DISABLE_SPEEDY !== void 0 && process.env.REACT_APP_SC_DISABLE_SPEEDY !== "" ? process.env.REACT_APP_SC_DISABLE_SPEEDY !== "false" && process.env.REACT_APP_SC_DISABLE_SPEEDY : process.env.SC_DISABLE_SPEEDY !== void 0 && process.env.SC_DISABLE_SPEEDY !== "" ? process.env.SC_DISABLE_SPEEDY !== "false" && process.env.SC_DISABLE_SPEEDY : true));
  var R = true ? {1: "Cannot create styled-component for component: %s.\n\n", 2: "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n", 3: "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n", 4: "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n", 5: "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n", 6: "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n", 7: 'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n', 8: 'ThemeProvider: Please make your "theme" prop an object.\n\n', 9: "Missing document `<head>`\n\n", 10: "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n", 11: "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n", 12: "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n", 13: "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n", 14: 'ThemeProvider: "theme" prop is required.\n\n', 15: "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n", 16: "Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n", 17: "CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n"} : {};
  function D() {
    for (var e2 = arguments.length <= 0 ? void 0 : arguments[0], t2 = [], n2 = 1, r2 = arguments.length; n2 < r2; n2 += 1)
      t2.push(n2 < 0 || arguments.length <= n2 ? void 0 : arguments[n2]);
    return t2.forEach(function(t3) {
      e2 = e2.replace(/%[a-z]/, t3);
    }), e2;
  }
  function j(e2) {
    for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
      n2[r2 - 1] = arguments[r2];
    throw false ? new Error("An error occurred. See https://git.io/JUIaE#" + e2 + " for more information." + (n2.length > 0 ? " Args: " + n2.join(", ") : "")) : new Error(D.apply(void 0, [R[e2]].concat(n2)).trim());
  }
  var T = function() {
    function e2(e3) {
      this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e3;
    }
    var t2 = e2.prototype;
    return t2.indexOfGroup = function(e3) {
      for (var t3 = 0, n2 = 0; n2 < e3; n2++)
        t3 += this.groupSizes[n2];
      return t3;
    }, t2.insertRules = function(e3, t3) {
      if (e3 >= this.groupSizes.length) {
        for (var n2 = this.groupSizes, r2 = n2.length, o2 = r2; e3 >= o2; )
          (o2 <<= 1) < 0 && j(16, "" + e3);
        this.groupSizes = new Uint32Array(o2), this.groupSizes.set(n2), this.length = o2;
        for (var s2 = r2; s2 < o2; s2++)
          this.groupSizes[s2] = 0;
      }
      for (var i2 = this.indexOfGroup(e3 + 1), a2 = 0, c2 = t3.length; a2 < c2; a2++)
        this.tag.insertRule(i2, t3[a2]) && (this.groupSizes[e3]++, i2++);
    }, t2.clearGroup = function(e3) {
      if (e3 < this.length) {
        var t3 = this.groupSizes[e3], n2 = this.indexOfGroup(e3), r2 = n2 + t3;
        this.groupSizes[e3] = 0;
        for (var o2 = n2; o2 < r2; o2++)
          this.tag.deleteRule(n2);
      }
    }, t2.getGroup = function(e3) {
      var t3 = "";
      if (e3 >= this.length || this.groupSizes[e3] === 0)
        return t3;
      for (var n2 = this.groupSizes[e3], r2 = this.indexOfGroup(e3), o2 = r2 + n2, s2 = r2; s2 < o2; s2++)
        t3 += this.tag.getRule(s2) + "/*!sc*/\n";
      return t3;
    }, e2;
  }();
  var x = new Map();
  var k = new Map();
  var V = 1;
  var B = function(e2) {
    if (x.has(e2))
      return x.get(e2);
    for (; k.has(V); )
      V++;
    var t2 = V++;
    return ((0 | t2) < 0 || t2 > 1 << 30) && j(16, "" + t2), x.set(e2, t2), k.set(t2, e2), t2;
  };
  var z = function(e2) {
    return k.get(e2);
  };
  var M = function(e2, t2) {
    t2 >= V && (V = t2 + 1), x.set(e2, t2), k.set(t2, e2);
  };
  var G = "style[" + A + '][data-styled-version="5.3.10"]';
  var L = new RegExp("^" + A + '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)');
  var F = function(e2, t2, n2) {
    for (var r2, o2 = n2.split(","), s2 = 0, i2 = o2.length; s2 < i2; s2++)
      (r2 = o2[s2]) && e2.registerName(t2, r2);
  };
  var Y = function(e2, t2) {
    for (var n2 = (t2.textContent || "").split("/*!sc*/\n"), r2 = [], o2 = 0, s2 = n2.length; o2 < s2; o2++) {
      var i2 = n2[o2].trim();
      if (i2) {
        var a2 = i2.match(L);
        if (a2) {
          var c2 = 0 | parseInt(a2[1], 10), u2 = a2[2];
          c2 !== 0 && (M(u2, c2), F(e2, u2, a2[3]), e2.getTag().insertRules(c2, r2)), r2.length = 0;
        } else
          r2.push(i2);
      }
    }
  };
  var q = function() {
    return typeof __webpack_nonce__ != "undefined" ? __webpack_nonce__ : null;
  };
  var H = function(e2) {
    var t2 = document.head, n2 = e2 || t2, r2 = document.createElement("style"), o2 = function(e3) {
      for (var t3 = e3.childNodes, n3 = t3.length; n3 >= 0; n3--) {
        var r3 = t3[n3];
        if (r3 && r3.nodeType === 1 && r3.hasAttribute(A))
          return r3;
      }
    }(n2), s2 = o2 !== void 0 ? o2.nextSibling : null;
    r2.setAttribute(A, "active"), r2.setAttribute("data-styled-version", "5.3.10");
    var i2 = q();
    return i2 && r2.setAttribute("nonce", i2), n2.insertBefore(r2, s2), r2;
  };
  var $ = function() {
    function e2(e3) {
      var t3 = this.element = H(e3);
      t3.appendChild(document.createTextNode("")), this.sheet = function(e4) {
        if (e4.sheet)
          return e4.sheet;
        for (var t4 = document.styleSheets, n2 = 0, r2 = t4.length; n2 < r2; n2++) {
          var o2 = t4[n2];
          if (o2.ownerNode === e4)
            return o2;
        }
        j(17);
      }(t3), this.length = 0;
    }
    var t2 = e2.prototype;
    return t2.insertRule = function(e3, t3) {
      try {
        return this.sheet.insertRule(t3, e3), this.length++, true;
      } catch (e4) {
        return false;
      }
    }, t2.deleteRule = function(e3) {
      this.sheet.deleteRule(e3), this.length--;
    }, t2.getRule = function(e3) {
      var t3 = this.sheet.cssRules[e3];
      return t3 !== void 0 && typeof t3.cssText == "string" ? t3.cssText : "";
    }, e2;
  }();
  var W = function() {
    function e2(e3) {
      var t3 = this.element = H(e3);
      this.nodes = t3.childNodes, this.length = 0;
    }
    var t2 = e2.prototype;
    return t2.insertRule = function(e3, t3) {
      if (e3 <= this.length && e3 >= 0) {
        var n2 = document.createTextNode(t3), r2 = this.nodes[e3];
        return this.element.insertBefore(n2, r2 || null), this.length++, true;
      }
      return false;
    }, t2.deleteRule = function(e3) {
      this.element.removeChild(this.nodes[e3]), this.length--;
    }, t2.getRule = function(e3) {
      return e3 < this.length ? this.nodes[e3].textContent : "";
    }, e2;
  }();
  var U = function() {
    function e2(e3) {
      this.rules = [], this.length = 0;
    }
    var t2 = e2.prototype;
    return t2.insertRule = function(e3, t3) {
      return e3 <= this.length && (this.rules.splice(e3, 0, t3), this.length++, true);
    }, t2.deleteRule = function(e3) {
      this.rules.splice(e3, 1), this.length--;
    }, t2.getRule = function(e3) {
      return e3 < this.length ? this.rules[e3] : "";
    }, e2;
  }();
  var J = I;
  var X = {isServer: !I, useCSSOMInjection: !P};
  var Z = function() {
    function e2(e3, t3, n2) {
      e3 === void 0 && (e3 = E), t3 === void 0 && (t3 = {}), this.options = v({}, X, {}, e3), this.gs = t3, this.names = new Map(n2), this.server = !!e3.isServer, !this.server && I && J && (J = false, function(e4) {
        for (var t4 = document.querySelectorAll(G), n3 = 0, r2 = t4.length; n3 < r2; n3++) {
          var o2 = t4[n3];
          o2 && o2.getAttribute(A) !== "active" && (Y(e4, o2), o2.parentNode && o2.parentNode.removeChild(o2));
        }
      }(this));
    }
    e2.registerId = function(e3) {
      return B(e3);
    };
    var t2 = e2.prototype;
    return t2.reconstructWithOptions = function(t3, n2) {
      return n2 === void 0 && (n2 = true), new e2(v({}, this.options, {}, t3), this.gs, n2 && this.names || void 0);
    }, t2.allocateGSInstance = function(e3) {
      return this.gs[e3] = (this.gs[e3] || 0) + 1;
    }, t2.getTag = function() {
      return this.tag || (this.tag = (n2 = (t3 = this.options).isServer, r2 = t3.useCSSOMInjection, o2 = t3.target, e3 = n2 ? new U(o2) : r2 ? new $(o2) : new W(o2), new T(e3)));
      var e3, t3, n2, r2, o2;
    }, t2.hasNameForId = function(e3, t3) {
      return this.names.has(e3) && this.names.get(e3).has(t3);
    }, t2.registerName = function(e3, t3) {
      if (B(e3), this.names.has(e3))
        this.names.get(e3).add(t3);
      else {
        var n2 = new Set();
        n2.add(t3), this.names.set(e3, n2);
      }
    }, t2.insertRules = function(e3, t3, n2) {
      this.registerName(e3, t3), this.getTag().insertRules(B(e3), n2);
    }, t2.clearNames = function(e3) {
      this.names.has(e3) && this.names.get(e3).clear();
    }, t2.clearRules = function(e3) {
      this.getTag().clearGroup(B(e3)), this.clearNames(e3);
    }, t2.clearTag = function() {
      this.tag = void 0;
    }, t2.toString = function() {
      return function(e3) {
        for (var t3 = e3.getTag(), n2 = t3.length, r2 = "", o2 = 0; o2 < n2; o2++) {
          var s2 = z(o2);
          if (s2 !== void 0) {
            var i2 = e3.names.get(s2), a2 = t3.getGroup(o2);
            if (i2 && a2 && i2.size) {
              var c2 = A + ".g" + o2 + '[id="' + s2 + '"]', u2 = "";
              i2 !== void 0 && i2.forEach(function(e4) {
                e4.length > 0 && (u2 += e4 + ",");
              }), r2 += "" + a2 + c2 + '{content:"' + u2 + '"}/*!sc*/\n';
            }
          }
        }
        return r2;
      }(this);
    }, e2;
  }();
  var K = /(a)(d)/gi;
  var Q = function(e2) {
    return String.fromCharCode(e2 + (e2 > 25 ? 39 : 97));
  };
  function ee(e2) {
    var t2, n2 = "";
    for (t2 = Math.abs(e2); t2 > 52; t2 = t2 / 52 | 0)
      n2 = Q(t2 % 52) + n2;
    return (Q(t2 % 52) + n2).replace(K, "$1-$2");
  }
  var te = function(e2, t2) {
    for (var n2 = t2.length; n2; )
      e2 = 33 * e2 ^ t2.charCodeAt(--n2);
    return e2;
  };
  var ne = function(e2) {
    return te(5381, e2);
  };
  function re(e2) {
    for (var t2 = 0; t2 < e2.length; t2 += 1) {
      var n2 = e2[t2];
      if (b(n2) && !N(n2))
        return false;
    }
    return true;
  }
  var oe = ne("5.3.10");
  var se = function() {
    function e2(e3, t2, n2) {
      this.rules = e3, this.staticRulesId = "", this.isStatic = false, this.componentId = t2, this.baseHash = te(oe, t2), this.baseStyle = n2, Z.registerId(t2);
    }
    return e2.prototype.generateAndInjectStyles = function(e3, t2, n2) {
      var r2 = this.componentId, o2 = [];
      if (this.baseStyle && o2.push(this.baseStyle.generateAndInjectStyles(e3, t2, n2)), this.isStatic && !n2.hash)
        if (this.staticRulesId && t2.hasNameForId(r2, this.staticRulesId))
          o2.push(this.staticRulesId);
        else {
          var s2 = Ne(this.rules, e3, t2, n2).join(""), i2 = ee(te(this.baseHash, s2) >>> 0);
          if (!t2.hasNameForId(r2, i2)) {
            var a2 = n2(s2, "." + i2, void 0, r2);
            t2.insertRules(r2, i2, a2);
          }
          o2.push(i2), this.staticRulesId = i2;
        }
      else {
        for (var c2 = this.rules.length, u2 = te(this.baseHash, n2.hash), l2 = "", d2 = 0; d2 < c2; d2++) {
          var h2 = this.rules[d2];
          if (typeof h2 == "string")
            l2 += h2, u2 = te(u2, h2 + d2);
          else if (h2) {
            var p = Ne(h2, e3, t2, n2), f = Array.isArray(p) ? p.join("") : p;
            u2 = te(u2, f + d2), l2 += f;
          }
        }
        if (l2) {
          var m = ee(u2 >>> 0);
          if (!t2.hasNameForId(r2, m)) {
            var y2 = n2(l2, "." + m, void 0, r2);
            t2.insertRules(r2, m, y2);
          }
          o2.push(m);
        }
      }
      return o2.join(" ");
    }, e2;
  }();
  var ie = /^\s*\/\/.*$/gm;
  var ae = [":", "[", ".", "#"];
  function ce(e2) {
    var t2, n2, r2, o2, s2 = e2 === void 0 ? E : e2, i2 = s2.options, a2 = i2 === void 0 ? E : i2, c2 = s2.plugins, u2 = c2 === void 0 ? w : c2, l2 = new stylis_browser_esm_default(a2), d2 = [], h2 = function(e3) {
      function t3(t4) {
        if (t4)
          try {
            e3(t4 + "}");
          } catch (e4) {
          }
      }
      return function(n3, r3, o3, s3, i3, a3, c3, u3, l3, d3) {
        switch (n3) {
          case 1:
            if (l3 === 0 && r3.charCodeAt(0) === 64)
              return e3(r3 + ";"), "";
            break;
          case 2:
            if (u3 === 0)
              return r3 + "/*|*/";
            break;
          case 3:
            switch (u3) {
              case 102:
              case 112:
                return e3(o3[0] + r3), "";
              default:
                return r3 + (d3 === 0 ? "/*|*/" : "");
            }
          case -2:
            r3.split("/*|*/}").forEach(t3);
        }
      };
    }(function(e3) {
      d2.push(e3);
    }), f = function(e3, r3, s3) {
      return r3 === 0 && ae.indexOf(s3[n2.length]) !== -1 || s3.match(o2) ? e3 : "." + t2;
    };
    function m(e3, s3, i3, a3) {
      a3 === void 0 && (a3 = "&");
      var c3 = e3.replace(ie, ""), u3 = s3 && i3 ? i3 + " " + s3 + " { " + c3 + " }" : c3;
      return t2 = a3, n2 = s3, r2 = new RegExp("\\" + n2 + "\\b", "g"), o2 = new RegExp("(\\" + n2 + "\\b){2,}"), l2(i3 || !s3 ? "" : s3, u3);
    }
    return l2.use([].concat(u2, [function(e3, t3, o3) {
      e3 === 2 && o3.length && o3[0].lastIndexOf(n2) > 0 && (o3[0] = o3[0].replace(r2, f));
    }, h2, function(e3) {
      if (e3 === -2) {
        var t3 = d2;
        return d2 = [], t3;
      }
    }])), m.hash = u2.length ? u2.reduce(function(e3, t3) {
      return t3.name || j(15), te(e3, t3.name);
    }, 5381).toString() : "", m;
  }
  var ue = import_react.default.createContext();
  var le = ue.Consumer;
  var de = import_react.default.createContext();
  var he = (de.Consumer, new Z());
  var pe = ce();
  function fe() {
    return (0, import_react.useContext)(ue) || he;
  }
  function me() {
    return (0, import_react.useContext)(de) || pe;
  }
  function ye(e2) {
    var t2 = (0, import_react.useState)(e2.stylisPlugins), n2 = t2[0], s2 = t2[1], c2 = fe(), u2 = (0, import_react.useMemo)(function() {
      var t3 = c2;
      return e2.sheet ? t3 = e2.sheet : e2.target && (t3 = t3.reconstructWithOptions({target: e2.target}, false)), e2.disableCSSOMInjection && (t3 = t3.reconstructWithOptions({useCSSOMInjection: false})), t3;
    }, [e2.disableCSSOMInjection, e2.sheet, e2.target]), l2 = (0, import_react.useMemo)(function() {
      return ce({options: {prefix: !e2.disableVendorPrefixes}, plugins: n2});
    }, [e2.disableVendorPrefixes, n2]);
    return (0, import_react.useEffect)(function() {
      (0, import_shallowequal.default)(n2, e2.stylisPlugins) || s2(e2.stylisPlugins);
    }, [e2.stylisPlugins]), import_react.default.createElement(ue.Provider, {value: u2}, import_react.default.createElement(de.Provider, {value: l2}, true ? import_react.default.Children.only(e2.children) : e2.children));
  }
  var ve = function() {
    function e2(e3, t2) {
      var n2 = this;
      this.inject = function(e4, t3) {
        t3 === void 0 && (t3 = pe);
        var r2 = n2.name + t3.hash;
        e4.hasNameForId(n2.id, r2) || e4.insertRules(n2.id, r2, t3(n2.rules, r2, "@keyframes"));
      }, this.toString = function() {
        return j(12, String(n2.name));
      }, this.name = e3, this.id = "sc-keyframes-" + e3, this.rules = t2;
    }
    return e2.prototype.getName = function(e3) {
      return e3 === void 0 && (e3 = pe), this.name + e3.hash;
    }, e2;
  }();
  var ge = /([A-Z])/;
  var Se = /([A-Z])/g;
  var we = /^ms-/;
  var Ee = function(e2) {
    return "-" + e2.toLowerCase();
  };
  function be(e2) {
    return ge.test(e2) ? e2.replace(Se, Ee).replace(we, "-ms-") : e2;
  }
  var _e = function(e2) {
    return e2 == null || e2 === false || e2 === "";
  };
  function Ne(e2, n2, r2, o2) {
    if (Array.isArray(e2)) {
      for (var s2, i2 = [], a2 = 0, c2 = e2.length; a2 < c2; a2 += 1)
        (s2 = Ne(e2[a2], n2, r2, o2)) !== "" && (Array.isArray(s2) ? i2.push.apply(i2, s2) : i2.push(s2));
      return i2;
    }
    if (_e(e2))
      return "";
    if (N(e2))
      return "." + e2.styledComponentId;
    if (b(e2)) {
      if (typeof (l2 = e2) != "function" || l2.prototype && l2.prototype.isReactComponent || !n2)
        return e2;
      var u2 = e2(n2);
      return (0, import_react_is.isElement)(u2) && console.warn(_(e2) + " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."), Ne(u2, n2, r2, o2);
    }
    var l2;
    return e2 instanceof ve ? r2 ? (e2.inject(r2, o2), e2.getName(o2)) : e2 : S(e2) ? function e3(t2, n3) {
      var r3, o3, s3 = [];
      for (var i3 in t2)
        t2.hasOwnProperty(i3) && !_e(t2[i3]) && (Array.isArray(t2[i3]) && t2[i3].isCss || b(t2[i3]) ? s3.push(be(i3) + ":", t2[i3], ";") : S(t2[i3]) ? s3.push.apply(s3, e3(t2[i3], i3)) : s3.push(be(i3) + ": " + (r3 = i3, (o3 = t2[i3]) == null || typeof o3 == "boolean" || o3 === "" ? "" : typeof o3 != "number" || o3 === 0 || r3 in unitless_browser_esm_default || r3.startsWith("--") ? String(o3).trim() : o3 + "px") + ";"));
      return n3 ? [n3 + " {"].concat(s3, ["}"]) : s3;
    }(e2) : e2.toString();
  }
  var Ae = function(e2) {
    return Array.isArray(e2) && (e2.isCss = true), e2;
  };
  function Ce(e2) {
    for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
      n2[r2 - 1] = arguments[r2];
    return b(e2) || S(e2) ? Ae(Ne(g(w, [e2].concat(n2)))) : n2.length === 0 && e2.length === 1 && typeof e2[0] == "string" ? e2 : Ae(Ne(g(e2, n2)));
  }
  var Ie = /invalid hook call/i;
  var Pe = new Set();
  var Oe = function(e2, t2) {
    if (true) {
      var n2 = "The component " + e2 + (t2 ? ' with the id of "' + t2 + '"' : "") + " has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.", r2 = console.error;
      try {
        var o2 = true;
        console.error = function(e3) {
          if (Ie.test(e3))
            o2 = false, Pe.delete(n2);
          else {
            for (var t3 = arguments.length, s2 = new Array(t3 > 1 ? t3 - 1 : 0), i2 = 1; i2 < t3; i2++)
              s2[i2 - 1] = arguments[i2];
            r2.apply(void 0, [e3].concat(s2));
          }
        }, (0, import_react.useRef)(), o2 && !Pe.has(n2) && (console.warn(n2), Pe.add(n2));
      } catch (e3) {
        Ie.test(e3.message) && Pe.delete(n2);
      } finally {
        console.error = r2;
      }
    }
  };
  var Re = function(e2, t2, n2) {
    return n2 === void 0 && (n2 = E), e2.theme !== n2.theme && e2.theme || t2 || n2.theme;
  };
  var De = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g;
  var je = /(^-|-$)/g;
  function Te(e2) {
    return e2.replace(De, "-").replace(je, "");
  }
  var xe = function(e2) {
    return ee(ne(e2) >>> 0);
  };
  function ke(e2) {
    return typeof e2 == "string" && e2.charAt(0) === e2.charAt(0).toLowerCase();
  }
  var Ve = function(e2) {
    return typeof e2 == "function" || typeof e2 == "object" && e2 !== null && !Array.isArray(e2);
  };
  var Be = function(e2) {
    return e2 !== "__proto__" && e2 !== "constructor" && e2 !== "prototype";
  };
  function ze(e2, t2, n2) {
    var r2 = e2[n2];
    Ve(t2) && Ve(r2) ? Me(r2, t2) : e2[n2] = t2;
  }
  function Me(e2) {
    for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
      n2[r2 - 1] = arguments[r2];
    for (var o2 = 0, s2 = n2; o2 < s2.length; o2++) {
      var i2 = s2[o2];
      if (Ve(i2))
        for (var a2 in i2)
          Be(a2) && ze(e2, i2[a2], a2);
    }
    return e2;
  }
  var Ge = import_react.default.createContext();
  var Le = Ge.Consumer;
  var Ye = {};
  function qe(e2, t2, n2) {
    var o2 = N(e2), i2 = !ke(e2), a2 = t2.attrs, c2 = a2 === void 0 ? w : a2, d2 = t2.componentId, h2 = d2 === void 0 ? function(e3, t3) {
      var n3 = typeof e3 != "string" ? "sc" : Te(e3);
      Ye[n3] = (Ye[n3] || 0) + 1;
      var r2 = n3 + "-" + xe("5.3.10" + n3 + Ye[n3]);
      return t3 ? t3 + "-" + r2 : r2;
    }(t2.displayName, t2.parentComponentId) : d2, p = t2.displayName, f = p === void 0 ? function(e3) {
      return ke(e3) ? "styled." + e3 : "Styled(" + _(e3) + ")";
    }(e2) : p, g2 = t2.displayName && t2.componentId ? Te(t2.displayName) + "-" + t2.componentId : t2.componentId || h2, S2 = o2 && e2.attrs ? Array.prototype.concat(e2.attrs, c2).filter(Boolean) : c2, A2 = t2.shouldForwardProp;
    o2 && e2.shouldForwardProp && (A2 = t2.shouldForwardProp ? function(n3, r2, o3) {
      return e2.shouldForwardProp(n3, r2, o3) && t2.shouldForwardProp(n3, r2, o3);
    } : e2.shouldForwardProp);
    var C, I2 = new se(n2, g2, o2 ? e2.componentStyle : void 0), P2 = I2.isStatic && c2.length === 0, O = function(e3, t3) {
      return function(e4, t4, n3, r2) {
        var o3 = e4.attrs, i3 = e4.componentStyle, a3 = e4.defaultProps, c3 = e4.foldedComponentIds, d3 = e4.shouldForwardProp, h3 = e4.styledComponentId, p2 = e4.target;
        (0, import_react.useDebugValue)(h3);
        var f2 = function(e5, t5, n4) {
          e5 === void 0 && (e5 = E);
          var r3 = v({}, t5, {theme: e5}), o4 = {};
          return n4.forEach(function(e6) {
            var t6, n5, s2, i4 = e6;
            for (t6 in b(i4) && (i4 = i4(r3)), i4)
              r3[t6] = o4[t6] = t6 === "className" ? (n5 = o4[t6], s2 = i4[t6], n5 && s2 ? n5 + " " + s2 : n5 || s2) : i4[t6];
          }), [r3, o4];
        }(Re(t4, (0, import_react.useContext)(Ge), a3) || E, t4, o3), y2 = f2[0], g3 = f2[1], S3 = function(e5, t5, n4, r3) {
          var o4 = fe(), s2 = me(), i4 = t5 ? e5.generateAndInjectStyles(E, o4, s2) : e5.generateAndInjectStyles(n4, o4, s2);
          return (0, import_react.useDebugValue)(i4), !t5 && r3 && r3(i4), i4;
        }(i3, r2, y2, true ? e4.warnTooManyClasses : void 0), w2 = n3, _2 = g3.$as || t4.$as || g3.as || t4.as || p2, N2 = ke(_2), A3 = g3 !== t4 ? v({}, t4, {}, g3) : t4, C2 = {};
        for (var I3 in A3)
          I3[0] !== "$" && I3 !== "as" && (I3 === "forwardedAs" ? C2.as = A3[I3] : (d3 ? d3(I3, import_emotion_is_prop_valid_cjs_default._default, _2) : !N2 || (0, import_emotion_is_prop_valid_cjs_default._default)(I3)) && (C2[I3] = A3[I3]));
        return t4.style && g3.style !== t4.style && (C2.style = v({}, t4.style, {}, g3.style)), C2.className = Array.prototype.concat(c3, h3, S3 !== h3 ? S3 : null, t4.className, g3.className).filter(Boolean).join(" "), C2.ref = w2, (0, import_react.createElement)(_2, C2);
      }(C, e3, t3, P2);
    };
    return O.displayName = f, (C = import_react.default.forwardRef(O)).attrs = S2, C.componentStyle = I2, C.displayName = f, C.shouldForwardProp = A2, C.foldedComponentIds = o2 ? Array.prototype.concat(e2.foldedComponentIds, e2.styledComponentId) : w, C.styledComponentId = g2, C.target = o2 ? e2.target : e2, C.withComponent = function(e3) {
      var r2 = t2.componentId, o3 = function(e4, t3) {
        if (e4 == null)
          return {};
        var n3, r3, o4 = {}, s3 = Object.keys(e4);
        for (r3 = 0; r3 < s3.length; r3++)
          n3 = s3[r3], t3.indexOf(n3) >= 0 || (o4[n3] = e4[n3]);
        return o4;
      }(t2, ["componentId"]), s2 = r2 && r2 + "-" + (ke(e3) ? e3 : Te(_(e3)));
      return qe(e3, v({}, o3, {attrs: S2, componentId: s2}), n2);
    }, Object.defineProperty(C, "defaultProps", {get: function() {
      return this._foldedDefaultProps;
    }, set: function(t3) {
      this._foldedDefaultProps = o2 ? Me({}, e2.defaultProps, t3) : t3;
    }}), Oe(f, g2), C.warnTooManyClasses = function(e3, t3) {
      var n3 = {}, r2 = false;
      return function(o3) {
        if (!r2 && (n3[o3] = true, Object.keys(n3).length >= 200)) {
          var s2 = t3 ? ' with the id of "' + t3 + '"' : "";
          console.warn("Over 200 classes were generated for component " + e3 + s2 + ".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"), r2 = true, n3 = {};
        }
      };
    }(f, g2), Object.defineProperty(C, "toString", {value: function() {
      return "." + C.styledComponentId;
    }}), i2 && (0, import_hoist_non_react_statics.default)(C, e2, {attrs: true, componentStyle: true, displayName: true, foldedComponentIds: true, shouldForwardProp: true, styledComponentId: true, target: true, withComponent: true}), C;
  }
  var He = function(e2) {
    return function e3(t2, r2, o2) {
      if (o2 === void 0 && (o2 = E), !(0, import_react_is.isValidElementType)(r2))
        return j(1, String(r2));
      var s2 = function() {
        return t2(r2, o2, Ce.apply(void 0, arguments));
      };
      return s2.withConfig = function(n2) {
        return e3(t2, r2, v({}, o2, {}, n2));
      }, s2.attrs = function(n2) {
        return e3(t2, r2, v({}, o2, {attrs: Array.prototype.concat(o2.attrs, n2).filter(Boolean)}));
      }, s2;
    }(qe, e2);
  };
  ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "textPath", "tspan"].forEach(function(e2) {
    He[e2] = He(e2);
  });
  var $e = function() {
    function e2(e3, t3) {
      this.rules = e3, this.componentId = t3, this.isStatic = re(e3), Z.registerId(this.componentId + 1);
    }
    var t2 = e2.prototype;
    return t2.createStyles = function(e3, t3, n2, r2) {
      var o2 = r2(Ne(this.rules, t3, n2, r2).join(""), ""), s2 = this.componentId + e3;
      n2.insertRules(s2, s2, o2);
    }, t2.removeStyles = function(e3, t3) {
      t3.clearRules(this.componentId + e3);
    }, t2.renderStyles = function(e3, t3, n2, r2) {
      e3 > 2 && Z.registerId(this.componentId + e3), this.removeStyles(e3, n2), this.createStyles(e3, t3, n2, r2);
    }, e2;
  }();
  var Je = function() {
    function e2() {
      var e3 = this;
      this._emitSheetCSS = function() {
        var t3 = e3.instance.toString();
        if (!t3)
          return "";
        var n2 = q();
        return "<style " + [n2 && 'nonce="' + n2 + '"', A + '="true"', 'data-styled-version="5.3.10"'].filter(Boolean).join(" ") + ">" + t3 + "</style>";
      }, this.getStyleTags = function() {
        return e3.sealed ? j(2) : e3._emitSheetCSS();
      }, this.getStyleElement = function() {
        var t3;
        if (e3.sealed)
          return j(2);
        var n2 = ((t3 = {})[A] = "", t3["data-styled-version"] = "5.3.10", t3.dangerouslySetInnerHTML = {__html: e3.instance.toString()}, t3), o2 = q();
        return o2 && (n2.nonce = o2), [import_react.default.createElement("style", v({}, n2, {key: "sc-0-0"}))];
      }, this.seal = function() {
        e3.sealed = true;
      }, this.instance = new Z({isServer: true}), this.sealed = false;
    }
    var t2 = e2.prototype;
    return t2.collectStyles = function(e3) {
      return this.sealed ? j(2) : import_react.default.createElement(ye, {sheet: this.instance}, e3);
    }, t2.interleaveWithNodeStream = function(e3) {
      return j(3);
    }, e2;
  }();
  typeof navigator != "undefined" && navigator.product === "ReactNative" && console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"), typeof window != "undefined" && (window["__styled-components-init__"] = window["__styled-components-init__"] || 0, window["__styled-components-init__"] === 1 && console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."), window["__styled-components-init__"] += 1);
  var styled_components_browser_esm_default = He;

  // src/WebcamWithZoom.js
  var WebcamRootElement = styled_components_browser_esm_default.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  position: relative;
`;
  var WebcamInnerElement = styled_components_browser_esm_default.div`
  overflow: hidden;
  width: 100vw;
  aspect-ratio: 1;
  position: relative;
  flex: 10;
`;
  var WebcamWithZoom = (0, import_react2.forwardRef)((props, ref) => {
    const zoom = 1;
    const videoConstraints = {
      facingMode: "environment",
      width: {ideal: 1280 * 2},
      height: {ideal: 1280 * 2},
      aspectRatio: {ideal: 1}
    };
    return /* @__PURE__ */ import_react2.default.createElement(WebcamRootElement, null, /* @__PURE__ */ import_react2.default.createElement(WebcamInnerElement, null, /* @__PURE__ */ import_react2.default.createElement(import_react_webcam.default, {
      ref,
      screenshotFormat: "image/jpeg",
      videoConstraints,
      style: {
        width: "100vw",
        borderRadius: "1000px",
        aspectRatio: "1",
        position: "absolute",
        top: 0,
        left: 0,
        transform: `scale(${1 / zoom})`,
        transformOrigin: "0 0"
      }
    }), props.children));
  });
  WebcamWithZoom.displayName = "WebcamWithZoom";
  WebcamWithZoom.propTypes = {
    children: import_prop_types.default.node
  };
  var WebcamWithZoom_default = WebcamWithZoom;

  // src/index.js
  var Root = styled_components_browser_esm_default.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
`;
  var SnapButton = styled_components_browser_esm_default.button`
  appearance: none;
  -moz-appearance: none;
  -webkit-appearance: none;
  outline-style: none;
  width: 72px;
  height: 72px;
  margin-top: 16px;
  border-radius: 1000px;
  background-color: white;

  &:active {
    background-color: #eee;
  }
`;
  var StickerHolder = styled_components_browser_esm_default.div`
  position: absolute;
  top: calc(50% - sin(45deg) * 50%);
  bottom: calc(50% - sin(45deg) * 50%);
  right: calc(50% - sin(45deg) * 50%);
  left: calc(50% - sin(45deg) * 50%);
  display: flex;
  align-content: center;
  justify-content: center;
  user-select: none;
  z-index: 10;
`;
  var Sticker = styled_components_browser_esm_default.img`
  filter: drop-shadow(10px 10px 3px rgba(0,0,0,0.5));
  max-width: 100%;
  max-height 100%;
  width: 100%;
  object-fit: contain;
`;
  var runId = 0;
  var App = () => {
    const webcamRef = (0, import_react3.useRef)(null);
    const [stickerVisible, setStickerVisible] = (0, import_react3.useState)(false);
    const [stickerSrc, setStickerSrc] = (0, import_react3.useState)("");
    const onCapture = async () => {
      const video = webcamRef.current.video;
      runId++;
      const id = runId;
      const stickerImage = await generateStickerFromVideo(video, (cartoonImageSrc) => {
        const image = new Image();
        image.src = cartoonImageSrc;
        if (id === runId) {
          setStickerSrc(cartoonImageSrc);
        }
      });
      if (stickerImage) {
        setStickerSrc(stickerImage.src);
        setStickerVisible(true);
      }
    };
    return /* @__PURE__ */ import_react3.default.createElement(Root, {
      style: {backgroundColor: "rgba(18, 18, 18, 0.1)"}
    }, /* @__PURE__ */ import_react3.default.createElement(WebcamWithZoom_default, {
      ref: webcamRef
    }, /* @__PURE__ */ import_react3.default.createElement("div", {
      id: "reticle",
      style: {position: "absolute", top: "calc(50% - 5px)", left: "calc(50% - 5px)", width: 10, height: 10, borderRadius: 100, backgroundColor: "rgba(0.5, 0.5, 0.5, 0.33)"}
    }), /* @__PURE__ */ import_react3.default.createElement(StickerHolder, {
      style: {display: stickerVisible ? "flex" : "none"}
    }, /* @__PURE__ */ import_react3.default.createElement(Sticker, {
      src: stickerSrc,
      onClick: () => {
        cancelLastSticker();
        setStickerVisible(false);
      }
    }))), /* @__PURE__ */ import_react3.default.createElement(SnapButton, {
      onClick: onCapture
    }, "\xA0"), /* @__PURE__ */ import_react3.default.createElement("div", {
      id: "log"
    }, "\xA0"));
  };
  var container = document.getElementById("root");
  var root = (0, import_client.createRoot)(container);
  root.render(/* @__PURE__ */ import_react3.default.createElement(App, null));
})();
//# sourceMappingURL=bundle.js.map
